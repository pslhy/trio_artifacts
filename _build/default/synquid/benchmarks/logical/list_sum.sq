
data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure hd :: NatList -> Nat where
  Nil -> Z
  Cons x xs -> x

measure tl :: NatList -> NatList where
  Nil -> Nil
  Cons x xs -> xs
  
list_fold :: (Nat -> Nat -> Nat) -> NatList -> Nat -> Nat
list_fold = \f . \xs . \acc .
  match xs with
    Nil            -> acc
    Cons head tail -> f (list_fold f tail acc) head
  
nat_add :: n1:Nat -> n2:Nat -> { Nat | dec n1 + dec n2 == dec _v }
nat_add = \n1 . \n2 .
  match n1 with
    Z   -> n2
    S m -> S (nat_add m n2)
  
list_sum :: xs:NatList -> { Nat | 

   (xs == Nil ==> dec _v == 0) &&
   ((xs != Nil && tl xs == Nil) ==> dec _v == dec (hd xs)) &&
   ((xs != Nil && tl xs != Nil && tl (tl xs) == Nil) ==> dec _v == dec (hd xs) + dec (hd (tl xs)))

}
list_sum = ??
