data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m

data Tree where
  Leaf :: Tree
  Node :: Tree -> Nat -> Tree -> Tree

termination measure size :: Tree -> {Int | _v >= 0} where
  Leaf -> 0
  Node left x right -> 1 + size left + size right

measure isNode :: Tree -> Bool where
  Leaf -> False
  Node l x r -> True

measure value :: Tree -> Nat where
  Leaf -> Z
  Node l x r -> x

measure left :: Tree -> Tree where
  Leaf -> Leaf
  Node l x r -> l

measure right :: Tree -> Tree where
  Leaf -> Leaf
  Node l x r -> r

measure sum :: Tree -> {Int | _v >= 0} where
  Leaf -> 0
  Node l x r -> dec x + sum l + sum r

div2 :: Nat -> Nat
div2 = \n1 .
  match n1 with
    Z -> Z
    S np -> (match np with
              Z -> Z
              S m -> S (div2 m))

inc :: Nat -> Nat
inc = \n1 . S n1

zero :: Nat -> Nat
zero = \n1 . Z

tree_map :: t:Tree -> f:(nat -> nat) -> { Tree |
  ((t == inc) ==> (sum t + size t == sum _v)) &&
  ((t == zero) ==> (0 == sum _v))
}
tree_map = ??
