data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure hd :: NatList -> Nat where
  Nil -> Z
  Cons h t -> h

measure tl :: NatList -> NatList where
  Nil -> Nil
  Cons h t -> t
  
list_pairwise_swap :: xs:NatList -> { NatList | 

  (xs == Nil ==> _v == Nil) &&
  (xs != Nil && tl xs == Nil ==> _v == Nil) &&
  (xs != Nil && tl xs != Nil && tl (tl xs) == Nil ==> _v == Cons (hd (tl xs)) (Cons (hd xs) Nil)) &&
  (xs != Nil && tl xs != Nil && tl (tl xs) != Nil && tl (tl (tl xs)) == Nil ==> _v == Nil) &&
  (xs != Nil && tl xs != Nil && tl (tl xs) != Nil && tl (tl (tl xs)) != Nil && tl (tl (tl (tl xs))) == Nil ==>
  _v == Cons (hd (tl xs)) (Cons (hd xs) (Cons (hd (tl (tl (tl xs)))) (Cons (hd (tl (tl xs))) (Nil)))))


}
list_pairwise_swap = ??
