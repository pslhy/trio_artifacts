
data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

measure hd :: NatList -> Nat where
  Nil -> Z
  Cons h t -> h

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
data Cmp where
  LT :: Cmp
  EQ :: Cmp
  GT :: Cmp
 
measure elems :: NatList -> Set Nat where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
nat_compare :: n1:Nat -> n2:Nat -> { Cmp | (dec n1 == dec n2 ==> _v == EQ) && (dec n1 < dec n2 ==> _v == LT) && (dec n1 > dec n2 ==> _v == GT) && (n1 == n2 <==> _v == EQ)}
nat_compare = \n1 . \n2 .
  match n1 with
    Z ->
      match n2 with
        Z   -> EQ
        S _ -> LT
    S m1 ->
      match n2 with
        Z    -> GT
        S m2 -> nat_compare m1 m2
    
measure list_is_sorted :: NatList -> Bool where
  Nil -> True
  Cons x y -> if y == Nil 
                then True
                else  if (dec x > dec (hd y)) 
                        then list_is_sorted(y) 
                        else False
  
list_insert :: l:NatList -> x:Nat -> { NatList | (elems _v == elems l + [x]) {-&& ((list_is_sorted l) ==> (list_is_sorted _v))-}}
list_insert = \xs . \n .
  match xs with
    Nil ->
      Cons n Nil
    Cons head tail ->
      match nat_compare n head with
        LT -> Cons n xs
        EQ -> xs
        GT -> Cons head (list_insert tail n)
  
list_sort_sorted_insert :: xs:NatList -> { NatList | 

   list_is_sorted _v && elems xs <= elems _v

}
list_sort_sorted_insert = ??
