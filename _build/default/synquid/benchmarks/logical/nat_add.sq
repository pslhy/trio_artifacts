data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
nat_add :: in1:Nat -> in2:Nat -> { Nat | 

   (dec _v >= (dec in1)) &&
   (dec _v >= (dec in2)) &&
   ((in1 == S (S Z) && in2 == S (S Z)) ==> _v == S (S (S (S Z))))

}
nat_add = ??
