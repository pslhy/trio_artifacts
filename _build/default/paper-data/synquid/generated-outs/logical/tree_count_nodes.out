nat_add :: arg1:Nat -> arg0:Nat -> Nat
nat_add = \n1 . \n2 . 
    match n1 with
      Z -> n2
      S m -> S (nat_add m n2)

tree_count_nodes :: t:NatTree -> {Nat|((t == (Leaf) ==> _v == (Z)) && ((isNode t && leftSubTree t == (Leaf)) && rightSubTree t == (Leaf) ==> _v == (S (Z)))) && ((((((isNode t && isNode (leftSubTree t)) && isNode (rightSubTree t)) && leftSubTree (leftSubTree t) == (Leaf)) && rightSubTree (leftSubTree t) == (Leaf)) && leftSubTree (rightSubTree t) == (Leaf)) && rightSubTree (rightSubTree t) == (Leaf) ==> _v == (S ((S ((S (Z)))))))}
tree_count_nodes = \t . 
  match t with
    Leaf -> Z
    Node x4 x5 x6 -> 
      match x4 with
        Leaf -> S Z
        Node x11 x12 x13 -> S (S (S Z))
