[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] ========================= Synthesizing 'tree_binsert' =========================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± t, x
[[34m  Info  [0m]                                Î  â†“tree_binsert(t, x) && true
[[34m  Info  [0m]                                Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /27,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± t, x
[[34m  Info  [0m]                          Î  â†“tree_binsert(t, x) && true
[[34m  Info  [0m]                          Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /27,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'x'    ] âŸ¦ Î± t, x
[[34m  Info  [0m]                          Î  â†“tree_binsert(t, x) && true
[[34m  Info  [0m]                          Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /27,0/
[[34m  Info  [0m] [ADT Split on 'x'    ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'x'    ] - âŸ¦ Î± t
[[34m  Info  [0m]                            Î  (â†“tree_binsert(t, Z) && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /13,0/
[[34m  Info  [0m] [ADT Split on 'x'    ] - âŸ¦ Î± nat$2, t
[[34m  Info  [0m]                            Î  (â†“tree_binsert(t, S(nat$2)) && è°¶S(nat$2)) && true
[[34m  Info  [0m]                            Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](S(nat$2))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /14,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± t
[[34m  Info  [0m]                                Î  (â†“tree_binsert(t, Z) && è°¶Z) && true
[[34m  Info  [0m]                                Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /13,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± t
[[34m  Info  [0m]                          Î  (â†“tree_binsert(t, Z) && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /13,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 't'    ] âŸ¦ Î± t, x
[[34m  Info  [0m]                          Î  â†“tree_binsert(t, x) && true
[[34m  Info  [0m]                          Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /27,0/
[[34m  Info  [0m] [ADT Split on 't'    ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 't'    ] - âŸ¦ Î± x
[[34m  Info  [0m]                            Î  (â†“tree_binsert(Leaf, x) && è°¶Leaf) && true
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 't'    ] - âŸ¦ Î± left$19, n$9, right$19, x
[[34m  Info  [0m]                            Î  (â†“tree_binsert(Node(left$19, n$9, right$19), x) && è°¶Node(left$19, n$9, right$19)) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$19, n$9, right$19)) == T ==> in_order(out) == T && (tree_content(Node(left$19, n$9, right$19)) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /23,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± x
[[34m  Info  [0m]                                Î  (â†“tree_binsert(Leaf, x) && è°¶Leaf) && true
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± x
[[34m  Info  [0m]                          Î  (â†“tree_binsert(Leaf, x) && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'x'    ] âŸ¦ Î± x
[[34m  Info  [0m]                          Î  (â†“tree_binsert(Leaf, x) && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](x)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'x'    ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'x'    ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  (â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'x'    ] - âŸ¦ Î± nat$5
[[34m  Info  [0m]                            Î  (â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5)) && true
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  (â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 't'    ] âŸ¦ Î± t
[[34m  Info  [0m]                          Î  (â†“tree_binsert(t, Z) && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(t) == T ==> in_order(out) == T && (tree_content(t) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /13,0/
[[34m  Info  [0m] [ADT Split on 't'    ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 't'    ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  (â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 't'    ] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                            Î  (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22)) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /12,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  (â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$5)] âŸ¦ Î± nat$5
[[34m  Info  [0m]                                                   Î  (â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5)) && true
[[34m  Info  [0m]                                                   Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                   x out
[[34m  Info  [0m]                                                 âŸ§ /3,0/
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$5)] Decomposed into:
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$5)] - âŸ¦ Î± nat$5
[[34m  Info  [0m]                                                     Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                                                       (â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5)) && true
[[34m  Info  [0m]                                                     Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                     x out
[[34m  Info  [0m]                                                   âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$5
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                                  (â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5)) && true
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$5
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                            (â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5)) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls tree_binsert$0(left$22, Z$0), tree_binsert$0(right$22, Z$0)] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                                                                                 Î  (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22)) && true
[[34m  Info  [0m]                                                                                 Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                                                 x out
[[34m  Info  [0m]                                                                               âŸ§ /12,0/
[[34m  Info  [0m] [Introduce calls tree_binsert$0(left$22, Z$0), tree_binsert$0(right$22, Z$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls tree_binsert$0(left$22, Z$0), tree_binsert$0(right$22, Z$0)] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                                                                                   Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                                                                     val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                                                                     (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z)) && true
[[34m  Info  [0m]                                                                                   Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                                                   x out
[[34m  Info  [0m]                                                                                 âŸ§ /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z)) && true
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z)) && true
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'nat$5'] âŸ¦ Î± nat$5
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                            (â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5)) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'nat$5'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'nat$5'] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Leaf, S(Z)) && è°¶Leaf && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(Z))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'nat$5'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                              (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9)) && true
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Leaf, S(Z)) && è°¶Leaf && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(Z))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, S(Z), Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$11'] âŸ¦ Î± nat$5
[[34m  Info  [0m]                           Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                             (â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5)) && true
[[34m  Info  [0m]                           Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$11'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$11'] - âŸ¦ Î± nat$5
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                               (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$11'] - âŸ¦ Î± nat$5
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                               rec$11.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$29: NatTree = rec$11.left
[[34m  Info  [0m]                                 val n$19: Nat = rec$11.n
[[34m  Info  [0m]                                 val right$29: NatTree = rec$11.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5) && è°¶Node(left$29, n$19, right$29) && inactive(rec$11)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$5
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                                  (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$5
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                            (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z)) && true
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$44, left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, S(nat$44), right$22), Z) && è°¶Z && è°¶Node(left$22, S(nat$44), right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶S(nat$44)) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$44), right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$44), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z) && true
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z)) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$32, n$22, right$32, n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$32, n$22, right$32), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Node(left$32, n$22, right$32), n$12, right$22), Z) && è°¶Z && è°¶Node(Node(left$32, n$22, right$32), n$12, right$22) && â†“tree_binsert(Node(left$32, n$22, right$32), Z) && â†“tree_binsert(right$22, Z) && è°¶Node(left$32, n$22, right$32)) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$32, n$22, right$32), n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$32, n$22, right$32), n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z)) && true
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$33, n$23, right$33, left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$33, n$23, right$33), Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, Node(left$33, n$23, right$33)), Z) && è°¶Z && è°¶Node(left$22, n$12, Node(left$33, n$23, right$33)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$33, n$23, right$33), Z) && è°¶Node(left$33, n$23, right$33)) && true
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Node(left$33, n$23, right$33))) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Node(left$33, n$23, right$33))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z)) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$34: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$24: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$34: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Node(left$34, n$24, right$34) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z)) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$35: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$25: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$35: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Node(left$35, n$25, right$35) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$9)] âŸ¦ Î± nat$9
[[34m  Info  [0m]                                                   Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                                                     (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9)) && true
[[34m  Info  [0m]                                                   Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                   x out
[[34m  Info  [0m]                                                 âŸ§ /2,0/
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$9)] Decomposed into:
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$9)] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                                                     Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                                                       val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                                                       (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9)) && true
[[34m  Info  [0m]                                                     Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                     x out
[[34m  Info  [0m]                                                   âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$9
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                                  val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                                  (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9)) && true
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$9
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                            (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9)) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'nat$5'] âŸ¦ Î± nat$5
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, nat$5)
[[34m  Info  [0m]                            (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(nat$5)) && è°¶Leaf && è°¶S(nat$5) && â†“tree_binsert(Leaf, nat$5) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(nat$5))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'nat$5'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'nat$5'] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(Z)) && è°¶Leaf && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$11) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(Z))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'nat$5'] - âŸ¦ Î± nat$50
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                              (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50)) && true)
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(Z)) && è°¶Leaf && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$11) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(Z))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, S(Z), Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$207, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(Leaf, S(nat$207), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$207), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶S(nat$207)) && true
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$207), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$207), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$447, n$437, right$447, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$447, n$437, right$447), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Node(left$447, n$437, right$447), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$447, n$437, right$447), Z, right$22) && â†“tree_binsert(Node(left$447, n$437, right$447), Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Node(left$447, n$437, right$447)) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$447, n$437, right$447), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$447, n$437, right$447), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z) && true
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$448, n$438, right$448, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$448, n$438, right$448), Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Node(left$448, n$438, right$448)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$448, n$438, right$448)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$448, n$438, right$448), Z) && è°¶Z && è°¶Node(left$448, n$438, right$448)) && true
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$448, n$438, right$448))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$448, n$438, right$448))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$449: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$439: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$449: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Node(left$449, n$439, right$449) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$450: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$440: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$450: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Node(left$450, n$440, right$450) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$210, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, S(nat$210), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$210), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶S(nat$210)) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$210), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$210), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$214, left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$214), right$22), Z) && è°¶Z && è°¶Node(left$22, S(nat$214), right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶S(nat$214)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$214), right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$214), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$219, left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$219), right$22), Z) && è°¶Z && è°¶Node(left$22, S(nat$219), right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶S(nat$219)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$219), right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$219), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'nat$9'] âŸ¦ Î± nat$9
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                            (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9)) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'nat$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'nat$9'] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(Z))
[[34m  Info  [0m]                              val rec$48: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Leaf, S(S(Z))) && è°¶Leaf && è°¶S(S(Z)) && â†“tree_binsert(Leaf, S(Z)) && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(Z)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'nat$9'] - âŸ¦ Î± nat$222
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(S(nat$222)))
[[34m  Info  [0m]                              val rec$48: NatTree = tree_binsert(Leaf, S(nat$222))
[[34m  Info  [0m]                              (â†“tree_binsert(Leaf, S(S(S(nat$222)))) && è°¶Leaf && è°¶S(S(S(nat$222))) && â†“tree_binsert(Leaf, S(S(nat$222))) && è°¶S(S(nat$222)) && â†“tree_binsert(Leaf, S(nat$222)) && è°¶S(nat$222)) && true
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(S(nat$222))))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(Z))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Leaf, S(S(Z))) && è°¶Leaf && è°¶S(S(Z)) && â†“tree_binsert(Leaf, S(Z)) && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(Z)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, S(S(Z)), Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$857, n$444, right$857, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$857, n$444, right$857), Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, Node(left$857, n$444, right$857)), Z) && è°¶Z && è°¶Node(Leaf, n$12, Node(left$857, n$444, right$857)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$857, n$444, right$857), Z) && è°¶Leaf && è°¶Node(left$857, n$444, right$857)) && true
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Node(left$857, n$444, right$857))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Node(left$857, n$444, right$857))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$858: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$445: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$858: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Node(left$858, n$445, right$858) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$859: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$446: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$859: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Node(left$859, n$446, right$859) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$863, n$853, right$1266, n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$863, n$853, right$1266), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Node(left$863, n$853, right$1266), n$12, Leaf), Z) && è°¶Z && è°¶Node(Node(left$863, n$853, right$1266), n$12, Leaf) && â†“tree_binsert(Node(left$863, n$853, right$1266), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Node(left$863, n$853, right$1266)) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$863, n$853, right$1266), n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$863, n$853, right$1266), n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$864: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$854: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$1267: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Node(left$864, n$854, right$1267) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$865: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$855: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$1268: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Node(left$865, n$855, right$1268) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$1273, n$1263, right$1273, n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$1273, n$1263, right$1273), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$1273, n$1263, right$1273), n$12, right$22), Z) && è°¶Z && è°¶Node(Node(left$1273, n$1263, right$1273), n$12, right$22) && â†“tree_binsert(Node(left$1273, n$1263, right$1273), Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Node(left$1273, n$1263, right$1273)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$1273, n$1263, right$1273), n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$1273, n$1263, right$1273), n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$1274, n$1264, right$1274, left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$1274, n$1264, right$1274), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Node(left$1274, n$1264, right$1274)), Z) && è°¶Z && è°¶Node(left$22, n$12, Node(left$1274, n$1264, right$1274)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$1274, n$1264, right$1274), Z) && è°¶Leaf && inactive(rec$12) && è°¶Node(left$1274, n$1264, right$1274)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Node(left$1274, n$1264, right$1274))) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Node(left$1274, n$1264, right$1274))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$1275: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$1265: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$1275: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Node(left$1275, n$1265, right$1275) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /12,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$3688, n$1679, right$1689, n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$3688, n$1679, right$1689), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$3688, n$1679, right$1689), n$12, right$22), Z) && è°¶Z && è°¶Node(Node(left$3688, n$1679, right$1689), n$12, right$22) && â†“tree_binsert(Node(left$3688, n$1679, right$1689), Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Node(left$3688, n$1679, right$1689)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$3688, n$1679, right$1689), n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$3688, n$1679, right$1689), n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$3689, n$1680, right$1690, left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$3689, n$1680, right$1690), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Node(left$3689, n$1680, right$1690)), Z) && è°¶Z && è°¶Node(left$22, n$12, Node(left$3689, n$1680, right$1690)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$3689, n$1680, right$1690), Z) && è°¶Leaf && inactive(rec$13) && è°¶Node(left$3689, n$1680, right$1690)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Node(left$3689, n$1680, right$1690))) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Node(left$3689, n$1680, right$1690))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$3690: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$1681: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$1691: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Node(left$3690, n$1681, right$1691) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /12,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$11'] âŸ¦ Î± nat$9
[[34m  Info  [0m]                           Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                             val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                             (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9)) && true
[[34m  Info  [0m]                           Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$11'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$11'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                               val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                               (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$11'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                               val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                               rec$11.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4102: NatTree = rec$11.left
[[34m  Info  [0m]                                 val n$2093: Nat = rec$11.n
[[34m  Info  [0m]                                 val right$4102: NatTree = rec$11.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Node(left$4102, n$2093, right$4102) && inactive(rec$11)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$9
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                                  val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                                  (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$9
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                            (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$48'] âŸ¦ Î± nat$9
[[34m  Info  [0m]                           Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                             val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                             (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9)) && true
[[34m  Info  [0m]                           Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$48'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$48'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                               val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                               (rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48)) && true)
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$48'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                               val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                               rec$48.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4103: NatTree = rec$48.left
[[34m  Info  [0m]                                 val n$2094: Nat = rec$48.n
[[34m  Info  [0m]                                 val right$4103: NatTree = rec$48.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Node(left$4103, n$2094, right$4103) && inactive(rec$48)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$9
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                                  val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                                  (rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48)) && true)
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$9
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                            (rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48)) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$50)] âŸ¦ Î± nat$50
[[34m  Info  [0m]                                                    Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                                                      (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50)) && true)
[[34m  Info  [0m]                                                    Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                    x out
[[34m  Info  [0m]                                                  âŸ§ /2,0/
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$50)] Decomposed into:
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$50)] - âŸ¦ Î± nat$50
[[34m  Info  [0m]                                                      Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                                                        (rec$11 == Leaf) && {
[[34m  Info  [0m]                                                          val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                                                          (â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50)) && true
[[34m  Info  [0m]                                                        }
[[34m  Info  [0m]                                                      Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                      x out
[[34m  Info  [0m]                                                    âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$50
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                                  (rec$11 == Leaf) && {
[[34m  Info  [0m]                                    val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                                    (â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$50
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                            (rec$11 == Leaf) && {
[[34m  Info  [0m]                              val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                              (â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$4113, n$2104, right$4113
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$4113, n$2104, right$4113), Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, Node(left$4113, n$2104, right$4113)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$4113, n$2104, right$4113)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$4113, n$2104, right$4113), Z) && è°¶Leaf && è°¶Z && è°¶Node(left$4113, n$2104, right$4113)) && true
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$4113, n$2104, right$4113))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$4113, n$2104, right$4113))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4114: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$2105: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$4114: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Node(left$4114, n$2105, right$4114) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4115: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$2106: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$4115: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Node(left$4115, n$2106, right$4115) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$294
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(Leaf, S(nat$294), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$294), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶S(nat$294)) && true
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$294), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$294), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$299, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$299), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$299), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶S(nat$299)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$299), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$299), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$305, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$305), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$305), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶S(nat$305)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$305), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$305), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$4119, n$2110, right$4522
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$4119, n$2110, right$4522), Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, Node(left$4119, n$2110, right$4522)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$4119, n$2110, right$4522)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$4119, n$2110, right$4522), Z) && è°¶Z && è°¶Leaf && è°¶Node(left$4119, n$2110, right$4522)) && true
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$4119, n$2110, right$4522))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$4119, n$2110, right$4522))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4120: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$2111: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$4523: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Node(left$4120, n$2111, right$4523) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4121: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$2112: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$4524: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Node(left$4121, n$2112, right$4524) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$4125, n$2116, right$4931
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$4125, n$2116, right$4931), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Node(left$4125, n$2116, right$4931), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$4125, n$2116, right$4931), Z, Leaf) && â†“tree_binsert(Node(left$4125, n$2116, right$4931), Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Node(left$4125, n$2116, right$4931)) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$4125, n$2116, right$4931), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$4125, n$2116, right$4931), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4126: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$2117: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$4932: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Node(left$4126, n$2117, right$4932) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4127: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$2118: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$4933: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Node(left$4127, n$2118, right$4933) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$4535, n$2123, right$4938, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$4535, n$2123, right$4938), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$4535, n$2123, right$4938), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$4535, n$2123, right$4938), Z, right$22) && â†“tree_binsert(Node(left$4535, n$2123, right$4938), Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Node(left$4535, n$2123, right$4938)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$4535, n$2123, right$4938), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$4535, n$2123, right$4938), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$4536, n$2124, right$4939, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$4536, n$2124, right$4939), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Node(left$4536, n$2124, right$4939)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$4536, n$2124, right$4939)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$4536, n$2124, right$4939), Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Node(left$4536, n$2124, right$4939)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$4536, n$2124, right$4939))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$4536, n$2124, right$4939))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$4537: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$2125: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$4940: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Node(left$4537, n$2125, right$4940) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$6950, n$2130, right$5354, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$6950, n$2130, right$5354), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$6950, n$2130, right$5354), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$6950, n$2130, right$5354), Z, right$22) && â†“tree_binsert(Node(left$6950, n$2130, right$5354), Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$6950, n$2130, right$5354)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$6950, n$2130, right$5354), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$6950, n$2130, right$5354), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$6951, n$2131, right$5355, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$6951, n$2131, right$5355), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Node(left$6951, n$2131, right$5355)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$6951, n$2131, right$5355)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$6951, n$2131, right$5355), Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$6951, n$2131, right$5355)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$6951, n$2131, right$5355))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$6951, n$2131, right$5355))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$6952: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$2132: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$5356: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$6952, n$2132, right$5356) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$310
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(Leaf, S(nat$310), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$310), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶S(nat$310)) && true
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$310), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$310), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$7365, n$2136, right$7768
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$7365, n$2136, right$7768), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (â†“tree_binsert(Node(Node(left$7365, n$2136, right$7768), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$7365, n$2136, right$7768), Z, Leaf) && â†“tree_binsert(Node(left$7365, n$2136, right$7768), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Node(left$7365, n$2136, right$7768)) && true
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$7365, n$2136, right$7768), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$7365, n$2136, right$7768), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$7366: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$2137: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$7769: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Node(left$7366, n$2137, right$7769) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z) && true
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$7367: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$2138: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$7770: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Node(left$7367, n$2138, right$7770) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$315, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$315), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$315), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶S(nat$315)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$315), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$315), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$321, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$321), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$321), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶S(nat$321)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$321), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$321), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$327, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$327), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$327), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶S(nat$327)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$327), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$327), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$7775, n$2143, right$7775, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$7775, n$2143, right$7775), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$7775, n$2143, right$7775), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$7775, n$2143, right$7775), Z, right$22) && â†“tree_binsert(Node(left$7775, n$2143, right$7775), Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Node(left$7775, n$2143, right$7775)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$7775, n$2143, right$7775), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$7775, n$2143, right$7775), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$7776, n$2144, right$7776, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$7776, n$2144, right$7776), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Node(left$7776, n$2144, right$7776)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$7776, n$2144, right$7776)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$7776, n$2144, right$7776), Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Node(left$7776, n$2144, right$7776)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$7776, n$2144, right$7776))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$7776, n$2144, right$7776))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$7777: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$2145: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$7777: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Node(left$7777, n$2145, right$7777) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$333, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$333), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$333), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶S(nat$333)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$333), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$333), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$340, left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$340), right$22), Z) && è°¶Z && è°¶Node(left$22, S(nat$340), right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶S(nat$340)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$340), right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$340), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$346, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$346), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$346), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶S(nat$346)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$346), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$346), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$10190, n$2150, right$8191, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$10190, n$2150, right$8191), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$10190, n$2150, right$8191), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$10190, n$2150, right$8191), Z, right$22) && â†“tree_binsert(Node(left$10190, n$2150, right$8191), Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$10190, n$2150, right$8191)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$10190, n$2150, right$8191), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$10190, n$2150, right$8191), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$10191, n$2151, right$8192, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$10191, n$2151, right$8192), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Node(left$10191, n$2151, right$8192)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$10191, n$2151, right$8192)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$10191, n$2151, right$8192), Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$10191, n$2151, right$8192)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$10191, n$2151, right$8192))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$10191, n$2151, right$8192))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$10192: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$2152: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$8193: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$10192, n$2152, right$8193) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$352, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$352), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$352), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶S(nat$352)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$352), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$352), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$359, left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$359), right$22), Z) && è°¶Z && è°¶Node(left$22, S(nat$359), right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶S(nat$359)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$359), right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$359), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'nat$9'] âŸ¦ Î± nat$9
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                            (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'nat$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'nat$9'] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(Z))
[[34m  Info  [0m]                              val rec$48: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(Z))) && è°¶Leaf && è°¶S(S(Z)) && â†“tree_binsert(Leaf, S(Z)) && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$11) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(Z)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'nat$9'] - âŸ¦ Î± nat$364
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(S(nat$364)))
[[34m  Info  [0m]                              val rec$48: NatTree = tree_binsert(Leaf, S(nat$364))
[[34m  Info  [0m]                              (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(S(nat$364)))) && è°¶Leaf && è°¶S(S(S(nat$364))) && â†“tree_binsert(Leaf, S(S(nat$364))) && è°¶S(S(nat$364)) && â†“tree_binsert(Leaf, S(nat$364)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$364)) && true)
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(S(nat$364))))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(Z))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(Z))) && è°¶Leaf && è°¶S(S(Z)) && â†“tree_binsert(Leaf, S(Z)) && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$11) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(Z)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, S(S(Z)), Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'nat$9'] âŸ¦ Î± nat$9
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                            (rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48)) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'nat$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'nat$9'] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(Z))
[[34m  Info  [0m]                              val rec$48: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(Z))) && è°¶Leaf && è°¶S(S(Z)) && â†“tree_binsert(Leaf, S(Z)) && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$48) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(Z)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'nat$9'] - âŸ¦ Î± nat$535
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(S(nat$535)))
[[34m  Info  [0m]                              val rec$48: NatTree = tree_binsert(Leaf, S(nat$535))
[[34m  Info  [0m]                              (rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(S(nat$535)))) && è°¶Leaf && è°¶S(S(S(nat$535))) && â†“tree_binsert(Leaf, S(S(nat$535))) && è°¶S(S(nat$535)) && â†“tree_binsert(Leaf, S(nat$535)) && è°¶Leaf && inactive(rec$48) && è°¶S(nat$535)) && true)
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(S(nat$535))))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(Z))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(Z))) && è°¶Leaf && è°¶S(S(Z)) && â†“tree_binsert(Leaf, S(Z)) && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$48) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(Z)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, S(S(Z)), Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'nat$50'] âŸ¦ Î± nat$50
[[34m  Info  [0m]                           Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                             (rec$11 == Leaf) && {
[[34m  Info  [0m]                               val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                               (â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50)) && true
[[34m  Info  [0m]                             }
[[34m  Info  [0m]                           Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'nat$50'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'nat$50'] - âŸ¦ Î± ()
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(Z))
[[34m  Info  [0m]                               (rec$11 == Leaf) && {
[[34m  Info  [0m]                                 val rec$141: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (â†“tree_binsert(Leaf, S(S(Z))) && è°¶Leaf && è°¶S(S(Z)) && â†“tree_binsert(Leaf, S(Z)) && è°¶Leaf && inactive(rec$11) && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Z) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(Z)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'nat$50'] - âŸ¦ Î± nat$694
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(S(nat$694)))
[[34m  Info  [0m]                               (rec$11 == Leaf) && {
[[34m  Info  [0m]                                 val rec$141: NatTree = tree_binsert(Leaf, S(nat$694))
[[34m  Info  [0m]                                 (â†“tree_binsert(Leaf, S(S(S(nat$694)))) && è°¶Leaf && è°¶S(S(S(nat$694))) && â†“tree_binsert(Leaf, S(S(nat$694))) && è°¶Leaf && inactive(rec$11) && è°¶S(S(nat$694)) && â†“tree_binsert(Leaf, S(nat$694)) && è°¶S(nat$694)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(S(nat$694))))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(Z))
[[34m  Info  [0m]                            (rec$11 == Leaf) && {
[[34m  Info  [0m]                              val rec$141: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (â†“tree_binsert(Leaf, S(S(Z))) && è°¶Leaf && è°¶S(S(Z)) && â†“tree_binsert(Leaf, S(Z)) && è°¶Leaf && inactive(rec$11) && è°¶S(Z) && â†“tree_binsert(Leaf, Z) && è°¶Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(Z)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, S(S(Z)), Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$10609: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$2160: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$10609: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Node(left$10609, n$2160, right$10609) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$10610: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$2161: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$10610: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Node(left$10610, n$2161, right$10610) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$10616, n$2570, right$10616, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$10616, n$2570, right$10616), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Node(left$10616, n$2570, right$10616)), Z) && è°¶Z && è°¶Node(Leaf, n$12, Node(left$10616, n$2570, right$10616)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$10616, n$2570, right$10616), Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Node(left$10616, n$2570, right$10616)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Node(left$10616, n$2570, right$10616))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Node(left$10616, n$2570, right$10616))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$10617: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$2571: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$10617: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Node(left$10617, n$2571, right$10617) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$10623, n$2986, right$11032, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$10623, n$2986, right$11032), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Node(left$10623, n$2986, right$11032)), Z) && è°¶Z && è°¶Node(Leaf, n$12, Node(left$10623, n$2986, right$11032)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$10623, n$2986, right$11032), Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Node(left$10623, n$2986, right$11032)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Node(left$10623, n$2986, right$11032))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Node(left$10623, n$2986, right$11032))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$10624: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$2987: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$11033: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Node(left$10624, n$2987, right$11033) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$10629: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$3401: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$13446: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Node(left$10629, n$3401, right$13446) && inactive(rec$12)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf) && true
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$10630: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$3402: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$13447: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Node(left$10630, n$3402, right$13447) && inactive(rec$13)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$10636, n$3811, right$13453, n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$10636, n$3811, right$13453), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$10636, n$3811, right$13453), n$12, Leaf), Z) && è°¶Z && è°¶Node(Node(left$10636, n$3811, right$13453), n$12, Leaf) && â†“tree_binsert(Node(left$10636, n$3811, right$13453), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Node(left$10636, n$3811, right$13453)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$10636, n$3811, right$13453), n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$10636, n$3811, right$13453), n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$10637: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$3812: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$13454: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Node(left$10637, n$3812, right$13454) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$13051, n$4227, right$13460, n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$13051, n$4227, right$13460), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$13051, n$4227, right$13460), n$12, Leaf), Z) && è°¶Z && è°¶Node(Node(left$13051, n$4227, right$13460), n$12, Leaf) && â†“tree_binsert(Node(left$13051, n$4227, right$13460), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Node(left$13051, n$4227, right$13460)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$13051, n$4227, right$13460), n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$13051, n$4227, right$13460), n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$13052: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$4228: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$13461: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Node(left$13052, n$4228, right$13461) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$13467, n$4643, right$13467, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$13467, n$4643, right$13467), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Node(left$13467, n$4643, right$13467)), Z) && è°¶Z && è°¶Node(Leaf, n$12, Node(left$13467, n$4643, right$13467)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$13467, n$4643, right$13467), Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Node(left$13467, n$4643, right$13467)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Node(left$13467, n$4643, right$13467))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Node(left$13467, n$4643, right$13467))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$13468: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$4644: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$13468: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Node(left$13468, n$4644, right$13468) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$13474, n$5059, right$13883, n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$13474, n$5059, right$13883), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$13474, n$5059, right$13883), n$12, Leaf), Z) && è°¶Z && è°¶Node(Node(left$13474, n$5059, right$13883), n$12, Leaf) && â†“tree_binsert(Node(left$13474, n$5059, right$13883), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Node(left$13474, n$5059, right$13883)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$13474, n$5059, right$13883), n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$13474, n$5059, right$13883), n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$13475: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$5060: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$13884: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Node(left$13475, n$5060, right$13884) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$15890, n$5476, right$13891, n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$15890, n$5476, right$13891), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$15890, n$5476, right$13891), n$12, right$22), Z) && è°¶Z && è°¶Node(Node(left$15890, n$5476, right$13891), n$12, right$22) && â†“tree_binsert(Node(left$15890, n$5476, right$13891), Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Node(left$15890, n$5476, right$13891)) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$15890, n$5476, right$13891), n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$15890, n$5476, right$13891), n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$15891, n$5477, right$13892, left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$15891, n$5477, right$13892), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Node(left$15891, n$5477, right$13892)), Z) && è°¶Z && è°¶Node(left$22, n$12, Node(left$15891, n$5477, right$13892)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$15891, n$5477, right$13892), Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Node(left$15891, n$5477, right$13892)) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Node(left$15891, n$5477, right$13892))) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Node(left$15891, n$5477, right$13892))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$18318, n$5898, right$16319, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$18318, n$5898, right$16319), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Node(left$18318, n$5898, right$16319)), Z) && è°¶Z && è°¶Node(Leaf, n$12, Node(left$18318, n$5898, right$16319)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$18318, n$5898, right$16319), Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Node(left$18318, n$5898, right$16319)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, n$12, Node(left$18318, n$5898, right$16319))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Node(left$18318, n$5898, right$16319))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$18319: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$5899: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$16320: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Node(left$18319, n$5899, right$16320) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$18325, n$6314, right$18734, n$12
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$18325, n$6314, right$18734), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$18325, n$6314, right$18734), n$12, Leaf), Z) && è°¶Z && è°¶Node(Node(left$18325, n$6314, right$18734), n$12, Leaf) && â†“tree_binsert(Node(left$18325, n$6314, right$18734), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Node(left$18325, n$6314, right$18734)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$18325, n$6314, right$18734), n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$18325, n$6314, right$18734), n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$18326: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$6315: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$18735: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Node(left$18326, n$6315, right$18735) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$18742, n$6731, right$18742, n$12, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$18742, n$6731, right$18742), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$18742, n$6731, right$18742), n$12, right$22), Z) && è°¶Z && è°¶Node(Node(left$18742, n$6731, right$18742), n$12, right$22) && â†“tree_binsert(Node(left$18742, n$6731, right$18742), Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Node(left$18742, n$6731, right$18742)) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$18742, n$6731, right$18742), n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$18742, n$6731, right$18742), n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /7,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, n$12, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, right$22), Z) && è°¶Z && è°¶Node(left$22, n$12, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /12,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$18743, n$6732, right$18743, left$22, n$12
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$18743, n$6732, right$18743), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Node(left$18743, n$6732, right$18743)), Z) && è°¶Z && è°¶Node(left$22, n$12, Node(left$18743, n$6732, right$18743)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$18743, n$6732, right$18743), Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Node(left$18743, n$6732, right$18743)) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, n$12, Node(left$18743, n$6732, right$18743))) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Node(left$18743, n$6732, right$18743))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$222)] âŸ¦ Î± nat$222
[[34m  Info  [0m]                                                     Î  val rec$11: NatTree = tree_binsert(Leaf, S(S(nat$222)))
[[34m  Info  [0m]                                                       val rec$48: NatTree = tree_binsert(Leaf, S(nat$222))
[[34m  Info  [0m]                                                       (â†“tree_binsert(Leaf, S(S(S(nat$222)))) && è°¶Leaf && è°¶S(S(S(nat$222))) && â†“tree_binsert(Leaf, S(S(nat$222))) && è°¶S(S(nat$222)) && â†“tree_binsert(Leaf, S(nat$222)) && è°¶S(nat$222)) && true
[[34m  Info  [0m]                                                     Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(S(nat$222))))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                     x out
[[34m  Info  [0m]                                                   âŸ§ /1,0/
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$222)] Decomposed into:
[[34m  Info  [0m] [Introduce calls tree_binsert$0(Leaf$0, nat$222)] - âŸ¦ Î± nat$222
[[34m  Info  [0m]                                                       Î  val rec$11: NatTree = tree_binsert(Leaf, S(S(nat$222)))
[[34m  Info  [0m]                                                         val rec$48: NatTree = tree_binsert(Leaf, S(nat$222))
[[34m  Info  [0m]                                                         val rec$843: NatTree = tree_binsert(Leaf, nat$222)
[[34m  Info  [0m]                                                         (â†“tree_binsert(Leaf, S(S(S(nat$222)))) && è°¶Leaf && è°¶S(S(S(nat$222))) && â†“tree_binsert(Leaf, S(S(nat$222))) && è°¶S(S(nat$222)) && â†“tree_binsert(Leaf, S(nat$222)) && è°¶S(nat$222) && â†“tree_binsert(Leaf, nat$222)) && true
[[34m  Info  [0m]                                                       Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(S(nat$222))))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                                       x out
[[34m  Info  [0m]                                                     âŸ§ /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$222
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, S(S(nat$222)))
[[34m  Info  [0m]                                  val rec$48: NatTree = tree_binsert(Leaf, S(nat$222))
[[34m  Info  [0m]                                  val rec$843: NatTree = tree_binsert(Leaf, nat$222)
[[34m  Info  [0m]                                  (â†“tree_binsert(Leaf, S(S(S(nat$222)))) && è°¶Leaf && è°¶S(S(S(nat$222))) && â†“tree_binsert(Leaf, S(S(nat$222))) && è°¶S(S(nat$222)) && â†“tree_binsert(Leaf, S(nat$222)) && è°¶S(nat$222) && â†“tree_binsert(Leaf, nat$222)) && true
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(S(nat$222))))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$222
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(S(nat$222)))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, S(nat$222))
[[34m  Info  [0m]                            val rec$843: NatTree = tree_binsert(Leaf, nat$222)
[[34m  Info  [0m]                            (â†“tree_binsert(Leaf, S(S(S(nat$222)))) && è°¶Leaf && è°¶S(S(S(nat$222))) && â†“tree_binsert(Leaf, S(S(nat$222))) && è°¶S(S(nat$222)) && â†“tree_binsert(Leaf, S(nat$222)) && è°¶S(nat$222) && â†“tree_binsert(Leaf, nat$222)) && true
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(S(nat$222))))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$294
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(Leaf, S(nat$294), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$294), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶S(nat$294)) && true
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, S(nat$294), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$294), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$294
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, S(nat$294), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$294), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶S(nat$294)) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, S(nat$294), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$294), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$310
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (â†“tree_binsert(Node(Leaf, S(nat$310), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$310), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶S(nat$310)) && true
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, S(nat$310), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$310), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$310
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (â†“tree_binsert(Node(Leaf, S(nat$310), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$310), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶S(nat$310)) && true
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, S(nat$310), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$310), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$48'] âŸ¦ Î± nat$9
[[34m  Info  [0m]                           Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                             val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                             (rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11)) && true)
[[34m  Info  [0m]                           Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$48'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$48'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                               val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                               (rec$11 == Leaf) && ((rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11) && è°¶Leaf && inactive(rec$48)) && true))
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$48'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                               val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                               (rec$11 == Leaf) && (rec$48.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21169: NatTree = rec$48.left
[[34m  Info  [0m]                                 val n$7152: Nat = rec$48.n
[[34m  Info  [0m]                                 val right$21169: NatTree = rec$48.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11) && è°¶Node(left$21169, n$7152, right$21169) && inactive(rec$48)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$9
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                                  val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                                  (rec$11 == Leaf) && ((rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11) && è°¶Leaf && inactive(rec$48)) && true))
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$9
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                            (rec$11 == Leaf) && ((rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$11) && è°¶Leaf && inactive(rec$48)) && true))
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$11'] âŸ¦ Î± nat$9
[[34m  Info  [0m]                           Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                             val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                             (rec$48 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48)) && true)
[[34m  Info  [0m]                           Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$11'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$11'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                               val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                               (rec$48 == Leaf) && ((rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48) && è°¶Leaf && inactive(rec$11)) && true))
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$11'] - âŸ¦ Î± nat$9
[[34m  Info  [0m]                             Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                               val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                               (rec$48 == Leaf) && (rec$11.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21174: NatTree = rec$11.left
[[34m  Info  [0m]                                 val n$7157: Nat = rec$11.n
[[34m  Info  [0m]                                 val right$21174: NatTree = rec$11.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48) && è°¶Node(left$21174, n$7157, right$21174) && inactive(rec$11)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$9
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                                  val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                                  (rec$48 == Leaf) && ((rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48) && è°¶Leaf && inactive(rec$11)) && true))
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$9
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$9))
[[34m  Info  [0m]                            val rec$48: NatTree = tree_binsert(Leaf, nat$9)
[[34m  Info  [0m]                            (rec$48 == Leaf) && ((rec$11 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$9))) && è°¶Leaf && è°¶S(S(nat$9)) && â†“tree_binsert(Leaf, S(nat$9)) && è°¶S(nat$9) && â†“tree_binsert(Leaf, nat$9) && è°¶Leaf && inactive(rec$48) && è°¶Leaf && inactive(rec$11)) && true))
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$9)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$141'] âŸ¦ Î± nat$50
[[34m  Info  [0m]                            Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                              (rec$11 == Leaf) && {
[[34m  Info  [0m]                                val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                                (â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$141'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$141'] - âŸ¦ Î± nat$50
[[34m  Info  [0m]                              Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                                (rec$11 == Leaf) && {
[[34m  Info  [0m]                                  val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                                  (rec$141 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50) && è°¶Leaf && inactive(rec$141)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'rec$141'] - âŸ¦ Î± nat$50
[[34m  Info  [0m]                              Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                                (rec$11 == Leaf) && {
[[34m  Info  [0m]                                  val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                                  rec$141.isInstanceOf[Node] && {
[[34m  Info  [0m]                                    val left$21179: NatTree = rec$141.left
[[34m  Info  [0m]                                    val n$7162: Nat = rec$141.n
[[34m  Info  [0m]                                    val right$21179: NatTree = rec$141.right
[[34m  Info  [0m]                                    (â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50) && è°¶Node(left$21179, n$7162, right$21179) && inactive(rec$141)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$50
[[34m  Info  [0m]                                Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                                  (rec$11 == Leaf) && {
[[34m  Info  [0m]                                    val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                                    (rec$141 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50) && è°¶Leaf && inactive(rec$141)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± nat$50
[[34m  Info  [0m]                          Î  val rec$11: NatTree = tree_binsert(Leaf, S(nat$50))
[[34m  Info  [0m]                            (rec$11 == Leaf) && {
[[34m  Info  [0m]                              val rec$141: NatTree = tree_binsert(Leaf, nat$50)
[[34m  Info  [0m]                              (rec$141 == Leaf) && ((â†“tree_binsert(Leaf, S(S(nat$50))) && è°¶Leaf && è°¶S(S(nat$50)) && â†“tree_binsert(Leaf, S(nat$50)) && è°¶Leaf && inactive(rec$11) && è°¶S(nat$50) && â†“tree_binsert(Leaf, nat$50) && è°¶Leaf && inactive(rec$141)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          Ï† in_order(Leaf) == T ==> in_order(out) == T && (tree_content(Leaf) ++ Set[Nat](S(S(nat$50)))).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /2,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$21188, n$7171, right$21188
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$21188, n$7171, right$21188), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$21188, n$7171, right$21188)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$21188, n$7171, right$21188)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$21188, n$7171, right$21188), Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Node(left$21188, n$7171, right$21188)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$21188, n$7171, right$21188))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$21188, n$7171, right$21188))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21189: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7172: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$21189: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Node(left$21189, n$7172, right$21189) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$21195, n$7178, right$21604
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$21195, n$7178, right$21604), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$21195, n$7178, right$21604)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$21195, n$7178, right$21604)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$21195, n$7178, right$21604), Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$21195, n$7178, right$21604)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$21195, n$7178, right$21604))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$21195, n$7178, right$21604))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21196: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7179: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$21605: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$21196, n$7179, right$21605) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1056
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1056), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1056), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶S(nat$1056)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1056), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1056), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1063
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1063), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1063), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶S(nat$1063)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1063), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1063), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$21205, n$7188, right$24022
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$21205, n$7188, right$24022), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$21205, n$7188, right$24022)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$21205, n$7188, right$24022)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$21205, n$7188, right$24022), Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Node(left$21205, n$7188, right$24022)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$21205, n$7188, right$24022))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$21205, n$7188, right$24022))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21206: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7189: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$24023: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Node(left$21206, n$7189, right$24023) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1070
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1070), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1070), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶S(nat$1070)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1070), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1070), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1078, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1078), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1078), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶S(nat$1078)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1078), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1078), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$21212, n$7195, right$24438
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$21212, n$7195, right$24438), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$21212, n$7195, right$24438)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$21212, n$7195, right$24438)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$21212, n$7195, right$24438), Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$21212, n$7195, right$24438)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$21212, n$7195, right$24438))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$21212, n$7195, right$24438))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21213: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7196: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$24439: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$21213, n$7196, right$24439) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1085
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1085), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1085), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶S(nat$1085)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1085), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1085), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1093, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1093), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1093), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶S(nat$1093)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1093), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1093), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$21222, n$7205, right$26856
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$21222, n$7205, right$26856), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$21222, n$7205, right$26856)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$21222, n$7205, right$26856)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$21222, n$7205, right$26856), Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Node(left$21222, n$7205, right$26856)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$21222, n$7205, right$26856))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$21222, n$7205, right$26856))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21223: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7206: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$26857: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Node(left$21223, n$7206, right$26857) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$21229, n$7212, right$27272
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$21229, n$7212, right$27272), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$21229, n$7212, right$27272)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$21229, n$7212, right$27272)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$21229, n$7212, right$27272), Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Node(left$21229, n$7212, right$27272)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$21229, n$7212, right$27272))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$21229, n$7212, right$27272))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21230: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7213: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$27273: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Node(left$21230, n$7213, right$27273) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$21239, n$7222, right$29690
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$21239, n$7222, right$29690), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$21239, n$7222, right$29690), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$21239, n$7222, right$29690), Z, Leaf) && â†“tree_binsert(Node(left$21239, n$7222, right$29690), Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Node(left$21239, n$7222, right$29690)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$21239, n$7222, right$29690), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$21239, n$7222, right$29690), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$21240: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7223: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$29691: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Node(left$21240, n$7223, right$29691) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$23654, n$7229, right$29697
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$23654, n$7229, right$29697), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$23654, n$7229, right$29697), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$23654, n$7229, right$29697), Z, Leaf) && â†“tree_binsert(Node(left$23654, n$7229, right$29697), Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Node(left$23654, n$7229, right$29697)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$23654, n$7229, right$29697), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$23654, n$7229, right$29697), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$23655: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7230: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$29698: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Node(left$23655, n$7230, right$29698) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$24070, n$7236, right$29704
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$24070, n$7236, right$29704), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$24070, n$7236, right$29704)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$24070, n$7236, right$29704)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$24070, n$7236, right$29704), Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Node(left$24070, n$7236, right$29704)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$24070, n$7236, right$29704))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$24070, n$7236, right$29704))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$24071: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7237: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$29705: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Node(left$24071, n$7237, right$29705) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$24077, n$7243, right$30120
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$24077, n$7243, right$30120), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$24077, n$7243, right$30120), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$24077, n$7243, right$30120), Z, Leaf) && â†“tree_binsert(Node(left$24077, n$7243, right$30120), Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Node(left$24077, n$7243, right$30120)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$24077, n$7243, right$30120), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$24077, n$7243, right$30120), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$24078: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7244: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$30121: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Node(left$24078, n$7244, right$30121) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$26493, n$7251, right$30128, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$26493, n$7251, right$30128), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$26493, n$7251, right$30128), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$26493, n$7251, right$30128), Z, right$22) && â†“tree_binsert(Node(left$26493, n$7251, right$30128), Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Node(left$26493, n$7251, right$30128)) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$26493, n$7251, right$30128), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$26493, n$7251, right$30128), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$26494, n$7252, right$30129, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$26494, n$7252, right$30129), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Node(left$26494, n$7252, right$30129)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$26494, n$7252, right$30129)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$26494, n$7252, right$30129), Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Node(left$26494, n$7252, right$30129)) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$26494, n$7252, right$30129))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$26494, n$7252, right$30129))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$28921, n$7258, right$32556
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$28921, n$7258, right$32556), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$28921, n$7258, right$32556)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$28921, n$7258, right$32556)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$28921, n$7258, right$32556), Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Node(left$28921, n$7258, right$32556)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$28921, n$7258, right$32556))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$28921, n$7258, right$32556))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$28922: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7259: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$32557: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Node(left$28922, n$7259, right$32557) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$28928, n$7265, right$34971
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$28928, n$7265, right$34971), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$28928, n$7265, right$34971), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$28928, n$7265, right$34971), Z, Leaf) && â†“tree_binsert(Node(left$28928, n$7265, right$34971), Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Node(left$28928, n$7265, right$34971)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$28928, n$7265, right$34971), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$28928, n$7265, right$34971), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$28929: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7266: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$34972: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Node(left$28929, n$7266, right$34972) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$29345, n$7273, right$34979, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$29345, n$7273, right$34979), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$29345, n$7273, right$34979), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$29345, n$7273, right$34979), Z, right$22) && â†“tree_binsert(Node(left$29345, n$7273, right$34979), Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Node(left$29345, n$7273, right$34979)) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$29345, n$7273, right$34979), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$29345, n$7273, right$34979), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$29346, n$7274, right$34980, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$29346, n$7274, right$34980), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Node(left$29346, n$7274, right$34980)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$29346, n$7274, right$34980)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$29346, n$7274, right$34980), Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Node(left$29346, n$7274, right$34980)) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$29346, n$7274, right$34980))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$29346, n$7274, right$34980))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1100
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1100), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1100), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶S(nat$1100)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1100), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1100), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1107
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1107), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1107), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶S(nat$1107)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1107), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1107), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$31779, n$7286, right$37413
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$31779, n$7286, right$37413), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$31779, n$7286, right$37413), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$31779, n$7286, right$37413), Z, Leaf) && â†“tree_binsert(Node(left$31779, n$7286, right$37413), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Node(left$31779, n$7286, right$37413)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$31779, n$7286, right$37413), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$31779, n$7286, right$37413), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$31780: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7287: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$37414: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Node(left$31780, n$7287, right$37414) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$34194, n$7293, right$37420
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$34194, n$7293, right$37420), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$34194, n$7293, right$37420), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$34194, n$7293, right$37420), Z, Leaf) && â†“tree_binsert(Node(left$34194, n$7293, right$37420), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$34194, n$7293, right$37420)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$34194, n$7293, right$37420), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$34194, n$7293, right$37420), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$34195: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7294: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$37421: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$34195, n$7294, right$37421) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1114
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1114), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1114), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶S(nat$1114)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1114), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1114), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$34610, n$7300, right$37427
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$34610, n$7300, right$37427), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$34610, n$7300, right$37427), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$34610, n$7300, right$37427), Z, Leaf) && â†“tree_binsert(Node(left$34610, n$7300, right$37427), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Node(left$34610, n$7300, right$37427)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$34610, n$7300, right$37427), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$34610, n$7300, right$37427), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$34611: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7301: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$37428: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Node(left$34611, n$7301, right$37428) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1122, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$1122), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$1122), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶S(nat$1122)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$1122), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$1122), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1129
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1129), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1129), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶S(nat$1129)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1129), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1129), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$37025, n$7307, right$37434
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$37025, n$7307, right$37434), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$37025, n$7307, right$37434), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$37025, n$7307, right$37434), Z, Leaf) && â†“tree_binsert(Node(left$37025, n$7307, right$37434), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$37025, n$7307, right$37434)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$37025, n$7307, right$37434), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$37025, n$7307, right$37434), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$37026: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7308: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$37435: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$37026, n$7308, right$37435) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1137, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$1137), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$1137), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶S(nat$1137)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$1137), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$1137), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$37441, n$7314, right$37441
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$37441, n$7314, right$37441), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$37441, n$7314, right$37441)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$37441, n$7314, right$37441)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$37441, n$7314, right$37441), Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Node(left$37441, n$7314, right$37441)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$37441, n$7314, right$37441))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$37441, n$7314, right$37441))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$37442: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7315: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$37442: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Node(left$37442, n$7315, right$37442) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1144
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1144), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1144), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && è°¶S(nat$1144)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1144), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1144), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1152, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1152), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1152), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶S(nat$1152)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1152), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1152), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$37448, n$7321, right$37857
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$37448, n$7321, right$37857), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$37448, n$7321, right$37857)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$37448, n$7321, right$37857)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$37448, n$7321, right$37857), Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Node(left$37448, n$7321, right$37857)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$37448, n$7321, right$37857))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$37448, n$7321, right$37857))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$37449: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7322: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$37858: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Node(left$37449, n$7322, right$37858) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$37455, n$7328, right$38273
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$37455, n$7328, right$38273), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$37455, n$7328, right$38273), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$37455, n$7328, right$38273), Z, Leaf) && â†“tree_binsert(Node(left$37455, n$7328, right$38273), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Node(left$37455, n$7328, right$38273)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$37455, n$7328, right$38273), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$37455, n$7328, right$38273), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$37456: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7329: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$38274: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Node(left$37456, n$7329, right$38274) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$39871, n$7336, right$38281, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$39871, n$7336, right$38281), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$39871, n$7336, right$38281), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$39871, n$7336, right$38281), Z, right$22) && â†“tree_binsert(Node(left$39871, n$7336, right$38281), Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$39871, n$7336, right$38281)) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$39871, n$7336, right$38281), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$39871, n$7336, right$38281), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$39872, n$7337, right$38282, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$39872, n$7337, right$38282), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Node(left$39872, n$7337, right$38282)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$39872, n$7337, right$38282)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$39872, n$7337, right$38282), Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Node(left$39872, n$7337, right$38282)) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$39872, n$7337, right$38282))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$39872, n$7337, right$38282))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Z && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1159
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1159), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1159), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && è°¶S(nat$1159)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1159), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1159), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$42299, n$7343, right$40709
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$42299, n$7343, right$40709), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((â†“tree_binsert(Node(Node(left$42299, n$7343, right$40709), Z, Leaf), Z) && è°¶Z && è°¶Node(Node(left$42299, n$7343, right$40709), Z, Leaf) && â†“tree_binsert(Node(left$42299, n$7343, right$40709), Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Node(left$42299, n$7343, right$40709)) && true)
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$42299, n$7343, right$40709), Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$42299, n$7343, right$40709), Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$13'] âŸ¦ Î± left$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             (rec$12 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'rec$13'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && (rec$13.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$42300: NatTree = rec$13.left
[[34m  Info  [0m]                                 val n$7344: Nat = rec$13.n
[[34m  Info  [0m]                                 val right$40710: NatTree = rec$13.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Node(left$42300, n$7344, right$40710) && inactive(rec$13)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1167, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$1167), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$1167), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶S(nat$1167)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$1167), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$1167), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1175, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1175), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1175), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶S(nat$1175)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1175), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1175), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'left$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'left$22'] - âŸ¦ Î± left$44715, n$7351, right$40717, right$22
[[34m  Info  [0m]                              Î  val rec$12: NatTree = tree_binsert(Node(left$44715, n$7351, right$40717), Z)
[[34m  Info  [0m]                                val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Node(left$44715, n$7351, right$40717), Z, right$22), Z) && è°¶Z && è°¶Node(Node(left$44715, n$7351, right$40717), Z, right$22) && â†“tree_binsert(Node(left$44715, n$7351, right$40717), Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$44715, n$7351, right$40717)) && true))
[[34m  Info  [0m]                              Ï† in_order(Node(Node(left$44715, n$7351, right$40717), Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Node(left$44715, n$7351, right$40717), Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± left$22, right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, right$22), Z) && è°¶Z && è°¶Node(left$22, Z, right$22) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(left$22, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$44716, n$7352, right$40718, left$22
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$44716, n$7352, right$40718), Z)
[[34m  Info  [0m]                                 (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Node(left$44716, n$7352, right$40718)), Z) && è°¶Z && è°¶Node(left$22, Z, Node(left$44716, n$7352, right$40718)) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Node(left$44716, n$7352, right$40718), Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Node(left$44716, n$7352, right$40718)) && true))
[[34m  Info  [0m]                               Ï† in_order(Node(left$22, Z, Node(left$44716, n$7352, right$40718))) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Node(left$44716, n$7352, right$40718))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± left$22, n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, n$12, Leaf), Z) && è°¶Z && è°¶Node(left$22, n$12, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1183, left$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, S(nat$1183), Leaf), Z) && è°¶Z && è°¶Node(left$22, S(nat$1183), Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶S(nat$1183)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(left$22, S(nat$1183), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, S(nat$1183), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± left$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(left$22, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$12 == Leaf) && ((rec$13 == Leaf) && ((â†“tree_binsert(Node(left$22, Z, Leaf), Z) && è°¶Z && è°¶Node(left$22, Z, Leaf) && â†“tree_binsert(left$22, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$12) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(left$22, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(left$22, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$47143, n$7358, right$43145
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$47143, n$7358, right$43145), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$47143, n$7358, right$43145)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$47143, n$7358, right$43145)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$47143, n$7358, right$43145), Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z && è°¶Node(left$47143, n$7358, right$43145)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$47143, n$7358, right$43145))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$47143, n$7358, right$43145))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$12'] âŸ¦ Î± right$22
[[34m  Info  [0m]                           Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                             val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                             (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$12'] - âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && (rec$12.isInstanceOf[Node] && {
[[34m  Info  [0m]                                 val left$47144: NatTree = rec$12.left
[[34m  Info  [0m]                                 val n$7359: Nat = rec$12.n
[[34m  Info  [0m]                                 val right$43146: NatTree = rec$12.right
[[34m  Info  [0m]                                 (â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z && è°¶Node(left$47144, n$7359, right$43146) && inactive(rec$12)) && true
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Z && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, Leaf), Z) && è°¶Z && è°¶Node(Leaf, n$12, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /3,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1190
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1190), Leaf), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1190), Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && è°¶S(nat$1190)) && true)
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1190), Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1190), Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Node(Leaf, Z, Leaf) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'n$12' ] âŸ¦ Î± n$12, right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, n$12, right$22), Z) && è°¶Z && è°¶Node(Leaf, n$12, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12)) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, n$12, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, n$12, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /7,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'n$12' ] - âŸ¦ Î± nat$1198, right$22
[[34m  Info  [0m]                            Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                              val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                              (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, S(nat$1198), right$22), Z) && è°¶Z && è°¶Node(Leaf, S(nat$1198), right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶S(nat$1198)) && true))
[[34m  Info  [0m]                            Ï† in_order(Node(Leaf, S(nat$1198), right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, S(nat$1198), right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± right$22
[[34m  Info  [0m]                                Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                  val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                                  (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                                Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± right$22
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((rec$12 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Leaf && è°¶Leaf && inactive(rec$12) && è°¶Z) && true))
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'right$22'] âŸ¦ Î± right$22
[[34m  Info  [0m]                             Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                               val rec$13: NatTree = tree_binsert(right$22, Z)
[[34m  Info  [0m]                               (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, right$22), Z) && è°¶Z && è°¶Node(Leaf, Z, right$22) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(right$22, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf) && true)
[[34m  Info  [0m]                             Ï† in_order(Node(Leaf, Z, right$22)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, right$22)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± ()
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'right$22'] - âŸ¦ Î± left$47150, n$7365, right$45560
[[34m  Info  [0m]                               Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                                 val rec$13: NatTree = tree_binsert(Node(left$47150, n$7365, right$45560), Z)
[[34m  Info  [0m]                                 (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Node(left$47150, n$7365, right$45560)), Z) && è°¶Z && è°¶Node(Leaf, Z, Node(left$47150, n$7365, right$45560)) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Node(left$47150, n$7365, right$45560), Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && è°¶Node(left$47150, n$7365, right$45560)) && true)
[[34m  Info  [0m]                               Ï† in_order(Node(Leaf, Z, Node(left$47150, n$7365, right$45560))) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Node(left$47150, n$7365, right$45560))) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             âŸ§ /3,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  val rec$12: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            val rec$13: NatTree = tree_binsert(Leaf, Z)
[[34m  Info  [0m]                            (rec$13 == Leaf) && ((â†“tree_binsert(Node(Leaf, Z, Leaf), Z) && è°¶Z && è°¶Node(Leaf, Z, Leaf) && â†“tree_binsert(Leaf, Z) && â†“tree_binsert(Leaf, Z) && è°¶Leaf && inactive(rec$13) && è°¶Z && è°¶Leaf && è°¶Leaf) && true)
[[34m  Info  [0m]                          Ï† in_order(Node(Leaf, Z, Leaf)) == T ==> in_order(out) == T && (tree_content(Node(Leaf, Z, Leaf)) ++ Set[Nat](Z)).subsetOf(tree_content(out))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/