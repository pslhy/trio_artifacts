[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] ========================= Synthesizing 'tree_preorder' =========================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± t
[[34m  Info  [0m]                                Î  â†“tree_preorder(t) && true
[[34m  Info  [0m]                                Ï† get_tree_afters(t, Nil) == get_afters(out) && tree_content(t) == list_content(out)
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /27,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± t
[[34m  Info  [0m]                          Î  â†“tree_preorder(t) && true
[[34m  Info  [0m]                          Ï† get_tree_afters(t, Nil) == get_afters(out) && tree_content(t) == list_content(out)
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /27,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 't'    ] âŸ¦ Î± t
[[34m  Info  [0m]                          Î  â†“tree_preorder(t) && true
[[34m  Info  [0m]                          Ï† get_tree_afters(t, Nil) == get_afters(out) && tree_content(t) == list_content(out)
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /27,0/
[[34m  Info  [0m] [ADT Split on 't'    ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 't'    ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  (â†“tree_preorder(Leaf) && è°¶Leaf) && true
[[34m  Info  [0m]                            Ï† get_tree_afters(Leaf, Nil) == get_afters(out) && tree_content(Leaf) == list_content(out)
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 't'    ] - âŸ¦ Î± left$19, n$11, right$19
[[34m  Info  [0m]                            Î  (â†“tree_preorder(Node(left$19, n$11, right$19)) && è°¶Node(left$19, n$11, right$19)) && true
[[34m  Info  [0m]                            Ï† get_tree_afters(Node(left$19, n$11, right$19), Nil) == get_afters(out) && tree_content(Node(left$19, n$11, right$19)) == list_content(out)
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /26,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  (â†“tree_preorder(Leaf) && è°¶Leaf) && true
[[34m  Info  [0m]                          Ï† get_tree_afters(Leaf, Nil) == get_afters(out) && tree_content(Leaf) == list_content(out)
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Nil âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls tree_preorder$0(left$19), tree_preorder$0(right$19)] âŸ¦ Î± left$19, n$11, right$19
[[34m  Info  [0m]                                                                         Î  (â†“tree_preorder(Node(left$19, n$11, right$19)) && è°¶Node(left$19, n$11, right$19)) && true
[[34m  Info  [0m]                                                                         Ï† get_tree_afters(Node(left$19, n$11, right$19), Nil) == get_afters(out) && tree_content(Node(left$19, n$11, right$19)) == list_content(out)
[[34m  Info  [0m]                                                                         x out
[[34m  Info  [0m]                                                                       âŸ§ /26,0/
[[34m  Info  [0m] [Introduce calls tree_preorder$0(left$19), tree_preorder$0(right$19)] Decomposed into:
[[34m  Info  [0m] [Introduce calls tree_preorder$0(left$19), tree_preorder$0(right$19)] - âŸ¦ Î± left$19, n$11, right$19
[[34m  Info  [0m]                                                                           Î  val rec$7: NatList = tree_preorder(left$19)
[[34m  Info  [0m]                                                                             val rec$8: NatList = tree_preorder(right$19)
[[34m  Info  [0m]                                                                             (â†“tree_preorder(Node(left$19, n$11, right$19)) && è°¶Node(left$19, n$11, right$19) && â†“tree_preorder(left$19) && â†“tree_preorder(right$19)) && true
[[34m  Info  [0m]                                                                           Ï† get_tree_afters(Node(left$19, n$11, right$19), Nil) == get_afters(out) && tree_content(Node(left$19, n$11, right$19)) == list_content(out)
[[34m  Info  [0m]                                                                           x out
[[34m  Info  [0m]                                                                         âŸ§ /26,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± left$19, n$11, right$19
[[34m  Info  [0m]                                Î  val rec$7: NatList = tree_preorder(left$19)
[[34m  Info  [0m]                                  val rec$8: NatList = tree_preorder(right$19)
[[34m  Info  [0m]                                  (â†“tree_preorder(Node(left$19, n$11, right$19)) && è°¶Node(left$19, n$11, right$19) && â†“tree_preorder(left$19) && â†“tree_preorder(right$19)) && true
[[34m  Info  [0m]                                Ï† get_tree_afters(Node(left$19, n$11, right$19), Nil) == get_afters(out) && tree_content(Node(left$19, n$11, right$19)) == list_content(out)
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /26,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 4 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  âŸ¨ true |  list_append(Cons(n$11, rec$7), rec$8) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] Finished in 17914ms
[[34m  Info  [0m] Solution requires validation
[[34m  Info  [0m]  - Now considering 'postcondition' VC for tree_preorder @25:53...
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Now considering 'precond. (call get_tree_afters(t, Nil))' VC for tree_preorder @63:1...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call get_afters(out))' VC for tree_preorder @63:27...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call tree_content(t))' VC for tree_preorder @63:46...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call list_content(out))' VC for tree_preorder @63:65...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for tree_preorder @?:?...
[[34m  Info  [0m]  => VALID
[[33mWarning [0m] Solution may be invalid:
[[34m  Info  [0m] ================================ tree_preorder ================================
[[34m  Info  [0m] def tree_preorder(t : NatTree): NatList =  {
[[34m  Info  [0m]   t match {
[[34m  Info  [0m]     case Leaf =>
[[34m  Info  [0m]       Nil
[[34m  Info  [0m]     case Node(left, n, right) =>
[[34m  Info  [0m]       list_append(Cons(n, tree_preorder(left)), tree_preorder(right))
[[34m  Info  [0m]   }
[[34m  Info  [0m] } ensuring {
[[34m  Info  [0m]   (out : NatList) => get_tree_afters(t, Nil) == get_afters(out) && tree_content(t) == list_content(out)
[[34m  Info  [0m] }
[[34m  Info  [0m] 