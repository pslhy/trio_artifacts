[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] ==================== Synthesizing 'list_sort_sorted_insert' ====================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± xs
[[34m  Info  [0m]                                Î  â†“list_sort_sorted_insert(xs) && true
[[34m  Info  [0m]                                Ï† list_sorted(out) == T && full_contained_in(xs, out) == T
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /24,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± xs
[[34m  Info  [0m]                          Î  â†“list_sort_sorted_insert(xs) && true
[[34m  Info  [0m]                          Ï† list_sorted(out) == T && full_contained_in(xs, out) == T
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /24,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'xs'   ] âŸ¦ Î± xs
[[34m  Info  [0m]                          Î  â†“list_sort_sorted_insert(xs) && true
[[34m  Info  [0m]                          Ï† list_sorted(out) == T && full_contained_in(xs, out) == T
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /24,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  (â†“list_sort_sorted_insert(Nil) && è°¶Nil) && true
[[34m  Info  [0m]                            Ï† list_sorted(out) == T && full_contained_in(Nil, out) == T
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± head$13, tail$18
[[34m  Info  [0m]                            Î  (â†“list_sort_sorted_insert(Cons(head$13, tail$18)) && è°¶Cons(head$13, tail$18)) && true
[[34m  Info  [0m]                            Ï† list_sorted(out) == T && full_contained_in(Cons(head$13, tail$18), out) == T
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /23,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  (â†“list_sort_sorted_insert(Nil) && è°¶Nil) && true
[[34m  Info  [0m]                          Ï† list_sorted(out) == T && full_contained_in(Nil, out) == T
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Nil âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls list_sort_sorted_insert$0(tail$18)] âŸ¦ Î± head$13, tail$18
[[34m  Info  [0m]                                                        Î  (â†“list_sort_sorted_insert(Cons(head$13, tail$18)) && è°¶Cons(head$13, tail$18)) && true
[[34m  Info  [0m]                                                        Ï† list_sorted(out) == T && full_contained_in(Cons(head$13, tail$18), out) == T
[[34m  Info  [0m]                                                        x out
[[34m  Info  [0m]                                                      âŸ§ /23,0/
[[34m  Info  [0m] [Introduce calls list_sort_sorted_insert$0(tail$18)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_sort_sorted_insert$0(tail$18)] - âŸ¦ Î± head$13, tail$18
[[34m  Info  [0m]                                                          Î  val rec$7: NatList = list_sort_sorted_insert(tail$18)
[[34m  Info  [0m]                                                            (â†“list_sort_sorted_insert(Cons(head$13, tail$18)) && è°¶Cons(head$13, tail$18) && â†“list_sort_sorted_insert(tail$18)) && true
[[34m  Info  [0m]                                                          Ï† list_sorted(out) == T && full_contained_in(Cons(head$13, tail$18), out) == T
[[34m  Info  [0m]                                                          x out
[[34m  Info  [0m]                                                        âŸ§ /23,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± head$13, tail$18
[[34m  Info  [0m]                                Î  val rec$7: NatList = list_sort_sorted_insert(tail$18)
[[34m  Info  [0m]                                  (â†“list_sort_sorted_insert(Cons(head$13, tail$18)) && è°¶Cons(head$13, tail$18) && â†“list_sort_sorted_insert(tail$18)) && true
[[34m  Info  [0m]                                Ï† list_sorted(out) == T && full_contained_in(Cons(head$13, tail$18), out) == T
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /23,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 1 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  âŸ¨ true |  list_insert(rec$7, head$13) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] Finished in 10383ms
[[34m  Info  [0m] Solution requires validation
[[34m  Info  [0m]  - Now considering 'postcondition' VC for list_sort_sorted_insert @50:64...
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Now considering 'precond. (call list_sorted(out))' VC for list_sort_sorted_insert @88:7...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call full_contained_in(xs, out))' VC for list_sort_sorted_insert @88:36...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for list_sort_sorted_insert @?:?...
[[34m  Info  [0m]  => VALID
[[33mWarning [0m] Solution may be invalid:
[[34m  Info  [0m] =========================== list_sort_sorted_insert ===========================
[[34m  Info  [0m] def list_sort_sorted_insert(xs : NatList): NatList =  {
[[34m  Info  [0m]   xs match {
[[34m  Info  [0m]     case Nil =>
[[34m  Info  [0m]       Nil
[[34m  Info  [0m]     case Cons(head, tail) =>
[[34m  Info  [0m]       list_insert(list_sort_sorted_insert(tail), head)
[[34m  Info  [0m]   }
[[34m  Info  [0m] } ensuring {
[[34m  Info  [0m]   (out : NatList) => list_sorted(out) == T && full_contained_in(xs, out) == T
[[34m  Info  [0m] }
[[34m  Info  [0m] 