[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] =========================== Synthesizing 'bool_impl' ===========================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± p, q
[[34m  Info  [0m]                                Î  â†“bool_impl(p, q) && true
[[34m  Info  [0m]                                Ï† if (p == T && q == F) {
[[34m  Info  [0m]                                    out == F
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    out == T
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± p, q
[[34m  Info  [0m]                          Î  â†“bool_impl(p, q) && true
[[34m  Info  [0m]                          Ï† if (p == T && q == F) {
[[34m  Info  [0m]                              out == F
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              out == T
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'p'    ] âŸ¦ Î± p, q
[[34m  Info  [0m]                          Î  â†“bool_impl(p, q) && true
[[34m  Info  [0m]                          Ï† if (p == T && q == F) {
[[34m  Info  [0m]                              out == F
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              out == T
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /4,0/
[[34m  Info  [0m] [ADT Split on 'p'    ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'p'    ] - âŸ¦ Î± q
[[34m  Info  [0m]                            Î  (â†“bool_impl(F, q) && è°¶F) && true
[[34m  Info  [0m]                            Ï† if (F == T && q == F) {
[[34m  Info  [0m]                                out == F
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                out == T
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [ADT Split on 'p'    ] - âŸ¦ Î± q
[[34m  Info  [0m]                            Î  (â†“bool_impl(T, q) && è°¶T) && true
[[34m  Info  [0m]                            Ï† if (T == T && q == F) {
[[34m  Info  [0m]                                out == F
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                out == T
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± q
[[34m  Info  [0m]                                Î  (â†“bool_impl(F, q) && è°¶F) && true
[[34m  Info  [0m]                                Ï† if (F == T && q == F) {
[[34m  Info  [0m]                                    out == F
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    out == T
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  âŸ¨ true |  T âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± q
[[34m  Info  [0m]                                Î  (â†“bool_impl(T, q) && è°¶T) && true
[[34m  Info  [0m]                                Ï† if (T == T && q == F) {
[[34m  Info  [0m]                                    out == F
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    out == T
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /2,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  âŸ¨ true |  q âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] Finished in 4062ms
[[34m  Info  [0m] ================================== bool_impl ==================================
[[34m  Info  [0m] def bool_impl(p : Boolean, q : Boolean): Boolean =  {
[[34m  Info  [0m]   p match {
[[34m  Info  [0m]     case F =>
[[34m  Info  [0m]       T
[[34m  Info  [0m]     case T =>
[[34m  Info  [0m]       q
[[34m  Info  [0m]   }
[[34m  Info  [0m] } ensuring {
[[34m  Info  [0m]   (out : Boolean) => if (p == T && q == F) {
[[34m  Info  [0m]     out == F
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     out == T
[[34m  Info  [0m]   }
[[34m  Info  [0m] }
[[34m  Info  [0m] 