[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] ============================ Synthesizing 'nat_add' ============================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± in1, in2
[[34m  Info  [0m]                                Î  â†“nat_add(in1, in2) && true
[[34m  Info  [0m]                                Ï† nat_to_int(out) >= nat_to_int(in1) && nat_to_int(out) >= nat_to_int(in2) && (in1 == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /21,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± in1, in2
[[34m  Info  [0m]                          Î  â†“nat_add(in1, in2) && true
[[34m  Info  [0m]                          Ï† nat_to_int(out) >= nat_to_int(in1) && nat_to_int(out) >= nat_to_int(in2) && (in1 == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /21,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'in1'  ] âŸ¦ Î± in1, in2
[[34m  Info  [0m]                          Î  â†“nat_add(in1, in2) && true
[[34m  Info  [0m]                          Ï† nat_to_int(out) >= nat_to_int(in1) && nat_to_int(out) >= nat_to_int(in2) && (in1 == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /21,0/
[[34m  Info  [0m] [ADT Split on 'in1'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'in1'  ] - âŸ¦ Î± in2
[[34m  Info  [0m]                            Î  (â†“nat_add(Z, in2) && è°¶Z) && true
[[34m  Info  [0m]                            Ï† nat_to_int(out) >= nat_to_int(Z) && nat_to_int(out) >= nat_to_int(in2) && (Z == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /6,0/
[[34m  Info  [0m] [ADT Split on 'in1'  ] - âŸ¦ Î± nat$2, in2
[[34m  Info  [0m]                            Î  (â†“nat_add(S(nat$2), in2) && è°¶S(nat$2)) && true
[[34m  Info  [0m]                            Ï† nat_to_int(out) >= nat_to_int(S(nat$2)) && nat_to_int(out) >= nat_to_int(in2) && (S(nat$2) == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /15,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± in2
[[34m  Info  [0m]                                Î  (â†“nat_add(Z, in2) && è°¶Z) && true
[[34m  Info  [0m]                                Ï† nat_to_int(out) >= nat_to_int(Z) && nat_to_int(out) >= nat_to_int(in2) && (Z == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /6,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 1 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  âŸ¨ true |  in2 âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'in2'  ] âŸ¦ Î± in1, in2
[[34m  Info  [0m]                          Î  â†“nat_add(in1, in2) && true
[[34m  Info  [0m]                          Ï† nat_to_int(out) >= nat_to_int(in1) && nat_to_int(out) >= nat_to_int(in2) && (in1 == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /21,0/
[[34m  Info  [0m] [ADT Split on 'in2'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'in2'  ] - âŸ¦ Î± in1
[[34m  Info  [0m]                            Î  (â†“nat_add(in1, Z) && è°¶Z) && true
[[34m  Info  [0m]                            Ï† nat_to_int(out) >= nat_to_int(in1) && nat_to_int(out) >= nat_to_int(Z) && (in1 == S(S(Z)) && Z == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /5,0/
[[34m  Info  [0m] [ADT Split on 'in2'  ] - âŸ¦ Î± nat$3, in1
[[34m  Info  [0m]                            Î  (â†“nat_add(in1, S(nat$3)) && è°¶S(nat$3)) && true
[[34m  Info  [0m]                            Ï† nat_to_int(out) >= nat_to_int(in1) && nat_to_int(out) >= nat_to_int(S(nat$3)) && (in1 == S(S(Z)) && S(nat$3) == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /16,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± in1
[[34m  Info  [0m]                                Î  (â†“nat_add(in1, Z) && è°¶Z) && true
[[34m  Info  [0m]                                Ï† nat_to_int(out) >= nat_to_int(in1) && nat_to_int(out) >= nat_to_int(Z) && (in1 == S(S(Z)) && Z == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /5,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 1 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  âŸ¨ true |  in1 âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls nat_add$0(nat$2, in2$0)] âŸ¦ Î± nat$2, in2
[[34m  Info  [0m]                                             Î  (â†“nat_add(S(nat$2), in2) && è°¶S(nat$2)) && true
[[34m  Info  [0m]                                             Ï† nat_to_int(out) >= nat_to_int(S(nat$2)) && nat_to_int(out) >= nat_to_int(in2) && (S(nat$2) == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                                             x out
[[34m  Info  [0m]                                           âŸ§ /15,0/
[[34m  Info  [0m] [Introduce calls nat_add$0(nat$2, in2$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls nat_add$0(nat$2, in2$0)] - âŸ¦ Î± nat$2, in2
[[34m  Info  [0m]                                               Î  val rec$9: Nat = nat_add(nat$2, in2)
[[34m  Info  [0m]                                                 (â†“nat_add(S(nat$2), in2) && è°¶S(nat$2) && â†“nat_add(nat$2, in2)) && true
[[34m  Info  [0m]                                               Ï† nat_to_int(out) >= nat_to_int(S(nat$2)) && nat_to_int(out) >= nat_to_int(in2) && (S(nat$2) == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                                               x out
[[34m  Info  [0m]                                             âŸ§ /15,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± nat$2, in2
[[34m  Info  [0m]                                Î  val rec$9: Nat = nat_add(nat$2, in2)
[[34m  Info  [0m]                                  (â†“nat_add(S(nat$2), in2) && è°¶S(nat$2) && â†“nat_add(nat$2, in2)) && true
[[34m  Info  [0m]                                Ï† nat_to_int(out) >= nat_to_int(S(nat$2)) && nat_to_int(out) >= nat_to_int(in2) && (S(nat$2) == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /15,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 1 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  âŸ¨ true |  S(rec$9) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] Finished in 16227ms
[[34m  Info  [0m] Solution requires validation
[[34m  Info  [0m]  - Now considering 'postcondition' VC for nat_add @11:51...
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Now considering 'precond. (call nat_to_int(out))' VC for nat_add @19:6...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call nat_to_int(in1))' VC for nat_add @19:25...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call nat_to_int(out))' VC for nat_add @19:46...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call nat_to_int(in2))' VC for nat_add @19:65...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for nat_add @?:?...
[[34m  Info  [0m]  => VALID
[[33mWarning [0m] Solution may be invalid:
[[34m  Info  [0m] =================================== nat_add ===================================
[[34m  Info  [0m] def nat_add(in1 : Nat, in2 : Nat): Nat =  {
[[34m  Info  [0m]   in1 match {
[[34m  Info  [0m]     case Z =>
[[34m  Info  [0m]       in2
[[34m  Info  [0m]     case S(nat) =>
[[34m  Info  [0m]       S(nat_add(nat, in2))
[[34m  Info  [0m]   }
[[34m  Info  [0m] } ensuring {
[[34m  Info  [0m]   (out : Nat) => nat_to_int(out) >= nat_to_int(in1) && nat_to_int(out) >= nat_to_int(in2) && (in1 == S(S(Z)) && in2 == S(S(Z))) ==> out == S(S(S(S(Z))))
[[34m  Info  [0m] }
[[34m  Info  [0m] 