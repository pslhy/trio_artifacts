synthesizer :burst
prog : testcases/ref/bool_always_false.mls
fix (f : bool -> bool) = fun (x:bool) -> False
Size: 4
Iter: 0

Time(s): 0.02 
Mem(Kb): 14240


synthesizer :burst
prog : testcases/ref/bool_always_true.mls
fix (f : bool -> bool) = fun (x:bool) -> True
Size: 4
Iter: 1

Time(s): 0.01 
Mem(Kb): 14568


synthesizer :burst
prog : testcases/ref/bool_band.mls
fix (f : bool * bool -> bool) =
  fun (x:bool * bool) -> match x . 1 with
                           | False _ -> x . 1
                           | True _ -> x . 0
Size: 14
Iter: 3

Time(s): 0.02 
Mem(Kb): 16396


synthesizer :burst
prog : testcases/ref/bool_bor.mls
fix (f : bool * bool -> bool) =
  fun (x:bool * bool) -> match x . 0 with
                           | False _ -> x . 1
                           | True _ -> x . 0
Size: 14
Iter: 4

Time(s): 0.03 
Mem(Kb): 16400


synthesizer :burst
prog : testcases/ref/bool_impl.mls
fix (f : bool * bool -> bool) =
  fun (x:bool * bool) -> match x . 0 with
                           | False _ -> True
                           | True _ -> x . 1
Size: 13
Iter: 3

Time(s): 0.02 
Mem(Kb): 16368


synthesizer :burst
prog : testcases/ref/bool_neg.mls
fix (f : bool -> bool) =
  fun (x:bool) -> match x with
                    | False _ -> True
                    | True _ -> False
Size: 8
Iter: 2

Time(s): 0.02 
Mem(Kb): 14852


synthesizer :burst
prog : testcases/ref/bool_xor.mls
fix (f : bool * bool -> bool) =
  fun (x:bool * bool) ->
    match x . 1 with
      | False _ -> x . 0
      | True _ -> (match x . 0 with
                     | False _ -> x . 1
                     | True _ -> False)
Size: 20
Iter: 3

Time(s): 0.02 
Mem(Kb): 16396


synthesizer :burst
prog : testcases/ref/list_append.mls
fix (f : list * list -> list) =
  fun (x:list * list) ->
    match x . 0 with
      | Nil _ -> x . 1
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))
Size: 31
Iter: 7

Time(s): 0.37 
Mem(Kb): 20080


synthesizer :burst
prog : testcases/ref/list_compress.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> x
                     | Cons _ -> (match compare (Un_Cons (Un_Cons x . 1) . 0)
                                          (Un_Cons x . 0) with
                                    | LT _ -> Cons (Un_Cons x . 0,
                                                     f (Un_Cons x . 1))
                                    | EQ _ -> f (Un_Cons x . 1)
                                    | GT _ -> Cons (Un_Cons x . 0,
                                                     f (Un_Cons x . 1))))
Size: 56
Iter: 9

Time(s): 1.14 
Mem(Kb): 29720


synthesizer :burst
prog : testcases/ref/list_concat.mls
fix (f : llist -> list) =
  fun (x:llist) ->
    match x with
      | LNil _ -> Nil
      | LCons _ -> append (Un_LCons x . 0) (f (Un_LCons x . 1))
Size: 19
Iter: 4

Time(s): 0.90 
Mem(Kb): 20716


synthesizer :burst
prog : testcases/ref/list_drop.mls
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> x . 0
      | Cons _ -> (match x . 1 with
                     | O _ -> x . 0
                     | S _ -> f (Un_Cons (x . 0) . 1, Un_S (x . 1)))
Size: 31
Iter: 6

Time(s): 0.59 
Mem(Kb): 31668


synthesizer :burst
prog : testcases/ref/list_even_parity.mls
fix (f : list -> bool) =
  fun (x:list) ->
    match x with
      | Nil _ -> True
      | Cons _ -> (match f (Un_Cons x . 1) with
                     | True _ -> bnot (Un_Cons x . 0)
                     | False _ -> Un_Cons x . 0)
Size: 23
Iter: 6

Time(s): 0.12 
Mem(Kb): 18360


synthesizer :burst
prog : testcases/ref/list_filter.mls
fix (f : (nat -> bool) * list -> list) =
  fun (x:(nat -> bool) * list) ->
    match x . 1 with
      | Nil _ -> x . 1
      | Cons _ -> (match x . 0 (Un_Cons (x . 1) . 0) with
                     | True _ -> Cons (Un_Cons (x . 1) . 0,
                                        f (x . 0, Un_Cons (x . 1) . 1))
                     | False _ -> f (x . 0, Un_Cons (x . 1) . 1))
Size: 56
Iter: 8

Time(s): 0.80 
Mem(Kb): 23500


synthesizer :burst
prog : testcases/ref/list_fold.mls
fix (f : (nat -> nat -> nat) * nat * list -> nat) =
  fun (x:(nat -> nat -> nat) * nat * list) ->
    match x . 2 with
      | Nil _ -> x . 1
      | Cons _ -> x . 0 (f (x . 0, x . 1, Un_Cons (x . 2) . 1))
                    (Un_Cons (x . 2) . 0)
Size: 42
Iter: 7

Time(s): 26.37 
Mem(Kb): 947824


synthesizer :burst
prog : testcases/ref/list_hd.mls
fix (f : list -> nat) =
  fun (x:list) -> match x with
                    | Nil _ -> 0
                    | Cons _ -> Un_Cons x . 0
Size: 10
Iter: 2

Time(s): 0.16 
Mem(Kb): 18804


synthesizer :burst
prog : testcases/ref/list_inc.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> Cons (S (Un_Cons x . 0), f (Un_Cons x . 1))
Size: 18
Iter: 3

Time(s): 0.34 
Mem(Kb): 19336


synthesizer :burst
prog : testcases/ref/list_last.mls
fix (f : list -> natopt) =
  fun (x:list) ->
    match x with
      | Nil _ -> None
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> Some (Un_Cons x . 0)
                     | Cons _ -> f (Un_Cons x . 1))
Size: 22
Iter: 3

Time(s): 0.29 
Mem(Kb): 19024


synthesizer :burst
prog : testcases/ref/list_length.mls
fix (f : list -> nat) =
  fun (x:list) -> match x with
                    | Nil _ -> 0
                    | Cons _ -> S (f (Un_Cons x . 1))
Size: 13
Iter: 4

Time(s): 0.30 
Mem(Kb): 19220


synthesizer :burst
prog : testcases/ref/list_map.mls
fix (f : (nat -> nat) * list -> list) =
  fun (x:(nat -> nat) * list) ->
    match x . 1 with
      | Nil _ -> x . 1
      | Cons _ -> Cons (x . 0 (Un_Cons (x . 1) . 0),
                         f (x . 0, Un_Cons (x . 1) . 1))
Size: 37
Iter: 4

Time(s): 0.61 
Mem(Kb): 21372


synthesizer :burst
prog : testcases/ref/list_nth.mls
fix (f : list * nat -> nat) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> 0
      | Cons _ -> (match x . 1 with
                     | O _ -> Un_Cons (x . 0) . 0
                     | S _ -> f (Un_Cons (x . 0) . 1, Un_S (x . 1)))
Size: 33
Iter: 7

Time(s): 0.35 
Mem(Kb): 20776


synthesizer :burst
prog : testcases/ref/list_pairwise_swap.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> Un_Cons x . 1
                     | Cons _ -> Cons (Un_Cons (Un_Cons x . 1) . 0,
                                        Cons (Un_Cons x . 0,
                                               f
                                                 (Un_Cons (Un_Cons x . 1) . 1))))
Size: 38
Iter: 6

Time(s): 0.34 
Mem(Kb): 20760


synthesizer :burst
prog : testcases/ref/list_rev_append.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> append (f (Un_Cons x . 1)) Cons (Un_Cons x . 0, Nil)
Size: 22
Iter: 5

Time(s): 10.31 
Mem(Kb): 165972


synthesizer :burst
prog : testcases/ref/list_rev_fold.mls
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x
Size: 10
Iter: 2

Time(s): 0.64 
Mem(Kb): 20060


synthesizer :burst
prog : testcases/ref/list_rev_snoc.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> snoc (f (Un_Cons x . 1)) (Un_Cons x . 0)
Size: 18
Iter: 4

Time(s): 4.71 
Mem(Kb): 363432


synthesizer :burst
prog : testcases/ref/list_rev_tailcall.mls

Command exited with non-zero status 124
Time(s): 120.02 
Mem(Kb): 641984


synthesizer :burst
prog : testcases/ref/list_snoc.mls
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))
Size: 36
Iter: 3

Time(s): 0.42 
Mem(Kb): 20088


synthesizer :burst
prog : testcases/ref/list_sort_sorted_insert.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> insert (f (Un_Cons x . 1)) (Un_Cons x . 0)
Size: 18
Iter: 5

Time(s): 1.49 
Mem(Kb): 39940


synthesizer :burst
prog : testcases/ref/list_sorted_insert.mls
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> (match compare (x . 1) (Un_Cons (x . 0) . 0) with
                     | LT _ -> Cons (x . 1, x . 0)
                     | EQ _ -> x . 0
                     | GT _ -> Cons (Un_Cons (x . 0) . 0,
                                      f (Un_Cons (x . 0) . 1, x . 1)))
Size: 60
Iter: 6

Time(s): 0.96 
Mem(Kb): 34100


synthesizer :burst
prog : testcases/ref/list_stutter.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> Cons (Un_Cons x . 0,
                         Cons (Un_Cons x . 0, f (Un_Cons x . 1)))
Size: 23
Iter: 3

Time(s): 0.98 
Mem(Kb): 22560


synthesizer :burst
prog : testcases/ref/list_sum.mls
fix (f : list -> nat) = fun (x:list) -> fold add 0 x
Size: 10
Iter: 2

Time(s): 0.67 
Mem(Kb): 19460


synthesizer :burst
prog : testcases/ref/list_take.mls
fix (f : nat * list -> list) =
  fun (x:nat * list) ->
    match x . 0 with
      | O _ -> Nil
      | S _ -> (match x . 1 with
                  | Nil _ -> x . 1
                  | Cons _ -> Cons (Un_Cons (x . 1) . 0,
                                     f (Un_S (x . 0), Un_Cons (x . 1) . 1)))
Size: 38
Iter: 9

Time(s): 12.65 
Mem(Kb): 243176


synthesizer :burst
prog : testcases/ref/list_tl.mls
fix (f : list -> list) =
  fun (x:list) -> match x with
                    | Nil _ -> x
                    | Cons _ -> Un_Cons x . 1
Size: 9
Iter: 2

Time(s): 0.17 
Mem(Kb): 18696


synthesizer :burst
prog : testcases/ref/nat_add.mls
fix (f : nat * nat -> nat) =
  fun (x:nat * nat) ->
    match x . 0 with
      | O _ -> x . 1
      | S _ -> S (f (Un_S (x . 0), x . 1))
Size: 22
Iter: 6

Time(s): 0.06 
Mem(Kb): 18320


synthesizer :burst
prog : testcases/ref/nat_iseven.mls
fix (f : nat -> bool) =
  fun (x:nat) ->
    match x with
      | O _ -> True
      | S _ -> (match Un_S x with
                  | O _ -> False
                  | S _ -> f Un_S (Un_S x))
Size: 16
Iter: 4

Time(s): 0.02 
Mem(Kb): 16768


synthesizer :burst
prog : testcases/ref/nat_max.mls
fix (f : nat * nat -> nat) =
  fun (x:nat * nat) ->
    match compare (x . 0) (x . 1) with
      | LT _ -> x . 1
      | EQ _ -> x . 1
      | GT _ -> x . 0
Size: 23
Iter: 5

Time(s): 7.00 
Mem(Kb): 166576


synthesizer :burst
prog : testcases/ref/nat_pred.mls
fix (f : nat -> nat) = fun (x:nat) -> match x with
                                        | O _ -> x
                                        | S _ -> Un_S x
Size: 7
Iter: 2

Time(s): 0.02 
Mem(Kb): 16448


synthesizer :burst
prog : testcases/ref/tree_binsert.mls
fix (f : tree * nat -> tree) =
  fun (x:tree * nat) ->
    match x . 0 with
      | Leaf _ -> Node (x . 0, x . 1, x . 0)
      | Node _ -> (match comp_nat (x . 1) (Un_Node (x . 0) . 1) with
                     | CEq _ -> x . 0
                     | CGt _ -> Node (f (Un_Node (x . 0) . 0, x . 1),
                                       Un_Node (x . 0) . 1,
                                       Un_Node (x . 0) . 2)
                     | CLt _ -> Node (Un_Node (x . 0) . 0,
                                       Un_Node (x . 0) . 1,
                                       f (Un_Node (x . 0) . 2, x . 1)))
Size: 87
Iter: 8

Time(s): 16.51 
Mem(Kb): 243720


synthesizer :burst
prog : testcases/ref/tree_collect_leaves.mls
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))
Size: 27
Iter: 5

Time(s): 6.11 
Mem(Kb): 52796


synthesizer :burst
prog : testcases/ref/tree_count_leaves.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 1
      | Node _ -> sum (f (Un_Node x . 2)) (f (Un_Node x . 0))
Size: 22
Iter: 4

Time(s): 5.89 
Mem(Kb): 43632


synthesizer :burst
prog : testcases/ref/tree_count_nodes.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 0
      | Node _ -> sum S (f (Un_Node x . 0)) (f (Un_Node x . 2))
Size: 22
Iter: 4

Time(s): 5.41 
Mem(Kb): 20760


synthesizer :burst
prog : testcases/ref/tree_inorder.mls
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))
Size: 27
Iter: 5

Time(s): 10.10 
Mem(Kb): 31880


synthesizer :burst
prog : testcases/ref/tree_map.mls
fix (f : (nat -> nat) * tree -> tree) =
  fun (x:(nat -> nat) * tree) ->
    match x . 1 with
      | Leaf _ -> x . 1
      | Node _ -> Node (f (x . 0, Un_Node (x . 1) . 0),
                         x . 0 (Un_Node (x . 1) . 1),
                         f (x . 0, Un_Node (x . 1) . 2))
Size: 49
Iter: 5

Time(s): 5.66 
Mem(Kb): 20068


synthesizer :burst
prog : testcases/ref/tree_nodes_at_level.mls

Command exited with non-zero status 124
Time(s): 120.04 
Mem(Kb): 1480700


synthesizer :burst
prog : testcases/ref/tree_postorder.mls
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (append (f (Un_Node x . 0)) (f (Un_Node x . 2)))
                    Cons (Un_Node x . 1, Nil)
Size: 32
Iter: 8

Time(s): 15.48 
Mem(Kb): 248232


synthesizer :burst
prog : testcases/ref/tree_preorder.mls
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1,
                         append (f (Un_Node x . 0)) (f (Un_Node x . 2)))
Size: 27
Iter: 4

Time(s): 8.13 
Mem(Kb): 19472


synthesizer :burst
prog : testcases/ref_new/expr_b.mls
fix (f : formula -> bool) =
  fun (x:formula) ->
    match x with
      | BOOL _ -> Un_BOOL x
      | NOT _ -> bnot (f Un_NOT x)
      | ANDALSO _ -> band (f (Un_ANDALSO x . 1)) (f (Un_ANDALSO x . 0))
      | ORELSE _ -> bor (f (Un_ORELSE x . 0)) (f (Un_ORELSE x . 1))
      | IMPLY _ -> bor (f (Un_IMPLY x . 1)) (bnot (f (Un_IMPLY x . 0)))
Size: 59
Iter: 21

Time(s): 6.63 
Mem(Kb): 52816


synthesizer :burst
prog : testcases/ref_new/expr.mls

Command exited with non-zero status 124
Time(s): 120.07 
Mem(Kb): 2500460


synthesizer :burst
prog : testcases/ref_new/expr_sub.mls

Command exited with non-zero status 124
Time(s): 120.29 
Mem(Kb): 5266928


synthesizer :burst
prog : testcases/ref_new/expr_div.mls

Command exited with non-zero status 124
Time(s): 120.31 
Mem(Kb): 6035352


synthesizer :burst
prog : testcases/ref_new/list_dropeven.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> (match is_even (Un_Cons x . 0) with
                     | True _ -> Un_Cons x . 1
                     | False _ -> Cons (Un_Cons x . 0, f (Un_Cons x . 1)))
Size: 28
Iter: 6

Time(s): 0.35 
Mem(Kb): 19508


synthesizer :burst
prog : testcases/ref_new/list_last2.mls
fix (f : list -> natopt) =
  fun (x:list) ->
    match x with
      | Nil _ -> None
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> None
                     | Cons _ -> (match f (Un_Cons x . 1) with
                                    | None _ -> Some (Un_Cons x . 0,
                                                       Un_Cons (Un_Cons x . 1)
                                                         . 0)
                                    | Some _ -> f (Un_Cons x . 1)))
Size: 39
Iter: 5

Time(s): 1.74 
Mem(Kb): 56820


synthesizer :burst
prog : testcases/ref_new/list_make.mls
fix (f : nat -> list) =
  fun (x:nat) -> match x with
                   | O _ -> Nil
                   | S _ -> Cons (0, f Un_S x)
Size: 14
Iter: 3

Time(s): 0.03 
Mem(Kb): 16880


synthesizer :burst
prog : testcases/ref_new/list_range.mls
fix (f : nat * nat -> list) =
  fun (x:nat * nat) ->
    match compare (x . 1) (x . 0) with
      | LT _ -> Cons (x . 0, f (Un_S (x . 0), x . 1))
      | EQ _ -> Cons (x . 0, Nil)
      | GT _ -> (match x . 0 with
                   | O _ -> Cons (x . 0, Nil)
                   | S _ -> Nil)
Size: 49
Iter: 6

Time(s): 96.25 
Mem(Kb): 2492544


synthesizer :burst
prog : testcases/ref_new/nat_mul.mls
fix (f : nat * nat -> nat) =
  fun (x:nat * nat) ->
    match x . 0 with
      | O _ -> x . 0
      | S _ -> add (f (Un_S (x . 0), x . 1)) (x . 1)
Size: 27
Iter: 8

Time(s): 69.78 
Mem(Kb): 1872376


synthesizer :burst
prog : testcases/ref_new/nat_sub.mls
fix (f : nat * nat -> nat) =
  fun (x:nat * nat) ->
    match x . 1 with
      | O _ -> x . 0
      | S _ -> (match x . 0 with
                  | O _ -> x . 0
                  | S _ -> f (Un_S (x . 0), Un_S (x . 1)))
Size: 29
Iter: 7

Time(s): 1.10 
Mem(Kb): 58488


synthesizer :burst
prog : testcases/ref_new/tree_balanced.mls
fix (f : tree -> bool) =
  fun (x:tree) ->
    match compare (height x) S (max (height x) 1) with
      | LT _ -> True
      | EQ _ -> True
      | GT _ -> False
Size: 25
Iter: 5

Time(s): 10.34 
Mem(Kb): 36828


synthesizer :burst
prog : testcases/ref_new/tree_height.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 0
      | Node _ -> S (max (f (Un_Node x . 1)) (f (Un_Node x . 2)))
Size: 22
Iter: 6

Time(s): 7.84 
Mem(Kb): 29660


synthesizer :burst
prog : testcases/ref_new/tree_lastleft.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 0
      | Node _ -> (match Un_Node x . 1 with
                     | Leaf _ -> Un_Node x . 0
                     | Node _ -> f (Un_Node x . 1))
Size: 21
Iter: 4

Time(s): 7.70 
Mem(Kb): 18876


synthesizer :burst
prog : testcases/ref_new/tree_notexist.mls
fix (f : nat * tree -> bool) =
  fun (x:nat * tree) ->
    match x . 1 with
      | Leaf _ -> True
      | Node _ -> (match compare (Un_Node (x . 1) . 0) (x . 0) with
                     | LT _ -> band (f (x . 0, Un_Node (x . 1) . 1))
                                 (f (x . 0, Un_Node (x . 1) . 2))
                     | EQ _ -> False
                     | GT _ -> band (f (x . 0, Un_Node (x . 1) . 1))
                                 (f (x . 0, Un_Node (x . 1) . 2)))
Size: 79
Iter: 9

Time(s): 12.05 
Mem(Kb): 128920


synthesizer :burst
prog : testcases/ref_new/tree_sum.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 0
      | Node _ -> add (add (Un_Node x . 0) (f (Un_Node x . 1)))
                    (f (Un_Node x . 2))
Size: 28
Iter: 5

Time(s): 9.66 
Mem(Kb): 91112


