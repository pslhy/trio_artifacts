[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] =========================== Synthesizing 'list_nth' ===========================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± xs, n
[[34m  Info  [0m]                                Î  â†“list_nth(xs, n) && true
[[34m  Info  [0m]                                Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                                    out == Z
[[34m  Info  [0m]                                  } else if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                    out == list_last(xs)
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /24,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± xs, n
[[34m  Info  [0m]                          Î  â†“list_nth(xs, n) && true
[[34m  Info  [0m]                          Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                              out == Z
[[34m  Info  [0m]                            } else if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /24,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n'    ] âŸ¦ Î± xs, n
[[34m  Info  [0m]                          Î  â†“list_nth(xs, n) && true
[[34m  Info  [0m]                          Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                              out == Z
[[34m  Info  [0m]                            } else if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /24,0/
[[34m  Info  [0m] [ADT Split on 'n'    ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n'    ] - âŸ¦ Î± xs
[[34m  Info  [0m]                            Î  (â†“list_nth(xs, Z) && è°¶Z) && true
[[34m  Info  [0m]                            Ï† if (len(xs) < nat_to_int(Z)) {
[[34m  Info  [0m]                                out == Z
[[34m  Info  [0m]                              } else if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                out == list_last(xs)
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /10,0/
[[34m  Info  [0m] [ADT Split on 'n'    ] - âŸ¦ Î± nat$6, xs
[[34m  Info  [0m]                            Î  (â†“list_nth(xs, S(nat$6)) && è°¶S(nat$6)) && true
[[34m  Info  [0m]                            Ï† if (len(xs) < nat_to_int(S(nat$6))) {
[[34m  Info  [0m]                                out == Z
[[34m  Info  [0m]                              } else if (len(xs) == nat_to_int(S(nat$6)) + 1) {
[[34m  Info  [0m]                                out == list_last(xs)
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /14,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± xs
[[34m  Info  [0m]                                Î  (â†“list_nth(xs, Z) && è°¶Z) && true
[[34m  Info  [0m]                                Ï† if (len(xs) < nat_to_int(Z)) {
[[34m  Info  [0m]                                    out == Z
[[34m  Info  [0m]                                  } else if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                    out == list_last(xs)
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /10,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± xs
[[34m  Info  [0m]                          Î  (â†“list_nth(xs, Z) && è°¶Z) && true
[[34m  Info  [0m]                          Ï† if (len(xs) < nat_to_int(Z)) {
[[34m  Info  [0m]                              out == Z
[[34m  Info  [0m]                            } else if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /10,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [If-Split on 'len(xs) < nat_to_int(n)'] âŸ¦ Î± xs, n
[[34m  Info  [0m]                                           Î  â†“list_nth(xs, n) && true
[[34m  Info  [0m]                                           Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                                               out == Z
[[34m  Info  [0m]                                             } else if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                               out == list_last(xs)
[[34m  Info  [0m]                                             } else {
[[34m  Info  [0m]                                               true
[[34m  Info  [0m]                                             }
[[34m  Info  [0m]                                           x out
[[34m  Info  [0m]                                         âŸ§ /24,0/
[[34m  Info  [0m] [If-Split on 'len(xs) < nat_to_int(n)'] Decomposed into:
[[34m  Info  [0m] [If-Split on 'len(xs) < nat_to_int(n)'] - âŸ¦ Î± xs, n
[[34m  Info  [0m]                                             Î  len(xs) < nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                                             Ï† out == Z
[[34m  Info  [0m]                                             x out
[[34m  Info  [0m]                                           âŸ§ /0,0/
[[34m  Info  [0m] [If-Split on 'len(xs) < nat_to_int(n)'] - âŸ¦ Î± xs, n
[[34m  Info  [0m]                                             Î  len(xs) >= nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                                             Ï† if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                                 out == list_last(xs)
[[34m  Info  [0m]                                               } else {
[[34m  Info  [0m]                                                 true
[[34m  Info  [0m]                                               }
[[34m  Info  [0m]                                             x out
[[34m  Info  [0m]                                           âŸ§ /0,0/
[[34m  Info  [0m] [One-point on out = Z$0] âŸ¦ Î± xs, n
[[34m  Info  [0m]                            Î  len(xs) < nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                            Ï† out == Z
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /0,0/
[[34m  Info  [0m] [One-point on out = Z$0] Decomposed into:
[[34m  Info  [0m] [One-point on out = Z$0] - âŸ¦ Î± xs, n
[[34m  Info  [0m]                              Î  len(xs) < nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                              Ï† true
[[34m  Info  [0m]                              x ()
[[34m  Info  [0m]                            âŸ§ /0,0/
[[34m  Info  [0m] [Solve: âŸ¨ true |  () âŸ©] âŸ¦ Î± xs, n
[[34m  Info  [0m]                           Î  len(xs) < nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                           Ï† true
[[34m  Info  [0m]                           x ()
[[34m  Info  [0m]                         âŸ§ /0,0/
[[34m  Info  [0m] [Solve: âŸ¨ true |  () âŸ©] Solved  with:  âŸ¨ true |  () âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± xs, n
[[34m  Info  [0m]                                Î  len(xs) >= nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                                Ï† if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                    out == list_last(xs)
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /0,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± xs, n
[[34m  Info  [0m]                          Î  len(xs) >= nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                          Ï† if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /0,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'xs'   ] âŸ¦ Î± xs, n
[[34m  Info  [0m]                          Î  â†“list_nth(xs, n) && true
[[34m  Info  [0m]                          Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                              out == Z
[[34m  Info  [0m]                            } else if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /24,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± n
[[34m  Info  [0m]                            Î  (â†“list_nth(Nil, n) && è°¶Nil) && true
[[34m  Info  [0m]                            Ï† if (len(Nil) < nat_to_int(n)) {
[[34m  Info  [0m]                                out == Z
[[34m  Info  [0m]                              } else if (len(Nil) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                out == list_last(Nil)
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /5,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± head$17, tail$22, n
[[34m  Info  [0m]                            Î  (â†“list_nth(Cons(head$17, tail$22), n) && è°¶Cons(head$17, tail$22)) && true
[[34m  Info  [0m]                            Ï† if (len(Cons(head$17, tail$22)) < nat_to_int(n)) {
[[34m  Info  [0m]                                out == Z
[[34m  Info  [0m]                              } else if (len(Cons(head$17, tail$22)) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                out == list_last(Cons(head$17, tail$22))
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /19,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n
[[34m  Info  [0m]                                Î  (â†“list_nth(Nil, n) && è°¶Nil) && true
[[34m  Info  [0m]                                Ï† if (len(Nil) < nat_to_int(n)) {
[[34m  Info  [0m]                                    out == Z
[[34m  Info  [0m]                                  } else if (len(Nil) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                    out == list_last(Nil)
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  âŸ¨ true |  Z âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [If-Split on 'len(xs) == nat_to_int(n) + 1'] âŸ¦ Î± xs, n
[[34m  Info  [0m]                                                Î  â†“list_nth(xs, n) && true
[[34m  Info  [0m]                                                Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                                                    out == Z
[[34m  Info  [0m]                                                  } else if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                                    out == list_last(xs)
[[34m  Info  [0m]                                                  } else {
[[34m  Info  [0m]                                                    true
[[34m  Info  [0m]                                                  }
[[34m  Info  [0m]                                                x out
[[34m  Info  [0m]                                              âŸ§ /24,0/
[[34m  Info  [0m] [If-Split on 'len(xs) == nat_to_int(n) + 1'] Decomposed into:
[[34m  Info  [0m] [If-Split on 'len(xs) == nat_to_int(n) + 1'] - âŸ¦ Î± xs, n
[[34m  Info  [0m]                                                  Î  len(xs) == nat_to_int(n) + 1 && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                                                  Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                                                      out == Z
[[34m  Info  [0m]                                                    } else {
[[34m  Info  [0m]                                                      out == list_last(xs)
[[34m  Info  [0m]                                                    }
[[34m  Info  [0m]                                                  x out
[[34m  Info  [0m]                                                âŸ§ /0,0/
[[34m  Info  [0m] [If-Split on 'len(xs) == nat_to_int(n) + 1'] - âŸ¦ Î± xs, n
[[34m  Info  [0m]                                                  Î  len(xs) != nat_to_int(n) + 1 && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                                                  Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                                                      out == Z
[[34m  Info  [0m]                                                    } else {
[[34m  Info  [0m]                                                      true
[[34m  Info  [0m]                                                    }
[[34m  Info  [0m]                                                  x out
[[34m  Info  [0m]                                                âŸ§ /0,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± xs, n
[[34m  Info  [0m]                                Î  len(xs) == nat_to_int(n) + 1 && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                                Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                                    out == Z
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    out == list_last(xs)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /0,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± xs, n
[[34m  Info  [0m]                          Î  len(xs) == nat_to_int(n) + 1 && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                          Ï† if (len(xs) < nat_to_int(n)) {
[[34m  Info  [0m]                              out == Z
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /0,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_nth$0(tail$22, n$0)] âŸ¦ Î± head$17, tail$22, n
[[34m  Info  [0m]                                              Î  (â†“list_nth(Cons(head$17, tail$22), n) && è°¶Cons(head$17, tail$22)) && true
[[34m  Info  [0m]                                              Ï† if (len(Cons(head$17, tail$22)) < nat_to_int(n)) {
[[34m  Info  [0m]                                                  out == Z
[[34m  Info  [0m]                                                } else if (len(Cons(head$17, tail$22)) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                                  out == list_last(Cons(head$17, tail$22))
[[34m  Info  [0m]                                                } else {
[[34m  Info  [0m]                                                  true
[[34m  Info  [0m]                                                }
[[34m  Info  [0m]                                              x out
[[34m  Info  [0m]                                            âŸ§ /19,0/
[[34m  Info  [0m] [Introduce calls list_nth$0(tail$22, n$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_nth$0(tail$22, n$0)] - âŸ¦ Î± head$17, tail$22, n
[[34m  Info  [0m]                                                Î  val rec$13: Nat = list_nth(tail$22, n)
[[34m  Info  [0m]                                                  (â†“list_nth(Cons(head$17, tail$22), n) && è°¶Cons(head$17, tail$22) && â†“list_nth(tail$22, n)) && true
[[34m  Info  [0m]                                                Ï† if (len(Cons(head$17, tail$22)) < nat_to_int(n)) {
[[34m  Info  [0m]                                                    out == Z
[[34m  Info  [0m]                                                  } else if (len(Cons(head$17, tail$22)) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                                    out == list_last(Cons(head$17, tail$22))
[[34m  Info  [0m]                                                  } else {
[[34m  Info  [0m]                                                    true
[[34m  Info  [0m]                                                  }
[[34m  Info  [0m]                                                x out
[[34m  Info  [0m]                                              âŸ§ /19,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± head$17, tail$22, n
[[34m  Info  [0m]                                Î  val rec$13: Nat = list_nth(tail$22, n)
[[34m  Info  [0m]                                  (â†“list_nth(Cons(head$17, tail$22), n) && è°¶Cons(head$17, tail$22) && â†“list_nth(tail$22, n)) && true
[[34m  Info  [0m]                                Ï† if (len(Cons(head$17, tail$22)) < nat_to_int(n)) {
[[34m  Info  [0m]                                    out == Z
[[34m  Info  [0m]                                  } else if (len(Cons(head$17, tail$22)) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                    out == list_last(Cons(head$17, tail$22))
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /19,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± head$17, tail$22, n
[[34m  Info  [0m]                          Î  val rec$13: Nat = list_nth(tail$22, n)
[[34m  Info  [0m]                            (â†“list_nth(Cons(head$17, tail$22), n) && è°¶Cons(head$17, tail$22) && â†“list_nth(tail$22, n)) && true
[[34m  Info  [0m]                          Ï† if (len(Cons(head$17, tail$22)) < nat_to_int(n)) {
[[34m  Info  [0m]                              out == Z
[[34m  Info  [0m]                            } else if (len(Cons(head$17, tail$22)) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                              out == list_last(Cons(head$17, tail$22))
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /19,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'n'    ] âŸ¦ Î± xs, n
[[34m  Info  [0m]                          Î  len(xs) >= nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                          Ï† if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /0,0/
[[34m  Info  [0m] [ADT Split on 'n'    ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'n'    ] - âŸ¦ Î± xs
[[34m  Info  [0m]                            Î  len(xs) >= nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                out == list_last(xs)
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /0,0/
[[34m  Info  [0m] [ADT Split on 'n'    ] - âŸ¦ Î± nat$21, xs
[[34m  Info  [0m]                            Î  len(xs) >= nat_to_int(S(nat$21)) && ((â†“list_nth(xs, S(nat$21)) && è°¶S(nat$21)) && true)
[[34m  Info  [0m]                            Ï† if (len(xs) == nat_to_int(S(nat$21)) + 1) {
[[34m  Info  [0m]                                out == list_last(xs)
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /0,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± xs
[[34m  Info  [0m]                                Î  len(xs) >= nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                    out == list_last(xs)
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /0,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± xs
[[34m  Info  [0m]                          Î  len(xs) >= nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /0,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [If-Split on 'len(xs) < nat_to_int(Z)'] âŸ¦ Î± xs
[[34m  Info  [0m]                                           Î  (â†“list_nth(xs, Z) && è°¶Z) && true
[[34m  Info  [0m]                                           Ï† if (len(xs) < nat_to_int(Z)) {
[[34m  Info  [0m]                                               out == Z
[[34m  Info  [0m]                                             } else if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                               out == list_last(xs)
[[34m  Info  [0m]                                             } else {
[[34m  Info  [0m]                                               true
[[34m  Info  [0m]                                             }
[[34m  Info  [0m]                                           x out
[[34m  Info  [0m]                                         âŸ§ /10,0/
[[34m  Info  [0m] [If-Split on 'len(xs) < nat_to_int(Z)'] Decomposed into:
[[34m  Info  [0m] [If-Split on 'len(xs) < nat_to_int(Z)'] - âŸ¦ Î± xs
[[34m  Info  [0m]                                             Î  len(xs) < nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                                             Ï† out == Z
[[34m  Info  [0m]                                             x out
[[34m  Info  [0m]                                           âŸ§ /0,0/
[[34m  Info  [0m] [If-Split on 'len(xs) < nat_to_int(Z)'] - âŸ¦ Î± xs
[[34m  Info  [0m]                                             Î  len(xs) >= nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                                             Ï† if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                                 out == list_last(xs)
[[34m  Info  [0m]                                               } else {
[[34m  Info  [0m]                                                 true
[[34m  Info  [0m]                                               }
[[34m  Info  [0m]                                             x out
[[34m  Info  [0m]                                           âŸ§ /0,0/
[[34m  Info  [0m] [One-point on out = Z$0] âŸ¦ Î± xs
[[34m  Info  [0m]                            Î  len(xs) < nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                            Ï† out == Z
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /0,0/
[[34m  Info  [0m] [One-point on out = Z$0] Decomposed into:
[[34m  Info  [0m] [One-point on out = Z$0] - âŸ¦ Î± xs
[[34m  Info  [0m]                              Î  len(xs) < nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                              Ï† true
[[34m  Info  [0m]                              x ()
[[34m  Info  [0m]                            âŸ§ /0,0/
[[34m  Info  [0m] [Solve: âŸ¨ true |  () âŸ©] âŸ¦ Î± xs
[[34m  Info  [0m]                           Î  len(xs) < nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                           Ï† true
[[34m  Info  [0m]                           x ()
[[34m  Info  [0m]                         âŸ§ /0,0/
[[34m  Info  [0m] [Solve: âŸ¨ true |  () âŸ©] Solved  with:  âŸ¨ true |  () âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± xs
[[34m  Info  [0m]                                Î  len(xs) >= nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                                Ï† if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                    out == list_last(xs)
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /0,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± xs
[[34m  Info  [0m]                          Î  len(xs) >= nat_to_int(Z) && ((â†“list_nth(xs, Z) && è°¶Z) && true)
[[34m  Info  [0m]                          Ï† if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /0,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'xs'   ] âŸ¦ Î± xs
[[34m  Info  [0m]                          Î  (â†“list_nth(xs, Z) && è°¶Z) && true
[[34m  Info  [0m]                          Ï† if (len(xs) < nat_to_int(Z)) {
[[34m  Info  [0m]                              out == Z
[[34m  Info  [0m]                            } else if (len(xs) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /10,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  (â†“list_nth(Nil, Z) && è°¶Z && è°¶Nil) && true
[[34m  Info  [0m]                            Ï† if (len(Nil) < nat_to_int(Z)) {
[[34m  Info  [0m]                                out == Z
[[34m  Info  [0m]                              } else if (len(Nil) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                out == list_last(Nil)
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± head$35, tail$39
[[34m  Info  [0m]                            Î  (â†“list_nth(Cons(head$35, tail$39), Z) && è°¶Z && è°¶Cons(head$35, tail$39)) && true
[[34m  Info  [0m]                            Ï† if (len(Cons(head$35, tail$39)) < nat_to_int(Z)) {
[[34m  Info  [0m]                                out == Z
[[34m  Info  [0m]                              } else if (len(Cons(head$35, tail$39)) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                                out == list_last(Cons(head$35, tail$39))
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /9,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  (â†“list_nth(Nil, Z) && è°¶Z && è°¶Nil) && true
[[34m  Info  [0m]                          Ï† if (len(Nil) < nat_to_int(Z)) {
[[34m  Info  [0m]                              out == Z
[[34m  Info  [0m]                            } else if (len(Nil) == nat_to_int(Z) + 1) {
[[34m  Info  [0m]                              out == list_last(Nil)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  S(Z) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'xs'   ] âŸ¦ Î± xs, n
[[34m  Info  [0m]                          Î  len(xs) >= nat_to_int(n) && (â†“list_nth(xs, n) && true)
[[34m  Info  [0m]                          Ï† if (len(xs) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                              out == list_last(xs)
[[34m  Info  [0m]                            } else {
[[34m  Info  [0m]                              true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /0,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± n
[[34m  Info  [0m]                            Î  len(Nil) >= nat_to_int(n) && ((â†“list_nth(Nil, n) && è°¶Nil) && true)
[[34m  Info  [0m]                            Ï† if (len(Nil) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                out == list_last(Nil)
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /0,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± head$57, tail$60, n
[[34m  Info  [0m]                            Î  len(Cons(head$57, tail$60)) >= nat_to_int(n) && ((â†“list_nth(Cons(head$57, tail$60), n) && è°¶Cons(head$57, tail$60)) && true)
[[34m  Info  [0m]                            Ï† if (len(Cons(head$57, tail$60)) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                out == list_last(Cons(head$57, tail$60))
[[34m  Info  [0m]                              } else {
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /0,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n
[[34m  Info  [0m]                                Î  len(Nil) >= nat_to_int(n) && ((â†“list_nth(Nil, n) && è°¶Nil) && true)
[[34m  Info  [0m]                                Ï† if (len(Nil) == nat_to_int(n) + 1) {
[[34m  Info  [0m]                                    out == list_last(Nil)
[[34m  Info  [0m]                                  } else {
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /0,0/