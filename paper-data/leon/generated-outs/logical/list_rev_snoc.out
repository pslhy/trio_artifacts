[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] ========================= Synthesizing 'list_rev_snoc' =========================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± xs
[[34m  Info  [0m]                                Î  â†“list_rev_snoc(xs) && true
[[34m  Info  [0m]                                Ï† xs match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      out == Nil
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      len(xs) == len(out) && h == list_last(out)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /24,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± xs
[[34m  Info  [0m]                          Î  â†“list_rev_snoc(xs) && true
[[34m  Info  [0m]                          Ï† xs match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                out == Nil
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                len(xs) == len(out) && h == list_last(out)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /24,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'xs'   ] âŸ¦ Î± xs
[[34m  Info  [0m]                          Î  â†“list_rev_snoc(xs) && true
[[34m  Info  [0m]                          Ï† xs match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                out == Nil
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                len(xs) == len(out) && h == list_last(out)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /24,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± ()
[[34m  Info  [0m]                            Î  (â†“list_rev_snoc(Nil) && è°¶Nil) && true
[[34m  Info  [0m]                            Ï† Nil match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  out == Nil
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  len(Nil) == len(out) && h == list_last(out)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /1,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] - âŸ¦ Î± head$14, tail$19
[[34m  Info  [0m]                            Î  (â†“list_rev_snoc(Cons(head$14, tail$19)) && è°¶Cons(head$14, tail$19)) && true
[[34m  Info  [0m]                            Ï† Cons(head$14, tail$19) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  out == Nil
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  len(Cons(head$14, tail$19)) == len(out) && h == list_last(out)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /23,0/
[[34m  Info  [0m] [Ground              ] âŸ¦ Î± ()
[[34m  Info  [0m]                          Î  (â†“list_rev_snoc(Nil) && è°¶Nil) && true
[[34m  Info  [0m]                          Ï† Nil match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                out == Nil
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                len(Nil) == len(out) && h == list_last(out)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  âŸ¨ true |  Nil âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls list_rev_snoc$0(tail$19)] âŸ¦ Î± head$14, tail$19
[[34m  Info  [0m]                                              Î  (â†“list_rev_snoc(Cons(head$14, tail$19)) && è°¶Cons(head$14, tail$19)) && true
[[34m  Info  [0m]                                              Ï† Cons(head$14, tail$19) match {
[[34m  Info  [0m]                                                  case Nil =>
[[34m  Info  [0m]                                                    out == Nil
[[34m  Info  [0m]                                                  case Cons(h, t) =>
[[34m  Info  [0m]                                                    len(Cons(head$14, tail$19)) == len(out) && h == list_last(out)
[[34m  Info  [0m]                                                }
[[34m  Info  [0m]                                              x out
[[34m  Info  [0m]                                            âŸ§ /23,0/
[[34m  Info  [0m] [Introduce calls list_rev_snoc$0(tail$19)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_snoc$0(tail$19)] - âŸ¦ Î± head$14, tail$19
[[34m  Info  [0m]                                                Î  val rec$7: NatList = list_rev_snoc(tail$19)
[[34m  Info  [0m]                                                  (â†“list_rev_snoc(Cons(head$14, tail$19)) && è°¶Cons(head$14, tail$19) && â†“list_rev_snoc(tail$19)) && true
[[34m  Info  [0m]                                                Ï† Cons(head$14, tail$19) match {
[[34m  Info  [0m]                                                    case Nil =>
[[34m  Info  [0m]                                                      out == Nil
[[34m  Info  [0m]                                                    case Cons(h, t) =>
[[34m  Info  [0m]                                                      len(Cons(head$14, tail$19)) == len(out) && h == list_last(out)
[[34m  Info  [0m]                                                  }
[[34m  Info  [0m]                                                x out
[[34m  Info  [0m]                                              âŸ§ /23,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± head$14, tail$19
[[34m  Info  [0m]                                Î  val rec$7: NatList = list_rev_snoc(tail$19)
[[34m  Info  [0m]                                  (â†“list_rev_snoc(Cons(head$14, tail$19)) && è°¶Cons(head$14, tail$19) && â†“list_rev_snoc(tail$19)) && true
[[34m  Info  [0m]                                Ï† Cons(head$14, tail$19) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      out == Nil
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      len(Cons(head$14, tail$19)) == len(out) && h == list_last(out)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /23,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 2 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  âŸ¨ true |  list_snoc(tail$19, head$14) âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] Finished in 11376ms
[[34m  Info  [0m] Solution requires validation
[[34m  Info  [0m]  - Now considering 'postcondition' VC for list_rev_snoc @25:54...
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Now considering 'precond. (call len(xs))' VC for list_rev_snoc @48:7...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call len(out))' VC for list_rev_snoc @48:16...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call list_last(out))' VC for list_rev_snoc @48:34...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for list_rev_snoc @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for list_rev_snoc @45:3...
[[34m  Info  [0m]  => VALID
[[33mWarning [0m] Solution may be invalid:
[[34m  Info  [0m] ================================ list_rev_snoc ================================
[[34m  Info  [0m] def list_rev_snoc(xs : NatList): NatList =  {
[[34m  Info  [0m]   xs match {
[[34m  Info  [0m]     case Nil =>
[[34m  Info  [0m]       Nil
[[34m  Info  [0m]     case Cons(head, tail) =>
[[34m  Info  [0m]       list_snoc(tail, head)
[[34m  Info  [0m]   }
[[34m  Info  [0m] } ensuring {
[[34m  Info  [0m]   (out : NatList) => xs match {
[[34m  Info  [0m]     case Nil =>
[[34m  Info  [0m]       out == Nil
[[34m  Info  [0m]     case Cons(h, t) =>
[[34m  Info  [0m]       len(xs) == len(out) && h == list_last(out)
[[34m  Info  [0m]   }
[[34m  Info  [0m] }
[[34m  Info  [0m] 