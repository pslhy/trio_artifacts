[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] =========================== Synthesizing 'nat_pred' ===========================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] âŸ¦ Î± n
[[34m  Info  [0m]                                Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                                Ï† n == Z && out == Z || n == S(out)
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              âŸ§ /20,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] âŸ¦ Î± n
[[34m  Info  [0m]                          Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                          Ï† n == Z && out == Z || n == S(out)
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /20,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Split top-level Or  ] âŸ¦ Î± n
[[34m  Info  [0m]                          Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                          Ï† n == Z && out == Z || n == S(out)
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /20,0/
[[34m  Info  [0m] [Split top-level Or  ] Decomposed into:
[[34m  Info  [0m] [Split top-level Or  ] - âŸ¦ Î± n
[[34m  Info  [0m]                            Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                            Ï† n == Z && out == Z
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /20,0/
[[34m  Info  [0m] [Split top-level Or  ] - âŸ¦ Î± n
[[34m  Info  [0m]                            Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                            Ï† n == S(out)
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /20,0/
[[34m  Info  [0m] [One-point on out = Z$0] âŸ¦ Î± n
[[34m  Info  [0m]                            Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                            Ï† n == Z && out == Z
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /20,0/
[[34m  Info  [0m] [One-point on out = Z$0] Decomposed into:
[[34m  Info  [0m] [One-point on out = Z$0] - âŸ¦ Î± n
[[34m  Info  [0m]                              Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                              Ï† n == Z
[[34m  Info  [0m]                              x ()
[[34m  Info  [0m]                            âŸ§ /20,0/
[[34m  Info  [0m] [Solve: âŸ¨ n == Z |  () âŸ©] âŸ¦ Î± n
[[34m  Info  [0m]                             Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                             Ï† n == Z
[[34m  Info  [0m]                             x ()
[[34m  Info  [0m]                           âŸ§ /20,0/
[[34m  Info  [0m] [Solve: âŸ¨ n == Z |  () âŸ©] Solved  with:  âŸ¨ n == Z |  () âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADTDual             ] âŸ¦ Î± n
[[34m  Info  [0m]                          Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                          Ï† n == S(out)
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        âŸ§ /20,0/
[[34m  Info  [0m] [ADTDual             ] Decomposed into:
[[34m  Info  [0m] [ADTDual             ] - âŸ¦ Î± n
[[34m  Info  [0m]                            Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                            Ï† n.isInstanceOf[S] && out == n.nat
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          âŸ§ /0,0/
[[34m  Info  [0m] [One-point on out = n$0.nat$0] âŸ¦ Î± n
[[34m  Info  [0m]                                  Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                                  Ï† n.isInstanceOf[S] && out == n.nat
[[34m  Info  [0m]                                  x out
[[34m  Info  [0m]                                âŸ§ /0,0/
[[34m  Info  [0m] [One-point on out = n$0.nat$0] Decomposed into:
[[34m  Info  [0m] [One-point on out = n$0.nat$0] - âŸ¦ Î± n
[[34m  Info  [0m]                                    Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                                    Ï† n.isInstanceOf[S]
[[34m  Info  [0m]                                    x ()
[[34m  Info  [0m]                                  âŸ§ /0,0/
[[34m  Info  [0m] [Solve: âŸ¨ n.isInstanceOf[S] |  () âŸ©] âŸ¦ Î± n
[[34m  Info  [0m]                                        Î  â†“nat_pred(n) && true
[[34m  Info  [0m]                                        Ï† n.isInstanceOf[S]
[[34m  Info  [0m]                                        x ()
[[34m  Info  [0m]                                      âŸ§ /0,0/
[[34m  Info  [0m] [Solve: âŸ¨ n.isInstanceOf[S] |  () âŸ©] Solved  with:  âŸ¨ n.isInstanceOf[S] |  () âŸ©
[[34m  Info  [0m] 
[[34m  Info  [0m] Finished in 2221ms
[[34m  Info  [0m] =================================== nat_pred ===================================
[[34m  Info  [0m] def nat_pred(n : Nat): Nat =  {
[[34m  Info  [0m]   if (n == Z) {
[[34m  Info  [0m]     Z
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     n.nat
[[34m  Info  [0m]   }
[[34m  Info  [0m] } ensuring {
[[34m  Info  [0m]   (out : Nat) => n == Z && out == Z || n == S(out)
[[34m  Info  [0m] }
[[34m  Info  [0m] 