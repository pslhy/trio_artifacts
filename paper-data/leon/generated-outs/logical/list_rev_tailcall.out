[[33mWarning [0m] Refusing to inline recursive function 'listWebElementToWebTree'!
[[33mWarning [0m] The Z3 native interface is not available, falling back to smt-cvc4.
[[34m  Info  [0m] ======================= Synthesizing 'list_rev_tailcall' =======================
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± xs, acc
[[34m  Info  [0m]                                Œ† ‚Üìlist_rev_tailcall(xs, acc) && true
[[34m  Info  [0m]                                œÜ len(out) == len(xs) + len(acc) && (xs match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /26,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± xs, acc
[[34m  Info  [0m]                          Œ† ‚Üìlist_rev_tailcall(xs, acc) && true
[[34m  Info  [0m]                          œÜ len(out) == len(xs) + len(acc) && (xs match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /26,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'xs'   ] ‚ü¶ Œ± xs, acc
[[34m  Info  [0m]                          Œ† ‚Üìlist_rev_tailcall(xs, acc) && true
[[34m  Info  [0m]                          œÜ len(out) == len(xs) + len(acc) && (xs match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /26,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'xs'   ] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                            Œ† (‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Nil) + len(acc) && (Nil match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† (‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Nil) + len(acc) && (Nil match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  acc ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± xs, acc
[[34m  Info  [0m]                          Œ† ‚Üìlist_rev_tailcall(xs, acc) && true
[[34m  Info  [0m]                          œÜ len(out) == len(xs) + len(acc) && (xs match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /26,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± xs
[[34m  Info  [0m]                            Œ† (‚Üìlist_rev_tailcall(xs, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(xs) + len(Nil) && (xs match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$14, tail$19, xs
[[34m  Info  [0m]                            Œ† (‚Üìlist_rev_tailcall(xs, Cons(head$14, tail$19)) && Ë∞∂Cons(head$14, tail$19)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(xs) + len(Cons(head$14, tail$19)) && (xs match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$14, tail$19))) == Cons(h, Cons(head$14, tail$19))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± xs
[[34m  Info  [0m]                                Œ† (‚Üìlist_rev_tailcall(xs, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(xs) + len(Nil) && (xs match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± xs
[[34m  Info  [0m]                          Œ† (‚Üìlist_rev_tailcall(xs, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(xs) + len(Nil) && (xs match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$18, acc$0)] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                                         Œ† (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18)) && true
[[34m  Info  [0m]                                                         œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                                             case Nil =>
[[34m  Info  [0m]                                                               true
[[34m  Info  [0m]                                                             case Cons(h, t) =>
[[34m  Info  [0m]                                                               lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                           })
[[34m  Info  [0m]                                                         x out
[[34m  Info  [0m]                                                       ‚üß /18,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$18, acc$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$18, acc$0)] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                                           Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                                             (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc)) && true
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'xs'   ] ‚ü¶ Œ± xs
[[34m  Info  [0m]                          Œ† (‚Üìlist_rev_tailcall(xs, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(xs) + len(Nil) && (xs match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'xs'   ] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                            Œ† (‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Nil) + len(Nil) && (Nil match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'xs'   ] - ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                            Œ† (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† (‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Nil) + len(Nil) && (Nil match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Nil ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$6, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(S(nat$6), tail$18), acc) && Ë∞∂Cons(S(nat$6), tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂S(nat$6)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$6), tail$18)) + len(acc) && (Cons(S(nat$6), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Nil), acc) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Nil)) + len(acc) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /10,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Nil), acc) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(acc) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /10,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, rec$9) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$28, tail$30, head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$28, tail$30))
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Cons(head$28, tail$30)) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$28, tail$30)) && Ë∞∂Cons(head$28, tail$30)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Cons(head$28, tail$30)) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$28, tail$30))) == Cons(h, Cons(head$28, tail$30))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /11,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$25, Nil$0)] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                                         Œ† (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25)) && true
[[34m  Info  [0m]                                                         œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                                             case Nil =>
[[34m  Info  [0m]                                                               true
[[34m  Info  [0m]                                                             case Cons(h, t) =>
[[34m  Info  [0m]                                                               lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                           })
[[34m  Info  [0m]                                                         x out
[[34m  Info  [0m]                                                       ‚üß /7,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$25, Nil$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$25, Nil$0)] - ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                                           Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                                             (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil)) && true
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /5,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$144, tail$131, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$144, tail$131))
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Cons(head$144, tail$131)) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$144, tail$131)) && Ë∞∂Z && Ë∞∂Cons(head$144, tail$131)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Cons(head$144, tail$131)) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$144, tail$131))) == Cons(h, Cons(head$144, tail$131))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, tail$18) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$29, acc$0)] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                                                         Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                                           (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29)) && true
[[34m  Info  [0m]                                                         œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                                             case Nil =>
[[34m  Info  [0m]                                                               true
[[34m  Info  [0m]                                                             case Cons(h, t) =>
[[34m  Info  [0m]                                                               lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                           })
[[34m  Info  [0m]                                                         x out
[[34m  Info  [0m]                                                       ‚üß /8,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$29, acc$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$29, acc$0)] - ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                                                           Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                                             val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                                             (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$43, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(S(nat$43), tail$18), Nil) && Ë∞∂Cons(S(nat$43), tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂S(nat$43)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$43), tail$18)) + len(Nil) && (Cons(S(nat$43), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$22'] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                            Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$22'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$22'] - ‚ü¶ Œ± nat$50, tail$25
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(S(nat$50), tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(S(nat$50), tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂S(nat$50)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$50), tail$25)) + len(Nil) && (Cons(S(nat$50), tail$25) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, rec$9) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, tail$18) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$25'] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                            Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$25'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$25'] - ‚ü¶ Œ± head$22
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$22, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$22, Nil)) + len(Nil) && (Cons(head$22, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$25'] - ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Nil)) + len(Nil) && (Cons(head$22, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$22, rec$14) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$14'] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                           Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                             (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil)) && true
[[34m  Info  [0m]                           œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                               case Nil =>
[[34m  Info  [0m]                                 true
[[34m  Info  [0m]                               case Cons(h, t) =>
[[34m  Info  [0m]                                 lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                             })
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$14'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$14'] - ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                               (rec$14 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Nil && inactive(rec$14)) && true)
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$14'] - ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                               rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                 val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  (rec$14 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Nil && inactive(rec$14)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$22, tail$25) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$54, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(S(nat$54), tail$18), acc) && Ë∞∂Cons(S(nat$54), tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂S(nat$54)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$54), tail$18)) + len(acc) && (Cons(S(nat$54), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$55: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(S(nat$55), tail$31) && inactive(rec$9) && Ë∞∂S(nat$55) && inactive(head$29)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Nil), acc) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Nil)) + len(acc) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /10,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Nil), acc) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(acc) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /10,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$1075, tail$1560, head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$1075, tail$1560))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Cons(head$1075, tail$1560)) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$1075, tail$1560)) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1075, tail$1560)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Cons(head$1075, tail$1560)) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$1075, tail$1560))) == Cons(h, Cons(head$1075, tail$1560))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /11,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$31'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1076: Nat = tail$31.head
[[34m  Info  [0m]                                    val tail$1561: NatList = tail$31.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Cons(head$1076, tail$1561)) && inactive(rec$9) && Ë∞∂Cons(head$1076, tail$1561) && inactive(tail$31)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$913: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$130, acc$0)] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                                                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                                                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130)) && true
[[34m  Info  [0m]                                                          œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                                              case Nil =>
[[34m  Info  [0m]                                                                true
[[34m  Info  [0m]                                                              case Cons(h, t) =>
[[34m  Info  [0m]                                                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                            })
[[34m  Info  [0m]                                                          x out
[[34m  Info  [0m]                                                        ‚üß /7,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$130, acc$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$130, acc$0)] - ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                                                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                                                              val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc)) && true
[[34m  Info  [0m]                                                            œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                                                case Nil =>
[[34m  Info  [0m]                                                                  true
[[34m  Info  [0m]                                                                case Cons(h, t) =>
[[34m  Info  [0m]                                                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                              })
[[34m  Info  [0m]                                                            x out
[[34m  Info  [0m]                                                          ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                                  val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                            val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$27'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'head$27'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$27'] - ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$27'] - ‚ü¶ Œ± nat$156, tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$156), tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(S(nat$156), tail$29)), acc) && Ë∞∂Cons(head$13, Cons(S(nat$156), tail$29)) && ‚Üìlist_rev_tailcall(Cons(S(nat$156), tail$29), acc) && Ë∞∂Cons(S(nat$156), tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂S(nat$156)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(S(nat$156), tail$29))) + len(acc) && (Cons(head$13, Cons(S(nat$156), tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$157, head$27, tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(S(nat$157), Cons(head$27, tail$29)), acc) && Ë∞∂Cons(S(nat$157), Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂S(nat$157)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$157), Cons(head$27, tail$29))) + len(acc) && (Cons(S(nat$157), Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$1469, tail$2607
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1469, tail$2607), Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$1469, tail$2607)), Nil) && Ë∞∂Cons(Z, Cons(head$1469, tail$2607)) && ‚Üìlist_rev_tailcall(Cons(head$1469, tail$2607), Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1469, tail$2607)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$1469, tail$2607))) + len(Nil) && (Cons(Z, Cons(head$1469, tail$2607)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, tail$18) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$29'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$27, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Nil)), acc) && Ë∞∂Cons(head$13, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), acc) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, Nil))) + len(acc) && (Cons(head$13, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$1679, tail$3915, head$27, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Cons(head$1679, tail$3915), acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))), acc) && Ë∞∂Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) && ‚Üìlist_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc) && Ë∞∂Cons(head$27, Cons(head$1679, tail$3915)) && ‚Üìlist_rev_tailcall(Cons(head$1679, tail$3915), acc) && Ë∞∂Cons(head$1679, tail$3915)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915)))) + len(acc) && (Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Nil)), acc) && Ë∞∂Cons(head$13, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), acc) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, Nil))) + len(acc) && (Cons(head$13, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 6 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(Z, Cons(head$13, acc)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$1680, tail$3916, head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Cons(head$1680, tail$3916))
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Cons(head$1680, tail$3916))
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Cons(head$1680, tail$3916)) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Cons(head$1680, tail$3916)) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Cons(head$1680, tail$3916)) && Ë∞∂Cons(head$1680, tail$3916)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Cons(head$1680, tail$3916)) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$1680, tail$3916))) == Cons(h, Cons(head$1680, tail$3916))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$1681: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$3917: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Cons(head$1681, tail$3917) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$247'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$247)) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                rec$247.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$1682: Nat = rec$247.head
[[34m  Info  [0m]                                  val tail$3918: NatList = rec$247.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Cons(head$1682, tail$3918) && inactive(rec$247)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$247)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, Cons(head$13, Nil)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$2034, tail$4088
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$2034, tail$4088), Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2034, tail$4088)), Nil) && Ë∞∂Cons(Z, Cons(head$2034, tail$4088)) && ‚Üìlist_rev_tailcall(Cons(head$2034, tail$4088), Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2034, tail$4088)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$2034, tail$4088))) + len(Nil) && (Cons(Z, Cons(head$2034, tail$4088)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, tail$18) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$411, Nil$0)] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                                                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411)) && true
[[34m  Info  [0m]                                                          œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                                              case Nil =>
[[34m  Info  [0m]                                                                true
[[34m  Info  [0m]                                                              case Cons(h, t) =>
[[34m  Info  [0m]                                                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                            })
[[34m  Info  [0m]                                                          x out
[[34m  Info  [0m]                                                        ‚üß /4,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$411, Nil$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$411, Nil$0)] - ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                                                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                                              val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil)) && true
[[34m  Info  [0m]                                                            œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                                                case Nil =>
[[34m  Info  [0m]                                                                  true
[[34m  Info  [0m]                                                                case Cons(h, t) =>
[[34m  Info  [0m]                                                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                              })
[[34m  Info  [0m]                                                            x out
[[34m  Info  [0m]                                                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                  val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                            val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$25'] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                            Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$25'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$25'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'tail$25'] - ‚ü¶ Œ± head$2040, tail$4262
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$2040, tail$4262), Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2040, tail$4262)), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$2040, tail$4262)) && ‚Üìlist_rev_tailcall(Cons(head$2040, tail$4262), Nil) && Ë∞∂Z && Ë∞∂Cons(head$2040, tail$4262)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$2040, tail$4262))) + len(Nil) && (Cons(Z, Cons(head$2040, tail$4262)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$14'] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                           Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                             (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                           œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                               case Nil =>
[[34m  Info  [0m]                                 true
[[34m  Info  [0m]                               case Cons(h, t) =>
[[34m  Info  [0m]                                 lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                             })
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$14'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$14'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                               (rec$14 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$14)) && true)
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$14'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                               rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$2041: Nat = rec$14.head
[[34m  Info  [0m]                                 val tail$4263: NatList = rec$14.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Cons(head$2041, tail$4263) && inactive(rec$14)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  (rec$14 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$14)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, tail$25) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$1412, Nil$0)] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                                                           Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                                             (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412)) && true
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /4,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$1412, Nil$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$1412, Nil$0)] - ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                                                             Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                                               val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                                               (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil)) && true
[[34m  Info  [0m]                                                             œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                                                 case Nil =>
[[34m  Info  [0m]                                                                   true
[[34m  Info  [0m]                                                                 case Cons(h, t) =>
[[34m  Info  [0m]                                                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                               })
[[34m  Info  [0m]                                                             x out
[[34m  Info  [0m]                                                           ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                  val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                            val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$145'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$145'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$145'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$145'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   head$145.isInstanceOf[S] && {
[[34m  Info  [0m]                                     val nat$241: Nat = head$145.nat
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(S(nat$241), tail$132) && inactive(rec$9) && Ë∞∂S(nat$241) && inactive(head$145)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$399: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(S(nat$399), tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂S(nat$399) && inactive(head$29)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$467, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(S(nat$467), tail$18), acc) && Ë∞∂Cons(S(nat$467), tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂S(nat$467)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$467), tail$18)) + len(acc) && (Cons(S(nat$467), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /5,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$3650, tail$7134, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3650, tail$7134), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3650, tail$7134)), acc) && Ë∞∂Cons(Z, Cons(head$3650, tail$7134)) && ‚Üìlist_rev_tailcall(Cons(head$3650, tail$7134), acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Cons(head$3650, tail$7134)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$3650, tail$7134))) + len(acc) && (Cons(Z, Cons(head$3650, tail$7134)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$3651, tail$7135, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$3651, tail$7135))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Cons(head$3651, tail$7135)) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$3651, tail$7135)) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Cons(head$3651, tail$7135)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Cons(head$3651, tail$7135)) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$3651, tail$7135))) == Cons(h, Cons(head$3651, tail$7135))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$132'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$132'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$132'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$132'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   tail$132.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                     val head$3652: Nat = tail$132.head
[[34m  Info  [0m]                                     val tail$7136: NatList = tail$132.tail
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Cons(head$3652, tail$7136)) && inactive(rec$9) && Ë∞∂Cons(head$3652, tail$7136) && inactive(tail$132)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$586, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(S(nat$586), tail$18), Nil) && Ë∞∂Cons(S(nat$586), tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂S(nat$586)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$586), tail$18)) + len(Nil) && (Cons(S(nat$586), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$434'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$434'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$434'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$434'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   head$434.isInstanceOf[S] && {
[[34m  Info  [0m]                                     val nat$587: Nat = head$434.nat
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(S(nat$587), tail$412) && inactive(rec$9) && Ë∞∂S(nat$587) && inactive(head$434)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /5,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$3901, tail$10030, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3901, tail$10030), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3901, tail$10030)), acc) && Ë∞∂Cons(Z, Cons(head$3901, tail$10030)) && ‚Üìlist_rev_tailcall(Cons(head$3901, tail$10030), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$3901, tail$10030)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$3901, tail$10030))) + len(acc) && (Cons(Z, Cons(head$3901, tail$10030)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$3902, tail$10031, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$3902, tail$10031))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Cons(head$3902, tail$10031)) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$3902, tail$10031)) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$3902, tail$10031)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Cons(head$3902, tail$10031)) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$3902, tail$10031))) == Cons(h, Cons(head$3902, tail$10031))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$31'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$3903: Nat = tail$31.head
[[34m  Info  [0m]                                    val tail$10032: NatList = tail$31.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Cons(head$3903, tail$10032)) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$3903, tail$10032) && inactive(tail$31)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$1559, acc$0)] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                                                           Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                                             rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                                               val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                                               val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                                               (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559)) && true
[[34m  Info  [0m]                                                             }
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /8,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$1559, acc$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$1559, acc$0)] - ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                                                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                                                 val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                                                 val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                                                 val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                                                 (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                                                               }
[[34m  Info  [0m]                                                             œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                                                 case Nil =>
[[34m  Info  [0m]                                                                   true
[[34m  Info  [0m]                                                                 case Cons(h, t) =>
[[34m  Info  [0m]                                                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                               })
[[34m  Info  [0m]                                                             x out
[[34m  Info  [0m]                                                           ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|1|$942: Nat = if (B$5203) {
        head$13
      } else if (B$5202) {
        head$1074
      } else {
        head$29
      }
      val NatList#Constructor(false)‚Üë@1|1|$444: NatList = if (B$5208) {
        rec$3068
      } else if (B$5207) {
        tail$31
      } else if (B$5206) {
        acc
      } else if (B$5205) {
        tail$1559
      } else {
        Cons(head$13, Cons(head$1074, tail$1559))
      }
      val NatList#Constructor(false)‚Üë@1|3|$142: NatList = if (B$5212) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|1|$444)
      } else if (B$5210) {
        Cons(Nat#Constructor(false)‚Üë@0|1|$942, NatList#Constructor(false)‚Üë@1|1|$444)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|1|$942, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|3|$247: Nat = S(S(if (B$5221) {
        head$13
      } else if (B$5220) {
        head$1074
      } else {
        head$29
      }))
      if (B$5232) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|3|$142)
      } else if (B$5230) {
        Cons(Nat#Constructor(false)‚Üë@0|3|$247, if (B$5228) {
          rec$3068
        } else if (B$5227) {
          tail$31
        } else if (B$5226) {
          acc
        } else if (B$5225) {
          tail$1559
        } else {
          Cons(head$13, Cons(head$1074, tail$1559))
        })
      } else if (B$5215) {
        Cons(if (B$5200) {
          head$13
        } else if (B$5199) {
          head$1074
        } else {
          head$29
        }, NatList#Constructor(false)‚Üë@1|3|$142)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|3|$247, Nil)
      }
    }
  }
  len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(acc)) == Cons(h, acc)
  })
}
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|2|$499: Nat = S(if (B$27953) {
        head$13
      } else if (B$27952) {
        head$1074
      } else {
        head$29
      })
      val NatList#Constructor(false)‚Üë@1|4|$70: NatList = if (B$27961) {
        Cons(Nat#Constructor(false)‚Üë@0|2|$499, if (B$27959) {
          rec$3068
        } else if (B$27958) {
          tail$31
        } else if (B$27957) {
          acc
        } else if (B$27956) {
          tail$1559
        } else {
          Cons(head$13, Cons(head$1074, tail$1559))
        })
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|2|$499, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|1|$1195: Nat = if (B$27971) {
        head$13
      } else if (B$27970) {
        head$1074
      } else {
        head$29
      }
      val NatList#Constructor(false)‚Üë@1|1|$639: NatList = if (B$27976) {
        rec$3068
      } else if (B$27975) {
        tail$31
      } else if (B$27974) {
        acc
      } else if (B$27973) {
        tail$1559
      } else {
        Cons(head$13, Cons(head$1074, tail$1559))
      }
      val Nat#Constructor(false)‚Üë@0|4|$105: Nat = S(S(S(if (B$27990) {
        head$13
      } else if (B$27989) {
        head$1074
      } else {
        head$29
      })))
      if (B$28002) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|4|$70)
      } else if (B$28000) {
        Cons(Nat#Constructor(false)‚Üë@0|4|$105, if (B$27998) {
          rec$3068
        } else if (B$27997) {
          tail$31
        } else if (B$27996) {
          acc
        } else if (B$27995) {
          tail$1559
        } else {
          Cons(head$13, Cons(head$1074, tail$1559))
        })
      } else if (B$27983) {
        Cons(S(if (B$27967) {
          head$13
        } else if (B$27966) {
          head$1074
        } else {
          head$29
        }), if (B$27980) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$639)
        } else if (B$27978) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$1195, NatList#Constructor(false)‚Üë@1|1|$639)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$1195, Nil)
        })
      } else if (B$27965) {
        Cons(if (B$27947) {
          head$13
        } else if (B$27946) {
          head$1074
        } else {
          head$29
        }, NatList#Constructor(false)‚Üë@1|4|$70)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|4|$105, Nil)
      }
    }
  }
  len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(acc)) == Cons(h, acc)
  })
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$601, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(S(nat$601), tail$18), Nil) && Ë∞∂Cons(S(nat$601), tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂S(nat$601)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$601), tail$18)) + len(Nil) && (Cons(S(nat$601), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$602: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(S(nat$602), tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂S(nat$602) && inactive(head$29)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), acc) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Nil)) + len(acc) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /10,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$4080, tail$11666, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$4080, tail$11666), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$4080, tail$11666)), acc) && Ë∞∂Cons(head$13, Cons(head$4080, tail$11666)) && ‚Üìlist_rev_tailcall(Cons(head$4080, tail$11666), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$4080, tail$11666)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$4080, tail$11666))) + len(acc) && (Cons(head$13, Cons(head$4080, tail$11666)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), acc) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(acc) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /10,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$4081, tail$11667, head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$4081, tail$11667))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Cons(head$4081, tail$11667)) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$4081, tail$11667)) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$4081, tail$11667)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Cons(head$4081, tail$11667)) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$4081, tail$11667))) == Cons(h, Cons(head$4081, tail$11667))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /11,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$31'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && (tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$4082: Nat = tail$31.head
[[34m  Info  [0m]                                    val tail$11668: NatList = tail$31.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Cons(head$4082, tail$11668)) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$4082, tail$11668) && inactive(tail$31)) && true
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$611, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(S(nat$611), tail$18), acc) && Ë∞∂Cons(S(nat$611), tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂S(nat$611)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$611), tail$18)) + len(acc) && (Cons(S(nat$611), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && (head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$612: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(S(nat$612), Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂S(nat$612) && inactive(head$29)) && true
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /18,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2041: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$4263: NatList = rec$14.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Cons(head$2041, tail$4263) && inactive(rec$14)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$2041: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$4263: NatList = rec$14.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Cons(head$2041, tail$4263) && inactive(rec$14)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$22'] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                            Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                              rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$22'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                  val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂Z) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$22'] - ‚ü¶ Œ± nat$618, tail$25
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                  val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(S(nat$618), tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(S(nat$618), tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂S(nat$618)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$618), tail$25)) + len(Nil) && (Cons(S(nat$618), tail$25) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂Z) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$913: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$913'] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                               rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                 val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$913'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$913'] - ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                               Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                 rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                   val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                   (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && inactive(head$913)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$913'] - ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                               Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                 rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                   val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                   head$913.isInstanceOf[S] && {
[[34m  Info  [0m]                                     val nat$619: Nat = head$913.nat
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(S(nat$619), tail$1413) && inactive(rec$14) && Ë∞∂S(nat$619) && inactive(head$913)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && inactive(head$913)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$913: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                              (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && inactive(head$913)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$5114, tail$14457, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$5114, tail$14457), Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$5114, tail$14457)), Nil) && Ë∞∂Cons(head$13, Cons(head$5114, tail$14457)) && ‚Üìlist_rev_tailcall(Cons(head$5114, tail$14457), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Cons(head$5114, tail$14457)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$5114, tail$14457))) + len(Nil) && (Cons(head$13, Cons(head$5114, tail$14457)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$412'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$412'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$412'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   (tail$412 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$412)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$412'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   tail$412.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                     val head$5115: Nat = tail$412.head
[[34m  Info  [0m]                                     val tail$14458: NatList = tail$412.tail
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Cons(head$5115, tail$14458)) && inactive(rec$9) && Ë∞∂Cons(head$5115, tail$14458) && inactive(tail$412)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$412 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$412)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, Cons(head$13, Nil)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$7034, tail$18532, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$7034, tail$18532), Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$7034, tail$18532)), Nil) && Ë∞∂Cons(head$13, Cons(head$7034, tail$18532)) && ‚Üìlist_rev_tailcall(Cons(head$7034, tail$18532), Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Cons(head$7034, tail$18532)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$7034, tail$18532))) + len(Nil) && (Cons(head$13, Cons(head$7034, tail$18532)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$31'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$7035: Nat = tail$31.head
[[34m  Info  [0m]                                    val tail$18533: NatList = tail$31.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Cons(head$7035, tail$18533)) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Cons(head$7035, tail$18533) && inactive(tail$31)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$29, Cons(head$13, Nil)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), acc) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Nil)) + len(acc) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /10,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$8270, tail$22316, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$8270, tail$22316), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$8270, tail$22316)), acc) && Ë∞∂Cons(head$13, Cons(head$8270, tail$22316)) && ‚Üìlist_rev_tailcall(Cons(head$8270, tail$22316), acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Cons(head$8270, tail$22316)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$8270, tail$22316))) + len(acc) && (Cons(head$13, Cons(head$8270, tail$22316)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), acc) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(acc) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /10,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$8271, tail$22317, head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$8271, tail$22317))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Cons(head$8271, tail$22317)) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$8271, tail$22317)) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Cons(head$8271, tail$22317)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Cons(head$8271, tail$22317)) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$8271, tail$22317))) == Cons(h, Cons(head$8271, tail$22317))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /11,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, Cons(head$13, Nil)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$25'] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                            Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                              rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$25'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$25'] - ‚ü¶ Œ± head$22
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                  val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$22, Nil)) + len(Nil) && (Cons(head$22, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$25'] - ‚ü¶ Œ± head$8841, tail$23953, head$22
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$8841, tail$23953), Nil)
[[34m  Info  [0m]                                rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                  val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$8841, tail$23953)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$8841, tail$23953)) && ‚Üìlist_rev_tailcall(Cons(head$8841, tail$23953), Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂Cons(head$8841, tail$23953)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$22, Cons(head$8841, tail$23953))) + len(Nil) && (Cons(head$22, Cons(head$8841, tail$23953)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$22, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Nil)) + len(Nil) && (Cons(head$22, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$22
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$913: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$22, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$22, Nil)) + len(Nil) && (Cons(head$22, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$1413'] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                  val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$1413'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$1413'] - ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    (tail$1413 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, Nil) && inactive(rec$14) && Ë∞∂Nil && inactive(tail$1413)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$1413'] - ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    tail$1413.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                      val head$8842: Nat = tail$1413.head
[[34m  Info  [0m]                                      val tail$23954: NatList = tail$1413.tail
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, Cons(head$8842, tail$23954)) && inactive(rec$14) && Ë∞∂Cons(head$8842, tail$23954) && inactive(tail$1413)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    (tail$1413 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, Nil) && inactive(rec$14) && Ë∞∂Nil && inactive(tail$1413)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$913, Cons(head$22, Nil)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  rec$247.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1682: Nat = rec$247.head
[[34m  Info  [0m]                                    val tail$3918: NatList = rec$247.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Cons(head$1682, tail$3918) && inactive(rec$247)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            rec$247.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$1682: Nat = rec$247.head
[[34m  Info  [0m]                              val tail$3918: NatList = rec$247.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Cons(head$1682, tail$3918) && inactive(rec$247)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$143'] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                               val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                               (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc)) && true
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$143'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$143'] - ‚ü¶ Œ± tail$130, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$130), acc)
[[34m  Info  [0m]                                 val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, Cons(Z, tail$130)), acc) && Ë∞∂Cons(Z, Cons(Z, tail$130)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, Cons(Z, tail$130))) + len(acc) && (Cons(Z, Cons(Z, tail$130)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /6,0/
[[34m  Info  [0m] [ADT Split on 'head$143'] - ‚ü¶ Œ± nat$626, tail$130, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$626), tail$130), acc)
[[34m  Info  [0m]                                 val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, Cons(S(nat$626), tail$130)), acc) && Ë∞∂Cons(Z, Cons(S(nat$626), tail$130)) && ‚Üìlist_rev_tailcall(Cons(S(nat$626), tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(S(nat$626), tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂S(nat$626)) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, Cons(S(nat$626), tail$130))) + len(acc) && (Cons(Z, Cons(S(nat$626), tail$130)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$130, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$130), acc)
[[34m  Info  [0m]                                  val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(Z, tail$130)), acc) && Ë∞∂Cons(Z, Cons(Z, tail$130)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(Z, tail$130))) + len(acc) && (Cons(Z, Cons(Z, tail$130)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /6,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 1 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(Z, rec$9) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(Z, tail$29)), acc) && Ë∞∂Cons(Z, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(Z, tail$29))) + len(acc) && (Cons(Z, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$659, tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(S(nat$659), Cons(Z, tail$29)), acc) && Ë∞∂Cons(S(nat$659), Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂S(nat$659)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$659), Cons(Z, tail$29))) + len(acc) && (Cons(S(nat$659), Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$29, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(Z, tail$29)), acc) && Ë∞∂Cons(Z, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(Z, tail$29))) + len(acc) && (Cons(Z, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /6,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 1 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(Z, rec$9) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'head$27'] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$27'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$27'] - ‚ü¶ Œ± tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(Z, tail$29)), acc) && Ë∞∂Cons(Z, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(Z, tail$29))) + len(acc) && (Cons(Z, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [ADT Split on 'head$27'] - ‚ü¶ Œ± nat$661, tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$661), tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(S(nat$661), tail$29)), acc) && Ë∞∂Cons(Z, Cons(S(nat$661), tail$29)) && ‚Üìlist_rev_tailcall(Cons(S(nat$661), tail$29), acc) && Ë∞∂Cons(S(nat$661), tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂S(nat$661)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(S(nat$661), tail$29))) + len(acc) && (Cons(Z, Cons(S(nat$661), tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$29, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(Z, tail$29)), acc) && Ë∞∂Cons(Z, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(Z, tail$29))) + len(acc) && (Cons(Z, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /6,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 1 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(Z, rec$9) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$130'] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                               val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                               (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc)) && true
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$130'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$130'] - ‚ü¶ Œ± head$143, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, Nil), acc)
[[34m  Info  [0m]                                 val rec$1126: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, Nil)), acc) && Ë∞∂Cons(Z, Cons(head$143, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$143, Nil), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, Cons(head$143, Nil))) + len(acc) && (Cons(Z, Cons(head$143, Nil)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /6,0/
[[34m  Info  [0m] [ADT Split on 'tail$130'] - ‚ü¶ Œ± head$9770, tail$26627, head$143, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, Cons(head$9770, tail$26627)), acc)
[[34m  Info  [0m]                                 val rec$1126: NatList = list_rev_tailcall(Cons(head$9770, tail$26627), acc)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, Cons(head$9770, tail$26627))), acc) && Ë∞∂Cons(Z, Cons(head$143, Cons(head$9770, tail$26627))) && ‚Üìlist_rev_tailcall(Cons(head$143, Cons(head$9770, tail$26627)), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, Cons(head$9770, tail$26627)) && ‚Üìlist_rev_tailcall(Cons(head$9770, tail$26627), acc) && Ë∞∂Cons(head$9770, tail$26627)) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, Cons(head$143, Cons(head$9770, tail$26627)))) + len(acc) && (Cons(Z, Cons(head$143, Cons(head$9770, tail$26627))) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$143, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, Nil), acc)
[[34m  Info  [0m]                                  val rec$1126: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, Nil)), acc) && Ë∞∂Cons(Z, Cons(head$143, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$143, Nil), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$143, Nil))) + len(acc) && (Cons(Z, Cons(head$143, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /6,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 4 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(Z, Cons(Z, acc)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                            val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$143, tail$130
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), Nil)
[[34m  Info  [0m]                              val rec$1126: NatList = list_rev_tailcall(tail$130, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), Nil) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), Nil) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(Nil) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$9771, tail$26628, head$143, tail$130
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), Cons(head$9771, tail$26628))
[[34m  Info  [0m]                              val rec$1126: NatList = list_rev_tailcall(tail$130, Cons(head$9771, tail$26628))
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), Cons(head$9771, tail$26628)) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), Cons(head$9771, tail$26628)) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, Cons(head$9771, tail$26628)) && Ë∞∂Cons(head$9771, tail$26628)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(Cons(head$9771, tail$26628)) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$9771, tail$26628))) == Cons(h, Cons(head$9771, tail$26628))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$143, tail$130
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), Nil)
[[34m  Info  [0m]                                  val rec$1126: NatList = list_rev_tailcall(tail$130, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), Nil) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), Nil) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(Nil) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$143, tail$130
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), Nil)
[[34m  Info  [0m]                            val rec$1126: NatList = list_rev_tailcall(tail$130, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), Nil) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), Nil) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(Nil) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                            val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                              val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                              val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$9772: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$26629: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Cons(head$9772, tail$26629) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                                  val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                            val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$1126'] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                               val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                               (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc)) && true
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$1126'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$1126'] - ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                                 val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                 (rec$1126 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Nil && inactive(rec$1126)) && true)
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$1126'] - ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                                 val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                 rec$1126.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$9773: Nat = rec$1126.head
[[34m  Info  [0m]                                   val tail$26630: NatList = rec$1126.tail
[[34m  Info  [0m]                                   (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Cons(head$9773, tail$26630) && inactive(rec$1126)) && true
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$143, tail$130, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$143, tail$130), acc)
[[34m  Info  [0m]                                  val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                  (rec$1126 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$143, tail$130)), acc) && Ë∞∂Cons(Z, Cons(head$143, tail$130)) && ‚Üìlist_rev_tailcall(Cons(head$143, tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(head$143, tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂Nil && inactive(rec$1126)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$143, tail$130))) + len(acc) && (Cons(Z, Cons(head$143, tail$130)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$143, Cons(Z, acc)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$2607, Nil$0)] ‚ü¶ Œ± head$1469, tail$2607
[[34m  Info  [0m]                                                           Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1469, tail$2607), Nil)
[[34m  Info  [0m]                                                             (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$1469, tail$2607)), Nil) && Ë∞∂Cons(Z, Cons(head$1469, tail$2607)) && ‚Üìlist_rev_tailcall(Cons(head$1469, tail$2607), Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1469, tail$2607)) && true
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(Z, Cons(head$1469, tail$2607))) + len(Nil) && (Cons(Z, Cons(head$1469, tail$2607)) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /3,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$2607, Nil$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$2607, Nil$0)] - ‚ü¶ Œ± head$1469, tail$2607
[[34m  Info  [0m]                                                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1469, tail$2607), Nil)
[[34m  Info  [0m]                                                               val rec$6046: NatList = list_rev_tailcall(tail$2607, Nil)
[[34m  Info  [0m]                                                               (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$1469, tail$2607)), Nil) && Ë∞∂Cons(Z, Cons(head$1469, tail$2607)) && ‚Üìlist_rev_tailcall(Cons(head$1469, tail$2607), Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1469, tail$2607) && ‚Üìlist_rev_tailcall(tail$2607, Nil)) && true
[[34m  Info  [0m]                                                             œÜ len(out) == len(Cons(Z, Cons(head$1469, tail$2607))) + len(Nil) && (Cons(Z, Cons(head$1469, tail$2607)) match {
[[34m  Info  [0m]                                                                 case Nil =>
[[34m  Info  [0m]                                                                   true
[[34m  Info  [0m]                                                                 case Cons(h, t) =>
[[34m  Info  [0m]                                                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                               })
[[34m  Info  [0m]                                                             x out
[[34m  Info  [0m]                                                           ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1469, tail$2607
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1469, tail$2607), Nil)
[[34m  Info  [0m]                                  val rec$6046: NatList = list_rev_tailcall(tail$2607, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$1469, tail$2607)), Nil) && Ë∞∂Cons(Z, Cons(head$1469, tail$2607)) && ‚Üìlist_rev_tailcall(Cons(head$1469, tail$2607), Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1469, tail$2607) && ‚Üìlist_rev_tailcall(tail$2607, Nil)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$1469, tail$2607))) + len(Nil) && (Cons(Z, Cons(head$1469, tail$2607)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$1469, tail$2607
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1469, tail$2607), Nil)
[[34m  Info  [0m]                            val rec$6046: NatList = list_rev_tailcall(tail$2607, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$1469, tail$2607)), Nil) && Ë∞∂Cons(Z, Cons(head$1469, tail$2607)) && ‚Üìlist_rev_tailcall(Cons(head$1469, tail$2607), Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1469, tail$2607) && ‚Üìlist_rev_tailcall(tail$2607, Nil)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$1469, tail$2607))) + len(Nil) && (Cons(Z, Cons(head$1469, tail$2607)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$29'] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, Nil), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, Nil)), acc) && Ë∞∂Cons(head$13, Cons(Z, Nil)) && ‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(Z, Nil))) + len(acc) && (Cons(head$13, Cons(Z, Nil)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$9945, tail$26829, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, Cons(head$9945, tail$26829)), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Cons(head$9945, tail$26829), acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, Cons(head$9945, tail$26829))), acc) && Ë∞∂Cons(head$13, Cons(Z, Cons(head$9945, tail$26829))) && ‚Üìlist_rev_tailcall(Cons(Z, Cons(head$9945, tail$26829)), acc) && Ë∞∂Cons(Z, Cons(head$9945, tail$26829)) && ‚Üìlist_rev_tailcall(Cons(head$9945, tail$26829), acc) && Ë∞∂Z && Ë∞∂Cons(head$9945, tail$26829)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(Z, Cons(head$9945, tail$26829)))) + len(acc) && (Cons(head$13, Cons(Z, Cons(head$9945, tail$26829))) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, Nil), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, Nil)), acc) && Ë∞∂Cons(head$13, Cons(Z, Nil)) && ‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, Nil))) + len(acc) && (Cons(head$13, Cons(Z, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /6,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 4 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(Z, Cons(head$13, rec$247)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), Nil) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(Nil) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$9946, tail$26830, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), Cons(head$9946, tail$26830))
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Cons(head$9946, tail$26830))
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), Cons(head$9946, tail$26830)) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), Cons(head$9946, tail$26830)) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Cons(head$9946, tail$26830)) && Ë∞∂Z && Ë∞∂Cons(head$9946, tail$26830)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(Cons(head$9946, tail$26830)) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$9946, tail$26830))) == Cons(h, Cons(head$9946, tail$26830))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$29, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), Nil) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(Nil) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$29, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), Nil)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), Nil) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(Nil) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$9947: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$26831: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Cons(head$9947, tail$26831) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$247'] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$247)) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                rec$247.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$9948: Nat = rec$247.head
[[34m  Info  [0m]                                  val tail$26832: NatList = rec$247.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Cons(head$9948, tail$26832) && inactive(rec$247)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$247)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, Cons(head$13, acc)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$29'] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$27, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, Nil)), acc) && Ë∞∂Cons(Z, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), acc) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$27, Nil))) + len(acc) && (Cons(Z, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$10133, tail$27002, head$27, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Cons(head$10133, tail$27002)), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Cons(head$10133, tail$27002), acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, Cons(head$10133, tail$27002))), acc) && Ë∞∂Cons(Z, Cons(head$27, Cons(head$10133, tail$27002))) && ‚Üìlist_rev_tailcall(Cons(head$27, Cons(head$10133, tail$27002)), acc) && Ë∞∂Cons(head$27, Cons(head$10133, tail$27002)) && ‚Üìlist_rev_tailcall(Cons(head$10133, tail$27002), acc) && Ë∞∂Z && Ë∞∂Cons(head$10133, tail$27002)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$27, Cons(head$10133, tail$27002)))) + len(acc) && (Cons(Z, Cons(head$27, Cons(head$10133, tail$27002))) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, Nil)), acc) && Ë∞∂Cons(Z, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), acc) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$27, Nil))) + len(acc) && (Cons(Z, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /6,0/
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 4 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(head$27, Cons(Z, rec$247)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$27, tail$29
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(Nil) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$10134, tail$27003, head$27, tail$29
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Cons(head$10134, tail$27003))
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Cons(head$10134, tail$27003))
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), Cons(head$10134, tail$27003)) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Cons(head$10134, tail$27003)) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Cons(head$10134, tail$27003)) && Ë∞∂Z && Ë∞∂Cons(head$10134, tail$27003)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(Cons(head$10134, tail$27003)) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$10134, tail$27003))) == Cons(h, Cons(head$10134, tail$27003))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(Nil) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(Nil) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$10135: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$27004: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Cons(head$10135, tail$27004) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$247'] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$247)) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                rec$247.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$10136: Nat = rec$247.head
[[34m  Info  [0m]                                  val tail$27005: NatList = rec$247.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Cons(head$10136, tail$27005) && inactive(rec$247)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂Nil && inactive(rec$247)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, Cons(Z, acc)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'head$27'] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$27'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$27'] - ‚ü¶ Œ± tail$29, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), Nil)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), Nil) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(Nil) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$27'] - ‚ü¶ Œ± nat$737, tail$29, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$737), tail$29), Nil)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(S(nat$737), tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(S(nat$737), tail$29)) && ‚Üìlist_rev_tailcall(Cons(S(nat$737), tail$29), Nil) && Ë∞∂Cons(S(nat$737), tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂S(nat$737)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(S(nat$737), tail$29))) + len(Nil) && (Cons(head$13, Cons(S(nat$737), tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$29, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), Nil) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(Nil) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$29, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), Nil)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), Nil) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(Nil) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± head$27, tail$29
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(Nil) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$738, head$27, tail$29
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(S(nat$738), Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(S(nat$738), Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂S(nat$738)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$738), Cons(head$27, tail$29))) + len(Nil) && (Cons(S(nat$738), Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(Nil) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(Nil) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$27'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'head$27'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$27'] - ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Z) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$27'] - ‚ü¶ Œ± nat$742, tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$742), tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(S(nat$742), tail$29)), acc) && Ë∞∂Cons(head$13, Cons(S(nat$742), tail$29)) && ‚Üìlist_rev_tailcall(Cons(S(nat$742), tail$29), acc) && Ë∞∂Cons(S(nat$742), tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂S(nat$742)) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(S(nat$742), tail$29))) + len(acc) && (Cons(head$13, Cons(S(nat$742), tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Z) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$29))) + len(acc) && (Cons(head$13, Cons(Z, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Z) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$743, head$27, tail$29, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(S(nat$743), Cons(head$27, tail$29)), acc) && Ë∞∂Cons(S(nat$743), Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂S(nat$743)) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$743), Cons(head$27, tail$29))) + len(acc) && (Cons(S(nat$743), Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(Z, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Z) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$27, tail$29))) + len(acc) && (Cons(Z, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$4088, Nil$0)] ‚ü¶ Œ± head$2034, tail$4088
[[34m  Info  [0m]                                                           Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$2034, tail$4088), Nil)
[[34m  Info  [0m]                                                             (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2034, tail$4088)), Nil) && Ë∞∂Cons(Z, Cons(head$2034, tail$4088)) && ‚Üìlist_rev_tailcall(Cons(head$2034, tail$4088), Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2034, tail$4088)) && true
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(Z, Cons(head$2034, tail$4088))) + len(Nil) && (Cons(Z, Cons(head$2034, tail$4088)) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /3,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$4088, Nil$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$4088, Nil$0)] - ‚ü¶ Œ± head$2034, tail$4088
[[34m  Info  [0m]                                                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$2034, tail$4088), Nil)
[[34m  Info  [0m]                                                               val rec$7531: NatList = list_rev_tailcall(tail$4088, Nil)
[[34m  Info  [0m]                                                               (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2034, tail$4088)), Nil) && Ë∞∂Cons(Z, Cons(head$2034, tail$4088)) && ‚Üìlist_rev_tailcall(Cons(head$2034, tail$4088), Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2034, tail$4088) && ‚Üìlist_rev_tailcall(tail$4088, Nil)) && true
[[34m  Info  [0m]                                                             œÜ len(out) == len(Cons(Z, Cons(head$2034, tail$4088))) + len(Nil) && (Cons(Z, Cons(head$2034, tail$4088)) match {
[[34m  Info  [0m]                                                                 case Nil =>
[[34m  Info  [0m]                                                                   true
[[34m  Info  [0m]                                                                 case Cons(h, t) =>
[[34m  Info  [0m]                                                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                               })
[[34m  Info  [0m]                                                             x out
[[34m  Info  [0m]                                                           ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$2034, tail$4088
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$2034, tail$4088), Nil)
[[34m  Info  [0m]                                  val rec$7531: NatList = list_rev_tailcall(tail$4088, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2034, tail$4088)), Nil) && Ë∞∂Cons(Z, Cons(head$2034, tail$4088)) && ‚Üìlist_rev_tailcall(Cons(head$2034, tail$4088), Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2034, tail$4088) && ‚Üìlist_rev_tailcall(tail$4088, Nil)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$2034, tail$4088))) + len(Nil) && (Cons(Z, Cons(head$2034, tail$4088)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$2034, tail$4088
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$2034, tail$4088), Nil)
[[34m  Info  [0m]                            val rec$7531: NatList = list_rev_tailcall(tail$4088, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2034, tail$4088)), Nil) && Ë∞∂Cons(Z, Cons(head$2034, tail$4088)) && ‚Üìlist_rev_tailcall(Cons(head$2034, tail$4088), Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2034, tail$4088) && ‚Üìlist_rev_tailcall(tail$4088, Nil)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$2034, tail$4088))) + len(Nil) && (Cons(Z, Cons(head$2034, tail$4088)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$433'] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                               val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                               (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil)) && true
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$433'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$433'] - ‚ü¶ Œ± tail$411, head$13
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$411), Nil)
[[34m  Info  [0m]                                 val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$411)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Cons(Z, tail$411))) + len(Nil) && (Cons(head$13, Cons(Z, tail$411)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$433'] - ‚ü¶ Œ± nat$819, tail$411, head$13
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$819), tail$411), Nil)
[[34m  Info  [0m]                                 val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$13, Cons(S(nat$819), tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(S(nat$819), tail$411)) && ‚Üìlist_rev_tailcall(Cons(S(nat$819), tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(S(nat$819), tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂S(nat$819)) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Cons(S(nat$819), tail$411))) + len(Nil) && (Cons(head$13, Cons(S(nat$819), tail$411)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$411, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$411), Nil)
[[34m  Info  [0m]                                  val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$411)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$411))) + len(Nil) && (Cons(head$13, Cons(Z, tail$411)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$411, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$411), Nil)
[[34m  Info  [0m]                            val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(Z, tail$411)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$411))) + len(Nil) && (Cons(head$13, Cons(Z, tail$411)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                              val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± head$433, tail$411
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(Z, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$433, tail$411))) + len(Nil) && (Cons(Z, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$820, head$433, tail$411
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(S(nat$820), Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(S(nat$820), Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂S(nat$820)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$820), Cons(head$433, tail$411))) + len(Nil) && (Cons(S(nat$820), Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$433, tail$411
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                  val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(Z, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$433, tail$411))) + len(Nil) && (Cons(Z, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$433, tail$411
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                            val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(Z, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$433, tail$411))) + len(Nil) && (Cons(Z, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$4262, Nil$0)] ‚ü¶ Œ± head$2040, tail$4262
[[34m  Info  [0m]                                                           Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$2040, tail$4262), Nil)
[[34m  Info  [0m]                                                             (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2040, tail$4262)), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$2040, tail$4262)) && ‚Üìlist_rev_tailcall(Cons(head$2040, tail$4262), Nil) && Ë∞∂Z && Ë∞∂Cons(head$2040, tail$4262)) && true
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(Z, Cons(head$2040, tail$4262))) + len(Nil) && (Cons(Z, Cons(head$2040, tail$4262)) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /3,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$4262, Nil$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$4262, Nil$0)] - ‚ü¶ Œ± head$2040, tail$4262
[[34m  Info  [0m]                                                             Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$2040, tail$4262), Nil)
[[34m  Info  [0m]                                                               val rec$13957: NatList = list_rev_tailcall(tail$4262, Nil)
[[34m  Info  [0m]                                                               (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2040, tail$4262)), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$2040, tail$4262)) && ‚Üìlist_rev_tailcall(Cons(head$2040, tail$4262), Nil) && Ë∞∂Z && Ë∞∂Cons(head$2040, tail$4262) && ‚Üìlist_rev_tailcall(tail$4262, Nil)) && true
[[34m  Info  [0m]                                                             œÜ len(out) == len(Cons(Z, Cons(head$2040, tail$4262))) + len(Nil) && (Cons(Z, Cons(head$2040, tail$4262)) match {
[[34m  Info  [0m]                                                                 case Nil =>
[[34m  Info  [0m]                                                                   true
[[34m  Info  [0m]                                                                 case Cons(h, t) =>
[[34m  Info  [0m]                                                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                                               })
[[34m  Info  [0m]                                                             x out
[[34m  Info  [0m]                                                           ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$2040, tail$4262
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$2040, tail$4262), Nil)
[[34m  Info  [0m]                                  val rec$13957: NatList = list_rev_tailcall(tail$4262, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2040, tail$4262)), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$2040, tail$4262)) && ‚Üìlist_rev_tailcall(Cons(head$2040, tail$4262), Nil) && Ë∞∂Z && Ë∞∂Cons(head$2040, tail$4262) && ‚Üìlist_rev_tailcall(tail$4262, Nil)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$2040, tail$4262))) + len(Nil) && (Cons(Z, Cons(head$2040, tail$4262)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$2040, tail$4262
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$2040, tail$4262), Nil)
[[34m  Info  [0m]                            val rec$13957: NatList = list_rev_tailcall(tail$4262, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$2040, tail$4262)), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$2040, tail$4262)) && ‚Üìlist_rev_tailcall(Cons(head$2040, tail$4262), Nil) && Ë∞∂Z && Ë∞∂Cons(head$2040, tail$4262) && ‚Üìlist_rev_tailcall(tail$4262, Nil)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$2040, tail$4262))) + len(Nil) && (Cons(Z, Cons(head$2040, tail$4262)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$912'] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                               val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                               (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil)) && true
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$912'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$912'] - ‚ü¶ Œ± tail$1412, head$22
[[34m  Info  [0m]                               Œ† val rec$14: NatList = list_rev_tailcall(Cons(Z, tail$1412), Nil)
[[34m  Info  [0m]                                 val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$22, Cons(Z, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(Z, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$1412), Nil) && Ë∞∂Cons(Z, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$22, Cons(Z, tail$1412))) + len(Nil) && (Cons(head$22, Cons(Z, tail$1412)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$912'] - ‚ü¶ Œ± nat$888, tail$1412, head$22
[[34m  Info  [0m]                               Œ† val rec$14: NatList = list_rev_tailcall(Cons(S(nat$888), tail$1412), Nil)
[[34m  Info  [0m]                                 val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$22, Cons(S(nat$888), tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(S(nat$888), tail$1412)) && ‚Üìlist_rev_tailcall(Cons(S(nat$888), tail$1412), Nil) && Ë∞∂Cons(S(nat$888), tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂S(nat$888)) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$22, Cons(S(nat$888), tail$1412))) + len(Nil) && (Cons(head$22, Cons(S(nat$888), tail$1412)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$1412, head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(Z, tail$1412), Nil)
[[34m  Info  [0m]                                  val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, Cons(Z, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(Z, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$1412), Nil) && Ë∞∂Cons(Z, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Cons(Z, tail$1412))) + len(Nil) && (Cons(head$22, Cons(Z, tail$1412)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$1412, head$22
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(Cons(Z, tail$1412), Nil)
[[34m  Info  [0m]                            val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$22, Cons(Z, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(Z, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$1412), Nil) && Ë∞∂Cons(Z, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$22, Cons(Z, tail$1412))) + len(Nil) && (Cons(head$22, Cons(Z, tail$1412)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$22'] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                            Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                              val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil)) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$22'] - ‚ü¶ Œ± head$912, tail$1412
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$912, tail$1412))) + len(Nil) && (Cons(Z, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$22'] - ‚ü¶ Œ± nat$889, head$912, tail$1412
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(S(nat$889), Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(S(nat$889), Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂S(nat$889)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$889), Cons(head$912, tail$1412))) + len(Nil) && (Cons(S(nat$889), Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$912, tail$1412
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                  val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$912, tail$1412))) + len(Nil) && (Cons(Z, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$912, tail$1412
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                            val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Z) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$912, tail$1412))) + len(Nil) && (Cons(Z, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± nat$626, tail$130, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$626), tail$130), acc)
[[34m  Info  [0m]                                  val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(S(nat$626), tail$130)), acc) && Ë∞∂Cons(Z, Cons(S(nat$626), tail$130)) && ‚Üìlist_rev_tailcall(Cons(S(nat$626), tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(S(nat$626), tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂S(nat$626)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(S(nat$626), tail$130))) + len(acc) && (Cons(Z, Cons(S(nat$626), tail$130)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± nat$626, tail$130, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$626), tail$130), acc)
[[34m  Info  [0m]                            val rec$1126: NatList = list_rev_tailcall(tail$130, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(S(nat$626), tail$130)), acc) && Ë∞∂Cons(Z, Cons(S(nat$626), tail$130)) && ‚Üìlist_rev_tailcall(Cons(S(nat$626), tail$130), acc) && Ë∞∂Z && Ë∞∂Cons(S(nat$626), tail$130) && ‚Üìlist_rev_tailcall(tail$130, acc) && Ë∞∂S(nat$626)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(S(nat$626), tail$130))) + len(acc) && (Cons(Z, Cons(S(nat$626), tail$130)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± nat$659, tail$29, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(S(nat$659), Cons(Z, tail$29)), acc) && Ë∞∂Cons(S(nat$659), Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂S(nat$659)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(S(nat$659), Cons(Z, tail$29))) + len(acc) && (Cons(S(nat$659), Cons(Z, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± nat$659, tail$29, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(S(nat$659), Cons(Z, tail$29)), acc) && Ë∞∂Cons(S(nat$659), Cons(Z, tail$29)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$29), acc) && Ë∞∂Cons(Z, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂S(nat$659)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(S(nat$659), Cons(Z, tail$29))) + len(acc) && (Cons(S(nat$659), Cons(Z, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± nat$661, tail$29, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$661), tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(S(nat$661), tail$29)), acc) && Ë∞∂Cons(Z, Cons(S(nat$661), tail$29)) && ‚Üìlist_rev_tailcall(Cons(S(nat$661), tail$29), acc) && Ë∞∂Cons(S(nat$661), tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂S(nat$661)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(S(nat$661), tail$29))) + len(acc) && (Cons(Z, Cons(S(nat$661), tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± nat$661, tail$29, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$661), tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(Z, Cons(S(nat$661), tail$29)), acc) && Ë∞∂Cons(Z, Cons(S(nat$661), tail$29)) && ‚Üìlist_rev_tailcall(Cons(S(nat$661), tail$29), acc) && Ë∞∂Cons(S(nat$661), tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Z && Ë∞∂S(nat$661)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(S(nat$661), tail$29))) + len(acc) && (Cons(Z, Cons(S(nat$661), tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$29'] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$27, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), Nil)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Nil)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), Nil) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, Nil))) + len(Nil) && (Cons(head$13, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$28081, tail$29430, head$27, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Cons(head$28081, tail$29430)), Nil)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Cons(head$28081, tail$29430), Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Cons(head$28081, tail$29430))), Nil) && Ë∞∂Cons(head$13, Cons(head$27, Cons(head$28081, tail$29430))) && ‚Üìlist_rev_tailcall(Cons(head$27, Cons(head$28081, tail$29430)), Nil) && Ë∞∂Cons(head$27, Cons(head$28081, tail$29430)) && ‚Üìlist_rev_tailcall(Cons(head$28081, tail$29430), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$28081, tail$29430)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, Cons(head$28081, tail$29430)))) + len(Nil) && (Cons(head$13, Cons(head$27, Cons(head$28081, tail$29430))) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Nil)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), Nil) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, Nil))) + len(Nil) && (Cons(head$13, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$27, Cons(head$13, rec$247)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$28082: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$29431: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$28082, tail$29431) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$247'] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                (rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$247)) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                rec$247.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$28083: Nat = rec$247.head
[[34m  Info  [0m]                                  val tail$29432: NatList = rec$247.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$28083, tail$29432) && inactive(rec$247)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                  (rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && Ë∞∂Nil && inactive(rec$247)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, Cons(head$13, Nil)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$29'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$27, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Nil)), acc) && Ë∞∂Cons(head$13, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), acc) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, Nil))) + len(acc) && (Cons(head$13, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$29'] - ‚ü¶ Œ± head$28437, tail$29604, head$27, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Cons(head$28437, tail$29604)), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(Cons(head$28437, tail$29604), acc)
[[34m  Info  [0m]                                (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Cons(head$28437, tail$29604))), acc) && Ë∞∂Cons(head$13, Cons(head$27, Cons(head$28437, tail$29604))) && ‚Üìlist_rev_tailcall(Cons(head$27, Cons(head$28437, tail$29604)), acc) && Ë∞∂Cons(head$27, Cons(head$28437, tail$29604)) && ‚Üìlist_rev_tailcall(Cons(head$28437, tail$29604), acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Cons(head$28437, tail$29604)) && true)
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, Cons(head$28437, tail$29604)))) + len(acc) && (Cons(head$13, Cons(head$27, Cons(head$28437, tail$29604))) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Nil)), acc) && Ë∞∂Cons(head$13, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), acc) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, Nil))) + len(acc) && (Cons(head$13, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Nil), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Nil)), acc) && Ë∞∂Cons(head$13, Cons(head$27, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$27, Nil), acc) && Ë∞∂Cons(head$27, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, Nil))) + len(acc) && (Cons(head$13, Cons(head$27, Nil)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$28438, tail$29605, head$27, tail$29, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Cons(head$28438, tail$29605))
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, Cons(head$28438, tail$29605))
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Cons(head$28438, tail$29605)) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Cons(head$28438, tail$29605)) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Cons(head$28438, tail$29605)) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Cons(head$28438, tail$29605)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Cons(head$28438, tail$29605)) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$28438, tail$29605))) == Cons(h, Cons(head$28438, tail$29605))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), Nil)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, Nil)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), Nil) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), Nil) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, Nil) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(Nil) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$247'] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                              val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$9 == Nil) && ((rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil && inactive(rec$247)) && true))
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'rec$247'] - ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                (rec$9 == Nil) && (rec$247.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$28439: Nat = rec$247.head
[[34m  Info  [0m]                                  val tail$29606: NatList = rec$247.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Cons(head$28439, tail$29606) && inactive(rec$247)) && true
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil && inactive(rec$247)) && true))
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$27, tail$29, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, tail$29), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(tail$29, acc)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((rec$247 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, tail$29)), acc) && Ë∞∂Cons(head$13, Cons(head$27, tail$29)) && ‚Üìlist_rev_tailcall(Cons(head$27, tail$29), acc) && Ë∞∂Cons(head$27, tail$29) && ‚Üìlist_rev_tailcall(tail$29, acc) && Ë∞∂Nil && inactive(rec$9) && Ë∞∂Nil && inactive(rec$247)) && true))
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, tail$29))) + len(acc) && (Cons(head$13, Cons(head$27, tail$29)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$411'] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                               val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                               (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil)) && true
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$411'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$411'] - ‚ü¶ Œ± head$433, head$13
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, Nil), Nil)
[[34m  Info  [0m]                                 val rec$1868: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, Nil)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$433, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Cons(head$433, Nil))) + len(Nil) && (Cons(head$13, Cons(head$433, Nil)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$411'] - ‚ü¶ Œ± head$30766, tail$35556, head$433, head$13
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, Cons(head$30766, tail$35556)), Nil)
[[34m  Info  [0m]                                 val rec$1868: NatList = list_rev_tailcall(Cons(head$30766, tail$35556), Nil)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, Cons(head$30766, tail$35556))), Nil) && Ë∞∂Cons(head$13, Cons(head$433, Cons(head$30766, tail$35556))) && ‚Üìlist_rev_tailcall(Cons(head$433, Cons(head$30766, tail$35556)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, Cons(head$30766, tail$35556)) && ‚Üìlist_rev_tailcall(Cons(head$30766, tail$35556), Nil) && Ë∞∂Cons(head$30766, tail$35556)) && true
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Cons(head$433, Cons(head$30766, tail$35556)))) + len(Nil) && (Cons(head$13, Cons(head$433, Cons(head$30766, tail$35556))) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$433, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, Nil), Nil)
[[34m  Info  [0m]                                  val rec$1868: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, Nil)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$433, Nil), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$433, Nil))) + len(Nil) && (Cons(head$13, Cons(head$433, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$433, Cons(head$13, rec$1868)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$9'] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                            val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                              val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                              (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$9'] - ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                              val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$30767: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$35557: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Cons(head$30767, tail$35557) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                  val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                  (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                            val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                            (rec$9 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Nil && inactive(rec$9)) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$1868'] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                               val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                               (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil)) && true
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$1868'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$1868'] - ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                 val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                 (rec$1868 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Nil && inactive(rec$1868)) && true)
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$1868'] - ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                 val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                 rec$1868.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$30768: Nat = rec$1868.head
[[34m  Info  [0m]                                   val tail$35558: NatList = rec$1868.tail
[[34m  Info  [0m]                                   (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Cons(head$30768, tail$35558) && inactive(rec$1868)) && true
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$433, tail$411, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$433, tail$411), Nil)
[[34m  Info  [0m]                                  val rec$1868: NatList = list_rev_tailcall(tail$411, Nil)
[[34m  Info  [0m]                                  (rec$1868 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$433, tail$411)), Nil) && Ë∞∂Cons(head$13, Cons(head$433, tail$411)) && ‚Üìlist_rev_tailcall(Cons(head$433, tail$411), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$433, tail$411) && ‚Üìlist_rev_tailcall(tail$411, Nil) && Ë∞∂Nil && inactive(rec$1868)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$433, tail$411))) + len(Nil) && (Cons(head$13, Cons(head$433, tail$411)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$433, Cons(head$13, tail$411)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    tail$412.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                      val head$5115: Nat = tail$412.head
[[34m  Info  [0m]                                      val tail$14458: NatList = tail$412.tail
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Cons(head$5115, tail$14458)) && inactive(rec$9) && Ë∞∂Cons(head$5115, tail$14458) && inactive(tail$412)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
rec$9.isInstanceOf[Cons] && {
  val head$434: Nat = rec$9.head
  val tail$412: NatList = rec$9.tail
  tail$412.isInstanceOf[Cons] && {
    val head$5115: Nat = tail$412.head
    val tail$14458: NatList = tail$412.tail
    val out: NatList = {
      {
        val Nat#Constructor(false)‚Üë@0|1|$2258: Nat = if (B$79202) {
          head$434
        } else if (B$79201) {
          head$13
        } else {
          head$5115
        }
        val NatList#Constructor(false)‚Üë@1|1|$1239: NatList = if (B$79205) {
          tail$14458
        } else if (B$79204) {
          tail$18
        } else {
          Cons(head$434, Cons(head$5115, tail$14458))
        }
        val NatList#Constructor(false)‚Üë@1|3|$412: NatList = if (B$79209) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$1239)
        } else if (B$79207) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$2258, NatList#Constructor(false)‚Üë@1|1|$1239)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$2258, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|3|$566: Nat = S(S(if (B$79218) {
          head$434
        } else if (B$79217) {
          head$13
        } else {
          head$5115
        }))
        val NatList#Constructor(false)‚Üë@1|5|$61: NatList = if (B$79227) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|3|$412)
        } else if (B$79225) {
          Cons(Nat#Constructor(false)‚Üë@0|3|$566, if (B$79223) {
            tail$14458
          } else if (B$79222) {
            tail$18
          } else {
            Cons(head$434, Cons(head$5115, tail$14458))
          })
        } else if (B$79212) {
          Cons(if (B$79199) {
            head$434
          } else if (B$79198) {
            head$13
          } else {
            head$5115
          }, NatList#Constructor(false)‚Üë@1|3|$412)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|3|$566, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|2|$1290: Nat = S(if (B$79239) {
          head$434
        } else if (B$79238) {
          head$13
        } else {
          head$5115
        })
        val Nat#Constructor(false)‚Üë@0|1|$2265: Nat = if (B$79256) {
          head$434
        } else if (B$79255) {
          head$13
        } else {
          head$5115
        }
        val NatList#Constructor(false)‚Üë@1|1|$1242: NatList = if (B$79259) {
          tail$14458
        } else if (B$79258) {
          tail$18
        } else {
          Cons(head$434, Cons(head$5115, tail$14458))
        }
        val Nat#Constructor(false)‚Üë@0|5|$61: Nat = S(S(S(S(if (B$79274) {
          head$434
        } else if (B$79273) {
          head$13
        } else {
          head$5115
        }))))
        if (B$79285) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|5|$61)
        } else if (B$79283) {
          Cons(Nat#Constructor(false)‚Üë@0|5|$61, if (B$79281) {
            tail$14458
          } else if (B$79280) {
            tail$18
          } else {
            Cons(head$434, Cons(head$5115, tail$14458))
          })
        } else if (B$79266) {
          Cons(S(S(if (B$79251) {
            head$434
          } else if (B$79250) {
            head$13
          } else {
            head$5115
          })), if (B$79263) {
            Cons(Z, NatList#Constructor(false)‚Üë@1|1|$1242)
          } else if (B$79261) {
            Cons(Nat#Constructor(false)‚Üë@0|1|$2265, NatList#Constructor(false)‚Üë@1|1|$1242)
          } else {
            Cons(Nat#Constructor(false)‚Üë@0|1|$2265, Nil)
          })
        } else if (B$79249) {
          Cons(S(if (B$79232) {
            head$434
          } else if (B$79231) {
            head$13
          } else {
            head$5115
          }), if (B$79245) {
            Cons(Nat#Constructor(false)‚Üë@0|2|$1290, if (B$79243) {
              tail$14458
            } else if (B$79242) {
              tail$18
            } else {
              Cons(head$434, Cons(head$5115, tail$14458))
            })
          } else {
            Cons(Nat#Constructor(false)‚Üë@0|2|$1290, Nil)
          })
        } else if (B$79230) {
          Cons(if (B$79196) {
            head$434
          } else if (B$79195) {
            head$13
          } else {
            head$5115
          }, NatList#Constructor(false)‚Üë@1|5|$61)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|5|$61, Nil)
        }
      }
    }
    len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
      case Nil =>
        true
      case Cons(h, t) =>
        lastn(out, 1 + len(Nil)) == Cons(h, Nil)
    })
  }
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              tail$412.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$5115: Nat = tail$412.head
[[34m  Info  [0m]                                val tail$14458: NatList = tail$412.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Cons(head$5115, tail$14458)) && inactive(rec$9) && Ë∞∂Cons(head$5115, tail$14458) && inactive(tail$412)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                      val head$7035: Nat = tail$31.head
[[34m  Info  [0m]                                      val tail$18533: NatList = tail$31.tail
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Cons(head$7035, tail$18533)) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Cons(head$7035, tail$18533) && inactive(tail$31)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  tail$31.isInstanceOf[Cons] && {
    val head$7035: Nat = tail$31.head
    val tail$18533: NatList = tail$31.tail
    val out: NatList = {
      {
        val Nat#Constructor(false)‚Üë@0|1|$4332: Nat = if (B$184210) {
          head$29
        } else if (B$184209) {
          head$13
        } else {
          head$7035
        }
        val NatList#Constructor(false)‚Üë@1|1|$3111: NatList = if (B$184213) {
          tail$18533
        } else if (B$184212) {
          tail$18
        } else {
          Cons(head$29, Cons(head$7035, tail$18533))
        }
        val NatList#Constructor(false)‚Üë@1|3|$1566: NatList = if (B$184217) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$3111)
        } else if (B$184215) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$4332, NatList#Constructor(false)‚Üë@1|1|$3111)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$4332, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|3|$1655: Nat = S(S(if (B$184226) {
          head$29
        } else if (B$184225) {
          head$13
        } else {
          head$7035
        }))
        val NatList#Constructor(false)‚Üë@1|5|$917: NatList = if (B$184235) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|3|$1566)
        } else if (B$184233) {
          Cons(Nat#Constructor(false)‚Üë@0|3|$1655, if (B$184231) {
            tail$18533
          } else if (B$184230) {
            tail$18
          } else {
            Cons(head$29, Cons(head$7035, tail$18533))
          })
        } else if (B$184220) {
          Cons(if (B$184207) {
            head$29
          } else if (B$184206) {
            head$13
          } else {
            head$7035
          }, NatList#Constructor(false)‚Üë@1|3|$1566)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|3|$1655, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|2|$2096: Nat = S(if (B$184247) {
          head$29
        } else if (B$184246) {
          head$13
        } else {
          head$7035
        })
        val Nat#Constructor(false)‚Üë@0|1|$4339: Nat = if (B$184264) {
          head$29
        } else if (B$184263) {
          head$13
        } else {
          head$7035
        }
        val NatList#Constructor(false)‚Üë@1|1|$3114: NatList = if (B$184267) {
          tail$18533
        } else if (B$184266) {
          tail$18
        } else {
          Cons(head$29, Cons(head$7035, tail$18533))
        }
        val Nat#Constructor(false)‚Üë@0|5|$624: Nat = S(S(S(S(if (B$184282) {
          head$29
        } else if (B$184281) {
          head$13
        } else {
          head$7035
        }))))
        if (B$184293) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|5|$917)
        } else if (B$184291) {
          Cons(Nat#Constructor(false)‚Üë@0|5|$624, if (B$184289) {
            tail$18533
          } else if (B$184288) {
            tail$18
          } else {
            Cons(head$29, Cons(head$7035, tail$18533))
          })
        } else if (B$184274) {
          Cons(S(S(if (B$184259) {
            head$29
          } else if (B$184258) {
            head$13
          } else {
            head$7035
          })), if (B$184271) {
            Cons(Z, NatList#Constructor(false)‚Üë@1|1|$3114)
          } else if (B$184269) {
            Cons(Nat#Constructor(false)‚Üë@0|1|$4339, NatList#Constructor(false)‚Üë@1|1|$3114)
          } else {
            Cons(Nat#Constructor(false)‚Üë@0|1|$4339, Nil)
          })
        } else if (B$184257) {
          Cons(S(if (B$184240) {
            head$29
          } else if (B$184239) {
            head$13
          } else {
            head$7035
          }), if (B$184253) {
            Cons(Nat#Constructor(false)‚Üë@0|2|$2096, if (B$184251) {
              tail$18533
            } else if (B$184250) {
              tail$18
            } else {
              Cons(head$29, Cons(head$7035, tail$18533))
            })
          } else {
            Cons(Nat#Constructor(false)‚Üë@0|2|$2096, Nil)
          })
        } else if (B$184238) {
          Cons(if (B$184204) {
            head$29
          } else if (B$184203) {
            head$13
          } else {
            head$7035
          }, NatList#Constructor(false)‚Üë@1|5|$917)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|5|$624, Nil)
        }
      }
    }
    len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
      case Nil =>
        true
      case Cons(h, t) =>
        lastn(out, 1 + len(Nil)) == Cons(h, Nil)
    })
  }
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$7035: Nat = tail$31.head
[[34m  Info  [0m]                                val tail$18533: NatList = tail$31.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Cons(head$7035, tail$18533)) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Cons(head$7035, tail$18533) && inactive(tail$31)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$1412'] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil)) && true
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$1412'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$1412'] - ‚ü¶ Œ± head$912, head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, Nil), Nil)
[[34m  Info  [0m]                                  val rec$2904: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, Nil)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$912, Nil), Nil) && Ë∞∂Cons(head$912, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Cons(head$912, Nil))) + len(Nil) && (Cons(head$22, Cons(head$912, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$1412'] - ‚ü¶ Œ± head$31385, tail$37029, head$912, head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, Cons(head$31385, tail$37029)), Nil)
[[34m  Info  [0m]                                  val rec$2904: NatList = list_rev_tailcall(Cons(head$31385, tail$37029), Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, Cons(head$31385, tail$37029))), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, Cons(head$31385, tail$37029))) && ‚Üìlist_rev_tailcall(Cons(head$912, Cons(head$31385, tail$37029)), Nil) && Ë∞∂Cons(head$912, Cons(head$31385, tail$37029)) && ‚Üìlist_rev_tailcall(Cons(head$31385, tail$37029), Nil) && Ë∞∂Cons(head$31385, tail$37029)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Cons(head$912, Cons(head$31385, tail$37029)))) + len(Nil) && (Cons(head$22, Cons(head$912, Cons(head$31385, tail$37029))) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$912, head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, Nil), Nil)
[[34m  Info  [0m]                                  val rec$2904: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, Nil)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$912, Nil), Nil) && Ë∞∂Cons(head$912, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Cons(head$912, Nil))) + len(Nil) && (Cons(head$22, Cons(head$912, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$22, Cons(head$22, Nil)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$14'] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                           Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                             val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                             (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil)) && true
[[34m  Info  [0m]                           œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                               case Nil =>
[[34m  Info  [0m]                                 true
[[34m  Info  [0m]                               case Cons(h, t) =>
[[34m  Info  [0m]                                 lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                             })
[[34m  Info  [0m]                           x out
[[34m  Info  [0m]                         ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$14'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$14'] - ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                               val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                               (rec$14 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Nil && inactive(rec$14)) && true)
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$14'] - ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                               val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                               rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$31386: Nat = rec$14.head
[[34m  Info  [0m]                                 val tail$37030: NatList = rec$14.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Cons(head$31386, tail$37030) && inactive(rec$14)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                  val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                  (rec$14 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Nil && inactive(rec$14)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                            val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                            (rec$14 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Nil && inactive(rec$14)) && true)
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'rec$2904'] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                               val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                               (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil)) && true
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$2904'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$2904'] - ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                               Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                 val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                 (rec$2904 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Nil && inactive(rec$2904)) && true)
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'rec$2904'] - ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                               Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                 val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                 rec$2904.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$31387: Nat = rec$2904.head
[[34m  Info  [0m]                                   val tail$37031: NatList = rec$2904.tail
[[34m  Info  [0m]                                   (‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Cons(head$31387, tail$37031) && inactive(rec$2904)) && true
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$912, tail$1412, head$22
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(Cons(head$912, tail$1412), Nil)
[[34m  Info  [0m]                                  val rec$2904: NatList = list_rev_tailcall(tail$1412, Nil)
[[34m  Info  [0m]                                  (rec$2904 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$22, Cons(head$912, tail$1412)), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, Cons(head$912, tail$1412)) && ‚Üìlist_rev_tailcall(Cons(head$912, tail$1412), Nil) && Ë∞∂Cons(head$912, tail$1412) && ‚Üìlist_rev_tailcall(tail$1412, Nil) && Ë∞∂Nil && inactive(rec$2904)) && true)
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, Cons(head$912, tail$1412))) + len(Nil) && (Cons(head$22, Cons(head$912, tail$1412)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$912, Cons(head$22, tail$1412)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    tail$1413.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                      val head$8842: Nat = tail$1413.head
[[34m  Info  [0m]                                      val tail$23954: NatList = tail$1413.tail
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, Cons(head$8842, tail$23954)) && inactive(rec$14) && Ë∞∂Cons(head$8842, tail$23954) && inactive(tail$1413)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
rec$14.isInstanceOf[Cons] && {
  val head$913: Nat = rec$14.head
  val tail$1413: NatList = rec$14.tail
  tail$1413.isInstanceOf[Cons] && {
    val head$8842: Nat = tail$1413.head
    val tail$23954: NatList = tail$1413.tail
    val out: NatList = {
      {
        val Nat#Constructor(false)‚Üë@0|1|$6420: Nat = if (B$287932) {
          head$913
        } else if (B$287931) {
          head$22
        } else {
          head$8842
        }
        val NatList#Constructor(false)‚Üë@1|1|$4991: NatList = if (B$287935) {
          tail$23954
        } else if (B$287934) {
          tail$25
        } else {
          Cons(head$913, Cons(head$8842, tail$23954))
        }
        val NatList#Constructor(false)‚Üë@1|3|$2722: NatList = if (B$287939) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$4991)
        } else if (B$287937) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$6420, NatList#Constructor(false)‚Üë@1|1|$4991)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$6420, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|3|$2746: Nat = S(S(if (B$287948) {
          head$913
        } else if (B$287947) {
          head$22
        } else {
          head$8842
        }))
        val NatList#Constructor(false)‚Üë@1|5|$1773: NatList = if (B$287957) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|3|$2722)
        } else if (B$287955) {
          Cons(Nat#Constructor(false)‚Üë@0|3|$2746, if (B$287953) {
            tail$23954
          } else if (B$287952) {
            tail$25
          } else {
            Cons(head$913, Cons(head$8842, tail$23954))
          })
        } else if (B$287942) {
          Cons(if (B$287929) {
            head$913
          } else if (B$287928) {
            head$22
          } else {
            head$8842
          }, NatList#Constructor(false)‚Üë@1|3|$2722)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|3|$2746, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|2|$2908: Nat = S(if (B$287969) {
          head$913
        } else if (B$287968) {
          head$22
        } else {
          head$8842
        })
        val Nat#Constructor(false)‚Üë@0|1|$6427: Nat = if (B$287986) {
          head$913
        } else if (B$287985) {
          head$22
        } else {
          head$8842
        }
        val NatList#Constructor(false)‚Üë@1|1|$4994: NatList = if (B$287989) {
          tail$23954
        } else if (B$287988) {
          tail$25
        } else {
          Cons(head$913, Cons(head$8842, tail$23954))
        }
        val Nat#Constructor(false)‚Üë@0|5|$1187: Nat = S(S(S(S(if (B$288004) {
          head$913
        } else if (B$288003) {
          head$22
        } else {
          head$8842
        }))))
        if (B$288015) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|5|$1773)
        } else if (B$288013) {
          Cons(Nat#Constructor(false)‚Üë@0|5|$1187, if (B$288011) {
            tail$23954
          } else if (B$288010) {
            tail$25
          } else {
            Cons(head$913, Cons(head$8842, tail$23954))
          })
        } else if (B$287996) {
          Cons(S(S(if (B$287981) {
            head$913
          } else if (B$287980) {
            head$22
          } else {
            head$8842
          })), if (B$287993) {
            Cons(Z, NatList#Constructor(false)‚Üë@1|1|$4994)
          } else if (B$287991) {
            Cons(Nat#Constructor(false)‚Üë@0|1|$6427, NatList#Constructor(false)‚Üë@1|1|$4994)
          } else {
            Cons(Nat#Constructor(false)‚Üë@0|1|$6427, Nil)
          })
        } else if (B$287979) {
          Cons(S(if (B$287962) {
            head$913
          } else if (B$287961) {
            head$22
          } else {
            head$8842
          }), if (B$287975) {
            Cons(Nat#Constructor(false)‚Üë@0|2|$2908, if (B$287973) {
              tail$23954
            } else if (B$287972) {
              tail$25
            } else {
              Cons(head$913, Cons(head$8842, tail$23954))
            })
          } else {
            Cons(Nat#Constructor(false)‚Üë@0|2|$2908, Nil)
          })
        } else if (B$287960) {
          Cons(if (B$287926) {
            head$913
          } else if (B$287925) {
            head$22
          } else {
            head$8842
          }, NatList#Constructor(false)‚Üë@1|5|$1773)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|5|$1187, Nil)
        }
      }
    }
    len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
      case Nil =>
        true
      case Cons(h, t) =>
        lastn(out, 1 + len(Nil)) == Cons(h, Nil)
    })
  }
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$913: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                              tail$1413.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$8842: Nat = tail$1413.head
[[34m  Info  [0m]                                val tail$23954: NatList = tail$1413.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, Cons(head$8842, tail$23954)) && inactive(rec$14) && Ë∞∂Cons(head$8842, tail$23954) && inactive(tail$1413)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$1470'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$1470'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$1470'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$1470 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(Z, tail$2608) && inactive(rec$9) && Ë∞∂Z && inactive(head$1470)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$1470'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                    head$1470.isInstanceOf[S] && {
[[34m  Info  [0m]                                      val nat$1496: Nat = head$1470.nat
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(S(nat$1496), tail$2608) && inactive(rec$9) && Ë∞∂S(nat$1496) && inactive(head$1470)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$1470 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(Z, tail$2608) && inactive(rec$9) && Ë∞∂Z && inactive(head$1470)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$1470 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(Z, tail$2608) && inactive(rec$9) && Ë∞∂Z && inactive(head$1470)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$7134, acc$0)] ‚ü¶ Œ± head$3650, tail$7134, acc
[[34m  Info  [0m]                                                           Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3650, tail$7134), acc)
[[34m  Info  [0m]                                                             rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                                               val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                                               val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                                               (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3650, tail$7134)), acc) && Ë∞∂Cons(Z, Cons(head$3650, tail$7134)) && ‚Üìlist_rev_tailcall(Cons(head$3650, tail$7134), acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Cons(head$3650, tail$7134)) && true
[[34m  Info  [0m]                                                             }
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(Z, Cons(head$3650, tail$7134))) + len(acc) && (Cons(Z, Cons(head$3650, tail$7134)) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /7,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$7134, acc$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$7134, acc$0)] - ‚ü¶ Œ± head$3650, tail$7134, acc
[[34m  Info  [0m]                                                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3650, tail$7134), acc)
[[34m  Info  [0m]                                                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                                                 val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                                                 val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                                                 val rec$16860: NatList = list_rev_tailcall(tail$7134, acc)
[[34m  Info  [0m]                                                                 (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3650, tail$7134)), acc) && Ë∞∂Cons(Z, Cons(head$3650, tail$7134)) && ‚Üìlist_rev_tailcall(Cons(head$3650, tail$7134), acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Cons(head$3650, tail$7134) && ‚Üìlist_rev_tailcall(tail$7134, acc)) && true
[[34m  Info  [0m]                                                               }
[[34m  Info  [0m]                                                             œÜ len(out) == len(Cons(Z, Cons(head$3650, tail$7134))) + len(acc) && (Cons(Z, Cons(head$3650, tail$7134)) match {
[[34m  Info  [0m]                                                                 case Nil =>
[[34m  Info  [0m]                                                                   true
[[34m  Info  [0m]                                                                 case Cons(h, t) =>
[[34m  Info  [0m]                                                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                               })
[[34m  Info  [0m]                                                             x out
[[34m  Info  [0m]                                                           ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$3650, tail$7134, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3650, tail$7134), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$16860: NatList = list_rev_tailcall(tail$7134, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3650, tail$7134)), acc) && Ë∞∂Cons(Z, Cons(head$3650, tail$7134)) && ‚Üìlist_rev_tailcall(Cons(head$3650, tail$7134), acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Cons(head$3650, tail$7134) && ‚Üìlist_rev_tailcall(tail$7134, acc)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$3650, tail$7134))) + len(acc) && (Cons(Z, Cons(head$3650, tail$7134)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$3650, tail$7134), acc)
rec$9.isInstanceOf[Cons] && {
  val head$145: Nat = rec$9.head
  val tail$132: NatList = rec$9.tail
  val rec$16860: NatList = list_rev_tailcall(tail$7134, acc)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|1|$8508: Nat = if (B$392830) {
        head$3650
      } else {
        head$145
      }
      val NatList#Constructor(false)‚Üë@1|1|$6870: NatList = if (B$392835) {
        rec$16860
      } else if (B$392834) {
        tail$132
      } else if (B$392833) {
        acc
      } else if (B$392832) {
        tail$7134
      } else {
        Cons(Z, Cons(head$3650, tail$7134))
      }
      val NatList#Constructor(false)‚Üë@1|3|$3878: NatList = if (B$392839) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|1|$6870)
      } else if (B$392837) {
        Cons(Nat#Constructor(false)‚Üë@0|1|$8508, NatList#Constructor(false)‚Üë@1|1|$6870)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|1|$8508, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|3|$3839: Nat = S(S(if (B$392846) {
        head$3650
      } else {
        head$145
      }))
      if (B$392857) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|3|$3878)
      } else if (B$392855) {
        Cons(Nat#Constructor(false)‚Üë@0|3|$3839, if (B$392853) {
          rec$16860
        } else if (B$392852) {
          tail$132
        } else if (B$392851) {
          acc
        } else if (B$392850) {
          tail$7134
        } else {
          Cons(Z, Cons(head$3650, tail$7134))
        })
      } else if (B$392842) {
        Cons(if (B$392828) {
          head$3650
        } else {
          head$145
        }, NatList#Constructor(false)‚Üë@1|3|$3878)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|3|$3839, Nil)
      }
    }
  }
  len(out) == len(Cons(Z, Cons(head$3650, tail$7134))) + len(acc) && (Cons(Z, Cons(head$3650, tail$7134)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(acc)) == Cons(h, acc)
  })
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$3650, tail$7134, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3650, tail$7134), acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              val rec$16860: NatList = list_rev_tailcall(tail$7134, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3650, tail$7134)), acc) && Ë∞∂Cons(Z, Cons(head$3650, tail$7134)) && ‚Üìlist_rev_tailcall(Cons(head$3650, tail$7134), acc) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Cons(head$3650, tail$7134) && ‚Üìlist_rev_tailcall(tail$7134, acc)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$3650, tail$7134))) + len(acc) && (Cons(Z, Cons(head$3650, tail$7134)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$145'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$145'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$145'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$145'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   head$145.isInstanceOf[S] && {
[[34m  Info  [0m]                                     val nat$1752: Nat = head$145.nat
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(S(nat$1752), tail$132) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂S(nat$1752) && inactive(head$145)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /5,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$31748, tail$37203, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$31748, tail$37203), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$31748, tail$37203)), acc) && Ë∞∂Cons(Z, Cons(head$31748, tail$37203)) && ‚Üìlist_rev_tailcall(Cons(head$31748, tail$37203), acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Cons(head$31748, tail$37203)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$31748, tail$37203))) + len(acc) && (Cons(Z, Cons(head$31748, tail$37203)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$31749, tail$37204, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$31749, tail$37204))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Cons(head$31749, tail$37204)) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$31749, tail$37204)) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Cons(head$31749, tail$37204)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Cons(head$31749, tail$37204)) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$31749, tail$37204))) == Cons(h, Cons(head$31749, tail$37204))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$132'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                 (head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, tail$132) && inactive(rec$9) && Ë∞∂Z && inactive(head$145)) && true)
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$132'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$132'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$145 == Z) && ((tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Nil && inactive(tail$132)) && true))
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$132'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$145 == Z) && (tail$132.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                     val head$31750: Nat = tail$132.head
[[34m  Info  [0m]                                     val tail$37205: NatList = tail$132.tail
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, Cons(head$31750, tail$37205)) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Cons(head$31750, tail$37205) && inactive(tail$132)) && true
[[34m  Info  [0m]                                   })
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$145 == Z) && ((tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Nil && inactive(tail$132)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$145 == Z) && ((tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$145) && Ë∞∂Nil && inactive(tail$132)) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$145'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                 (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$145'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$145'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   (tail$132 == Nil) && ((head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Z && inactive(head$145)) && true))
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$145'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   (tail$132 == Nil) && (head$145.isInstanceOf[S] && {
[[34m  Info  [0m]                                     val nat$1945: Nat = head$145.nat
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(S(nat$1945), Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂S(nat$1945) && inactive(head$145)) && true
[[34m  Info  [0m]                                   })
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$132 == Nil) && ((head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Z && inactive(head$145)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$132 == Nil) && ((head$145 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Z && inactive(head$145)) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$3915, acc$0)] ‚ü¶ Œ± head$1679, tail$3915, head$27, head$13, acc
[[34m  Info  [0m]                                                           Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc)
[[34m  Info  [0m]                                                             val rec$247: NatList = list_rev_tailcall(Cons(head$1679, tail$3915), acc)
[[34m  Info  [0m]                                                             (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))), acc) && Ë∞∂Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) && ‚Üìlist_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc) && Ë∞∂Cons(head$27, Cons(head$1679, tail$3915)) && ‚Üìlist_rev_tailcall(Cons(head$1679, tail$3915), acc) && Ë∞∂Cons(head$1679, tail$3915)) && true
[[34m  Info  [0m]                                                           œÜ len(out) == len(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915)))) + len(acc) && (Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) match {
[[34m  Info  [0m]                                                               case Nil =>
[[34m  Info  [0m]                                                                 true
[[34m  Info  [0m]                                                               case Cons(h, t) =>
[[34m  Info  [0m]                                                                 lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                             })
[[34m  Info  [0m]                                                           x out
[[34m  Info  [0m]                                                         ‚üß /1,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$3915, acc$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$3915, acc$0)] - ‚ü¶ Œ± head$1679, tail$3915, head$27, head$13, acc
[[34m  Info  [0m]                                                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc)
[[34m  Info  [0m]                                                               val rec$247: NatList = list_rev_tailcall(Cons(head$1679, tail$3915), acc)
[[34m  Info  [0m]                                                               val rec$16861: NatList = list_rev_tailcall(tail$3915, acc)
[[34m  Info  [0m]                                                               (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))), acc) && Ë∞∂Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) && ‚Üìlist_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc) && Ë∞∂Cons(head$27, Cons(head$1679, tail$3915)) && ‚Üìlist_rev_tailcall(Cons(head$1679, tail$3915), acc) && Ë∞∂Cons(head$1679, tail$3915) && ‚Üìlist_rev_tailcall(tail$3915, acc)) && true
[[34m  Info  [0m]                                                             œÜ len(out) == len(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915)))) + len(acc) && (Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) match {
[[34m  Info  [0m]                                                                 case Nil =>
[[34m  Info  [0m]                                                                   true
[[34m  Info  [0m]                                                                 case Cons(h, t) =>
[[34m  Info  [0m]                                                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                               })
[[34m  Info  [0m]                                                             x out
[[34m  Info  [0m]                                                           ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1679, tail$3915, head$27, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc)
[[34m  Info  [0m]                                  val rec$247: NatList = list_rev_tailcall(Cons(head$1679, tail$3915), acc)
[[34m  Info  [0m]                                  val rec$16861: NatList = list_rev_tailcall(tail$3915, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))), acc) && Ë∞∂Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) && ‚Üìlist_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc) && Ë∞∂Cons(head$27, Cons(head$1679, tail$3915)) && ‚Üìlist_rev_tailcall(Cons(head$1679, tail$3915), acc) && Ë∞∂Cons(head$1679, tail$3915) && ‚Üìlist_rev_tailcall(tail$3915, acc)) && true
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915)))) + len(acc) && (Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$1679, tail$3915, head$27, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc)
[[34m  Info  [0m]                            val rec$247: NatList = list_rev_tailcall(Cons(head$1679, tail$3915), acc)
[[34m  Info  [0m]                            val rec$16861: NatList = list_rev_tailcall(tail$3915, acc)
[[34m  Info  [0m]                            (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))), acc) && Ë∞∂Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) && ‚Üìlist_rev_tailcall(Cons(head$27, Cons(head$1679, tail$3915)), acc) && Ë∞∂Cons(head$27, Cons(head$1679, tail$3915)) && ‚Üìlist_rev_tailcall(Cons(head$1679, tail$3915), acc) && Ë∞∂Cons(head$1679, tail$3915) && ‚Üìlist_rev_tailcall(tail$3915, acc)) && true
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915)))) + len(acc) && (Cons(head$13, Cons(head$27, Cons(head$1679, tail$3915))) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$2035'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$2035'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$2035'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$2035 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(Z, tail$4089) && inactive(rec$9) && Ë∞∂Z && inactive(head$2035)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$2035'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                    head$2035.isInstanceOf[S] && {
[[34m  Info  [0m]                                      val nat$2072: Nat = head$2035.nat
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(S(nat$2072), tail$4089) && inactive(rec$9) && Ë∞∂S(nat$2072) && inactive(head$2035)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$2035 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(Z, tail$4089) && inactive(rec$9) && Ë∞∂Z && inactive(head$2035)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$2035 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(Z, tail$4089) && inactive(rec$9) && Ë∞∂Z && inactive(head$2035)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$434'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$434'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$434'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$434'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   head$434.isInstanceOf[S] && {
[[34m  Info  [0m]                                     val nat$2263: Nat = head$434.nat
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(S(nat$2263), tail$412) && inactive(rec$9) && Ë∞∂Z && Ë∞∂S(nat$2263) && inactive(head$434)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$2434, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(S(nat$2434), tail$18), Nil) && Ë∞∂Cons(S(nat$2434), tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂S(nat$2434)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$2434), tail$18)) + len(Nil) && (Cons(S(nat$2434), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Z) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$10030, acc$0)] ‚ü¶ Œ± head$3901, tail$10030, acc
[[34m  Info  [0m]                                                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3901, tail$10030), acc)
[[34m  Info  [0m]                                                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                                                (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3901, tail$10030)), acc) && Ë∞∂Cons(Z, Cons(head$3901, tail$10030)) && ‚Üìlist_rev_tailcall(Cons(head$3901, tail$10030), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$3901, tail$10030)) && true
[[34m  Info  [0m]                                                              }
[[34m  Info  [0m]                                                            œÜ len(out) == len(Cons(Z, Cons(head$3901, tail$10030))) + len(acc) && (Cons(Z, Cons(head$3901, tail$10030)) match {
[[34m  Info  [0m]                                                                case Nil =>
[[34m  Info  [0m]                                                                  true
[[34m  Info  [0m]                                                                case Cons(h, t) =>
[[34m  Info  [0m]                                                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                              })
[[34m  Info  [0m]                                                            x out
[[34m  Info  [0m]                                                          ‚üß /7,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$10030, acc$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$10030, acc$0)] - ‚ü¶ Œ± head$3901, tail$10030, acc
[[34m  Info  [0m]                                                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3901, tail$10030), acc)
[[34m  Info  [0m]                                                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                                                  val rec$17058: NatList = list_rev_tailcall(tail$10030, acc)
[[34m  Info  [0m]                                                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3901, tail$10030)), acc) && Ë∞∂Cons(Z, Cons(head$3901, tail$10030)) && ‚Üìlist_rev_tailcall(Cons(head$3901, tail$10030), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$3901, tail$10030) && ‚Üìlist_rev_tailcall(tail$10030, acc)) && true
[[34m  Info  [0m]                                                                }
[[34m  Info  [0m]                                                              œÜ len(out) == len(Cons(Z, Cons(head$3901, tail$10030))) + len(acc) && (Cons(Z, Cons(head$3901, tail$10030)) match {
[[34m  Info  [0m]                                                                  case Nil =>
[[34m  Info  [0m]                                                                    true
[[34m  Info  [0m]                                                                  case Cons(h, t) =>
[[34m  Info  [0m]                                                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                                })
[[34m  Info  [0m]                                                              x out
[[34m  Info  [0m]                                                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$3901, tail$10030, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3901, tail$10030), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$17058: NatList = list_rev_tailcall(tail$10030, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3901, tail$10030)), acc) && Ë∞∂Cons(Z, Cons(head$3901, tail$10030)) && ‚Üìlist_rev_tailcall(Cons(head$3901, tail$10030), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$3901, tail$10030) && ‚Üìlist_rev_tailcall(tail$10030, acc)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$3901, tail$10030))) + len(acc) && (Cons(Z, Cons(head$3901, tail$10030)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$3901, tail$10030), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$17058: NatList = list_rev_tailcall(tail$10030, acc)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|1|$8971: Nat = if (B$410112) {
        head$3901
      } else {
        head$29
      }
      val NatList#Constructor(false)‚Üë@1|1|$7153: NatList = if (B$410117) {
        rec$17058
      } else if (B$410116) {
        tail$31
      } else if (B$410115) {
        acc
      } else if (B$410114) {
        tail$10030
      } else {
        Cons(Z, Cons(head$3901, tail$10030))
      }
      val NatList#Constructor(false)‚Üë@1|3|$4046: NatList = if (B$410121) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|1|$7153)
      } else if (B$410119) {
        Cons(Nat#Constructor(false)‚Üë@0|1|$8971, NatList#Constructor(false)‚Üë@1|1|$7153)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|1|$8971, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|3|$4013: Nat = S(S(if (B$410128) {
        head$3901
      } else {
        head$29
      }))
      if (B$410139) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|3|$4046)
      } else if (B$410137) {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4013, if (B$410135) {
          rec$17058
        } else if (B$410134) {
          tail$31
        } else if (B$410133) {
          acc
        } else if (B$410132) {
          tail$10030
        } else {
          Cons(Z, Cons(head$3901, tail$10030))
        })
      } else if (B$410124) {
        Cons(if (B$410110) {
          head$3901
        } else {
          head$29
        }, NatList#Constructor(false)‚Üë@1|3|$4046)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4013, Nil)
      }
    }
  }
  len(out) == len(Cons(Z, Cons(head$3901, tail$10030))) + len(acc) && (Cons(Z, Cons(head$3901, tail$10030)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(acc)) == Cons(h, acc)
  })
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$3901, tail$10030, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$3901, tail$10030), acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              val rec$17058: NatList = list_rev_tailcall(tail$10030, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$3901, tail$10030)), acc) && Ë∞∂Cons(Z, Cons(head$3901, tail$10030)) && ‚Üìlist_rev_tailcall(Cons(head$3901, tail$10030), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$3901, tail$10030) && ‚Üìlist_rev_tailcall(tail$10030, acc)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$3901, tail$10030))) + len(acc) && (Cons(Z, Cons(head$3901, tail$10030)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$2618: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(S(nat$2618), tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂S(nat$2618) && inactive(head$29)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /5,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$32319, tail$41826, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$32319, tail$41826), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$32319, tail$41826)), acc) && Ë∞∂Cons(Z, Cons(head$32319, tail$41826)) && ‚Üìlist_rev_tailcall(Cons(head$32319, tail$41826), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$32319, tail$41826)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$32319, tail$41826))) + len(acc) && (Cons(Z, Cons(head$32319, tail$41826)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$32320, tail$41827, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$32320, tail$41827))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Cons(head$32320, tail$41827)) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$32320, tail$41827)) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$32320, tail$41827)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Cons(head$32320, tail$41827)) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$32320, tail$41827))) == Cons(h, Cons(head$32320, tail$41827))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$31'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && (tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$32321: Nat = tail$31.head
[[34m  Info  [0m]                                    val tail$41828: NatList = tail$31.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Cons(head$32321, tail$41828)) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$32321, tail$41828) && inactive(tail$31)) && true
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Z && inactive(head$29) && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && (head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$2789: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(S(nat$2789), Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂S(nat$2789) && inactive(head$29)) && true
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$1074'] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'head$1074'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$1074'] - ‚ü¶ Œ± tail$1559, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$1559), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(Z, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$1559))) + len(acc) && (Cons(head$13, Cons(Z, tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$1074'] - ‚ü¶ Œ± nat$2855, tail$1559, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(S(nat$2855), tail$1559), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(S(nat$2855), tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(S(nat$2855), tail$1559)) && ‚Üìlist_rev_tailcall(Cons(S(nat$2855), tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(S(nat$2855), tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂S(nat$2855)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(S(nat$2855), tail$1559))) + len(acc) && (Cons(head$13, Cons(S(nat$2855), tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$1559, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$1559), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(Z, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(Z, tail$1559))) + len(acc) && (Cons(head$13, Cons(Z, tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$1559), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|1|$9330: Nat = if (B$426958) {
        head$13
      } else {
        head$29
      }
      val NatList#Constructor(false)‚Üë@1|1|$7388: NatList = if (B$426963) {
        rec$3068
      } else if (B$426962) {
        tail$31
      } else if (B$426961) {
        acc
      } else if (B$426960) {
        tail$1559
      } else {
        Cons(head$13, Cons(Z, tail$1559))
      }
      val NatList#Constructor(false)‚Üë@1|3|$4198: NatList = if (B$426967) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|1|$7388)
      } else if (B$426965) {
        Cons(Nat#Constructor(false)‚Üë@0|1|$9330, NatList#Constructor(false)‚Üë@1|1|$7388)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|1|$9330, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|3|$4159: Nat = S(S(if (B$426974) {
        head$13
      } else {
        head$29
      }))
      if (B$426985) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|3|$4198)
      } else if (B$426983) {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4159, if (B$426981) {
          rec$3068
        } else if (B$426980) {
          tail$31
        } else if (B$426979) {
          acc
        } else if (B$426978) {
          tail$1559
        } else {
          Cons(head$13, Cons(Z, tail$1559))
        })
      } else if (B$426970) {
        Cons(if (B$426956) {
          head$13
        } else {
          head$29
        }, NatList#Constructor(false)‚Üë@1|3|$4198)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4159, Nil)
      }
    }
  }
  len(out) == len(Cons(head$13, Cons(Z, tail$1559))) + len(acc) && (Cons(head$13, Cons(Z, tail$1559)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(acc)) == Cons(h, acc)
  })
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$1559, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(Z, tail$1559), acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(Z, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(Z, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(Z, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(Z, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(Z, tail$1559))) + len(acc) && (Cons(head$13, Cons(Z, tail$1559)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± head$1074, tail$1559, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(Z, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$1074, tail$1559))) + len(acc) && (Cons(Z, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$2856, head$1074, tail$1559, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(S(nat$2856), Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(S(nat$2856), Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂S(nat$2856)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$2856), Cons(head$1074, tail$1559))) + len(acc) && (Cons(S(nat$2856), Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1074, tail$1559, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(Z, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Cons(head$1074, tail$1559))) + len(acc) && (Cons(Z, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|1|$9584: Nat = if (B$443041) {
        head$1074
      } else {
        head$29
      }
      val NatList#Constructor(false)‚Üë@1|1|$7574: NatList = if (B$443046) {
        rec$3068
      } else if (B$443045) {
        tail$31
      } else if (B$443044) {
        acc
      } else if (B$443043) {
        tail$1559
      } else {
        Cons(Z, Cons(head$1074, tail$1559))
      }
      val NatList#Constructor(false)‚Üë@1|3|$4334: NatList = if (B$443050) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|1|$7574)
      } else if (B$443048) {
        Cons(Nat#Constructor(false)‚Üë@0|1|$9584, NatList#Constructor(false)‚Üë@1|1|$7574)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|1|$9584, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|3|$4277: Nat = S(S(if (B$443057) {
        head$1074
      } else {
        head$29
      }))
      if (B$443068) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|3|$4334)
      } else if (B$443066) {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4277, if (B$443064) {
          rec$3068
        } else if (B$443063) {
          tail$31
        } else if (B$443062) {
          acc
        } else if (B$443061) {
          tail$1559
        } else {
          Cons(Z, Cons(head$1074, tail$1559))
        })
      } else if (B$443053) {
        Cons(if (B$443039) {
          head$1074
        } else {
          head$29
        }, NatList#Constructor(false)‚Üë@1|3|$4334)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4277, Nil)
      }
    }
  }
  len(out) == len(Cons(Z, Cons(head$1074, tail$1559))) + len(acc) && (Cons(Z, Cons(head$1074, tail$1559)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(acc)) == Cons(h, acc)
  })
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$1074, tail$1559, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(Z, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Cons(head$1074, tail$1559))) + len(acc) && (Cons(Z, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /7,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                  head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$2857: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(S(nat$2857), tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂S(nat$2857) && inactive(head$29)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
  (head$29 == Z) && {
    val out: NatList = {
      {
        val Nat#Constructor(false)‚Üë@0|1|$9838: Nat = if (B$459643) {
          head$1074
        } else {
          head$13
        }
        val NatList#Constructor(false)‚Üë@1|1|$7760: NatList = if (B$459648) {
          rec$3068
        } else if (B$459647) {
          tail$31
        } else if (B$459646) {
          acc
        } else if (B$459645) {
          tail$1559
        } else {
          Cons(head$13, Cons(head$1074, tail$1559))
        }
        val NatList#Constructor(false)‚Üë@1|3|$4470: NatList = if (B$459652) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$7760)
        } else if (B$459650) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$9838, NatList#Constructor(false)‚Üë@1|1|$7760)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$9838, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|3|$4395: Nat = S(S(if (B$459659) {
          head$1074
        } else {
          head$13
        }))
        if (B$459670) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|3|$4470)
        } else if (B$459668) {
          Cons(Nat#Constructor(false)‚Üë@0|3|$4395, if (B$459666) {
            rec$3068
          } else if (B$459665) {
            tail$31
          } else if (B$459664) {
            acc
          } else if (B$459663) {
            tail$1559
          } else {
            Cons(head$13, Cons(head$1074, tail$1559))
          })
        } else if (B$459655) {
          Cons(if (B$459641) {
            head$1074
          } else {
            head$13
          }, NatList#Constructor(false)‚Üë@1|3|$4470)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|3|$4395, Nil)
        }
      }
    }
    len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
      case Nil =>
        true
      case Cons(h, t) =>
        lastn(out, 1 + len(acc)) == Cons(h, acc)
    })
  }
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$2866: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(S(nat$2866), tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂S(nat$2866) && inactive(head$29)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$29)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$3037, tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(S(nat$3037), tail$18), Nil) && Ë∞∂Cons(S(nat$3037), tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$29) && Ë∞∂S(nat$3037)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$3037), tail$18)) + len(Nil) && (Cons(S(nat$3037), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /5,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$33018, tail$46577, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$33018, tail$46577), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$33018, tail$46577)), acc) && Ë∞∂Cons(Z, Cons(head$33018, tail$46577)) && ‚Üìlist_rev_tailcall(Cons(head$33018, tail$46577), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Cons(head$33018, tail$46577)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$33018, tail$46577))) + len(acc) && (Cons(Z, Cons(head$33018, tail$46577)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Nil) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$33019, tail$46578, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$33019, tail$46578))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Cons(head$33019, tail$46578)) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$33019, tail$46578)) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Cons(head$33019, tail$46578)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Cons(head$33019, tail$46578)) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$33019, tail$46578))) == Cons(h, Cons(head$33019, tail$46578))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Nil) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$31'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$29 == Z) && (tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$33020: Nat = tail$31.head
[[34m  Info  [0m]                                    val tail$46579: NatList = tail$31.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Cons(head$33020, tail$46579)) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Cons(head$33020, tail$46579) && inactive(tail$31)) && true
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$29 == Z) && ((tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$11666, acc$0)] ‚ü¶ Œ± head$4080, tail$11666, head$13, acc
[[34m  Info  [0m]                                                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$4080, tail$11666), acc)
[[34m  Info  [0m]                                                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                                                (head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$4080, tail$11666)), acc) && Ë∞∂Cons(head$13, Cons(head$4080, tail$11666)) && ‚Üìlist_rev_tailcall(Cons(head$4080, tail$11666), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$4080, tail$11666)) && true)
[[34m  Info  [0m]                                                              }
[[34m  Info  [0m]                                                            œÜ len(out) == len(Cons(head$13, Cons(head$4080, tail$11666))) + len(acc) && (Cons(head$13, Cons(head$4080, tail$11666)) match {
[[34m  Info  [0m]                                                                case Nil =>
[[34m  Info  [0m]                                                                  true
[[34m  Info  [0m]                                                                case Cons(h, t) =>
[[34m  Info  [0m]                                                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                              })
[[34m  Info  [0m]                                                            x out
[[34m  Info  [0m]                                                          ‚üß /8,0/
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$11666, acc$0)] Decomposed into:
[[34m  Info  [0m] [Introduce calls list_rev_tailcall$0(tail$11666, acc$0)] - ‚ü¶ Œ± head$4080, tail$11666, head$13, acc
[[34m  Info  [0m]                                                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$4080, tail$11666), acc)
[[34m  Info  [0m]                                                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                                                  (head$29 == Z) && {
[[34m  Info  [0m]                                                                    val rec$17066: NatList = list_rev_tailcall(tail$11666, acc)
[[34m  Info  [0m]                                                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$4080, tail$11666)), acc) && Ë∞∂Cons(head$13, Cons(head$4080, tail$11666)) && ‚Üìlist_rev_tailcall(Cons(head$4080, tail$11666), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$4080, tail$11666) && ‚Üìlist_rev_tailcall(tail$11666, acc)) && true
[[34m  Info  [0m]                                                                  }
[[34m  Info  [0m]                                                                }
[[34m  Info  [0m]                                                              œÜ len(out) == len(Cons(head$13, Cons(head$4080, tail$11666))) + len(acc) && (Cons(head$13, Cons(head$4080, tail$11666)) match {
[[34m  Info  [0m]                                                                  case Nil =>
[[34m  Info  [0m]                                                                    true
[[34m  Info  [0m]                                                                  case Cons(h, t) =>
[[34m  Info  [0m]                                                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                                                })
[[34m  Info  [0m]                                                              x out
[[34m  Info  [0m]                                                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$4080, tail$11666, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$4080, tail$11666), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$29 == Z) && {
[[34m  Info  [0m]                                      val rec$17066: NatList = list_rev_tailcall(tail$11666, acc)
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$4080, tail$11666)), acc) && Ë∞∂Cons(head$13, Cons(head$4080, tail$11666)) && ‚Üìlist_rev_tailcall(Cons(head$4080, tail$11666), acc) && Ë∞∂Cons(Z, tail$31) && inactive(rec$9) && Ë∞∂Z && inactive(head$29) && Ë∞∂Cons(head$4080, tail$11666) && ‚Üìlist_rev_tailcall(tail$11666, acc)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$4080, tail$11666))) + len(acc) && (Cons(head$13, Cons(head$4080, tail$11666)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$4080, tail$11666), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  (head$29 == Z) && {
    val rec$17066: NatList = list_rev_tailcall(tail$11666, acc)
    val out: NatList = {
      {
        val Nat#Constructor(false)‚Üë@0|1|$10197: Nat = if (B$476822) {
          head$4080
        } else {
          head$13
        }
        val NatList#Constructor(false)‚Üë@1|1|$7995: NatList = if (B$476827) {
          rec$17066
        } else if (B$476826) {
          tail$31
        } else if (B$476825) {
          acc
        } else if (B$476824) {
          tail$11666
        } else {
          Cons(head$13, Cons(head$4080, tail$11666))
        }
        val NatList#Constructor(false)‚Üë@1|3|$4622: NatList = if (B$476831) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$7995)
        } else if (B$476829) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$10197, NatList#Constructor(false)‚Üë@1|1|$7995)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$10197, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|3|$4541: Nat = S(S(if (B$476838) {
          head$4080
        } else {
          head$13
        }))
        if (B$476849) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|3|$4622)
        } else if (B$476847) {
          Cons(Nat#Constructor(false)‚Üë@0|3|$4541, if (B$476845) {
            rec$17066
          } else if (B$476844) {
            tail$31
          } else if (B$476843) {
            acc
          } else if (B$476842) {
            tail$11666
          } else {
            Cons(head$13, Cons(head$4080, tail$11666))
          })
        } else if (B$476834) {
          Cons(if (B$476820) {
            head$4080
          } else {
            head$13
          }, NatList#Constructor(false)‚Üë@1|3|$4622)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|3|$4541, Nil)
        }
      }
    }
    len(out) == len(Cons(head$13, Cons(head$4080, tail$11666))) + len(acc) && (Cons(head$13, Cons(head$4080, tail$11666)) match {
      case Nil =>
        true
      case Cons(h, t) =>
        lastn(out, 1 + len(acc)) == Cons(h, acc)
    })
  }
}
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 1 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(S(head$4080), Cons(head$13, rec$17066)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'head$29'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$29'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && (head$29.isInstanceOf[S] && {
[[34m  Info  [0m]                                    val nat$3466: Nat = head$29.nat
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(S(nat$3466), Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && Ë∞∂S(nat$3466) && inactive(head$29)) && true
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13, tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), acc) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29)) && true))
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(acc) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /18,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true))
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$3536, tail$18, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(S(nat$3536), tail$18), acc) && Ë∞∂Cons(S(nat$3536), tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29) && Ë∞∂S(nat$3536)) && true))
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$3536), tail$18)) + len(acc) && (Cons(S(nat$3536), tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /6,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /12,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((head$29 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Z && inactive(head$29) && Ë∞∂Z) && true))
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$2041'] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$2041: Nat = rec$14.head
[[34m  Info  [0m]                                  val tail$4263: NatList = rec$14.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Cons(head$2041, tail$4263) && inactive(rec$14)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$2041'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$2041'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2041: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$4263: NatList = rec$14.tail
[[34m  Info  [0m]                                    (head$2041 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$4263) && inactive(rec$14) && Ë∞∂Z && inactive(head$2041)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$2041'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2041: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$4263: NatList = rec$14.tail
[[34m  Info  [0m]                                    head$2041.isInstanceOf[S] && {
[[34m  Info  [0m]                                      val nat$3598: Nat = head$2041.nat
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Cons(S(nat$3598), tail$4263) && inactive(rec$14) && Ë∞∂S(nat$3598) && inactive(head$2041)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2041: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$4263: NatList = rec$14.tail
[[34m  Info  [0m]                                    (head$2041 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$4263) && inactive(rec$14) && Ë∞∂Z && inactive(head$2041)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$2041: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$4263: NatList = rec$14.tail
[[34m  Info  [0m]                              (head$2041 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Z && Ë∞∂Cons(Z, tail$4263) && inactive(rec$14) && Ë∞∂Z && inactive(head$2041)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$913'] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                             Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                               rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                 val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(head$913, tail$1413) && inactive(rec$14) && Ë∞∂Z) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$913'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$913'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                               Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                 rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                   val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                   (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && Ë∞∂Z && inactive(head$913)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$913'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                               Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                 rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                   val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                   head$913.isInstanceOf[S] && {
[[34m  Info  [0m]                                     val nat$3829: Nat = head$913.nat
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(S(nat$3829), tail$1413) && inactive(rec$14) && Ë∞∂Z && Ë∞∂S(nat$3829) && inactive(head$913)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && Ë∞∂Z && inactive(head$913)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$913: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                              (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && Ë∞∂Z && inactive(head$913)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$22'] ‚ü¶ Œ± head$22, tail$25
[[34m  Info  [0m]                            Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                              rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$22, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$22, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && inactive(head$913)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$22, tail$25)) + len(Nil) && (Cons(head$22, tail$25) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'head$22'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$22'] - ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                  val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                  (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && inactive(head$913) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'head$22'] - ‚ü¶ Œ± nat$4000, tail$25
[[34m  Info  [0m]                              Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                  val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                  (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(S(nat$4000), tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(S(nat$4000), tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && inactive(head$913) && Ë∞∂S(nat$4000)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$4000), tail$25)) + len(Nil) && (Cons(S(nat$4000), tail$25) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                                Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                                  rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$913: Nat = rec$14.head
[[34m  Info  [0m]                                    val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                                    (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && inactive(head$913) && Ë∞∂Z) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$25
[[34m  Info  [0m]                          Œ† val rec$14: NatList = list_rev_tailcall(tail$25, Nil)
[[34m  Info  [0m]                            rec$14.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$913: Nat = rec$14.head
[[34m  Info  [0m]                              val tail$1413: NatList = rec$14.tail
[[34m  Info  [0m]                              (head$913 == Z) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$25), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$25) && ‚Üìlist_rev_tailcall(tail$25, Nil) && Ë∞∂Cons(Z, tail$1413) && inactive(rec$14) && Ë∞∂Z && inactive(head$913) && Ë∞∂Z) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$25)) + len(Nil) && (Cons(Z, tail$25) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$33378, tail$48726
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$33378, tail$48726), Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$33378, tail$48726)), Nil) && Ë∞∂Cons(Z, Cons(head$33378, tail$48726)) && ‚Üìlist_rev_tailcall(Cons(head$33378, tail$48726), Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9) && Ë∞∂Cons(head$33378, tail$48726)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$33378, tail$48726))) + len(Nil) && (Cons(Z, Cons(head$33378, tail$48726)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$2608'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, tail$2608) && inactive(rec$9)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$2608'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$2608'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$2608 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$2608)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$2608'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                    tail$2608.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                      val head$33379: Nat = tail$2608.head
[[34m  Info  [0m]                                      val tail$48727: NatList = tail$2608.tail
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, Cons(head$33379, tail$48727)) && inactive(rec$9) && Ë∞∂Cons(head$33379, tail$48727) && inactive(tail$2608)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$2608 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$2608)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$1470: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$2608: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$2608 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$1470, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$2608)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$34180, tail$53995
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$34180, tail$53995), Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$34180, tail$53995)), Nil) && Ë∞∂Cons(Z, Cons(head$34180, tail$53995)) && ‚Üìlist_rev_tailcall(Cons(head$34180, tail$53995), Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Cons(head$34180, tail$53995)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$34180, tail$53995))) + len(Nil) && (Cons(Z, Cons(head$34180, tail$53995)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$132'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, tail$132) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$132'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$132'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$132'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                   tail$132.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                     val head$34181: Nat = tail$132.head
[[34m  Info  [0m]                                     val tail$53996: NatList = tail$132.tail
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, Cons(head$34181, tail$53996)) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Cons(head$34181, tail$53996) && inactive(tail$132)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /5,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$34822, tail$59043, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$34822, tail$59043), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$34822, tail$59043)), acc) && Ë∞∂Cons(Z, Cons(head$34822, tail$59043)) && ‚Üìlist_rev_tailcall(Cons(head$34822, tail$59043), acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Cons(head$34822, tail$59043)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$34822, tail$59043))) + len(acc) && (Cons(Z, Cons(head$34822, tail$59043)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$34823, tail$59044, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$34823, tail$59044))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Cons(head$34823, tail$59044)) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$34823, tail$59044)) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Cons(head$34823, tail$59044)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Cons(head$34823, tail$59044)) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$34823, tail$59044))) == Cons(h, Cons(head$34823, tail$59044))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$145: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$145: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$132: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$132 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Z && Ë∞∂Cons(head$145, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$132) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$35468, tail$62956
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$35468, tail$62956), Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$35468, tail$62956)), Nil) && Ë∞∂Cons(Z, Cons(head$35468, tail$62956)) && ‚Üìlist_rev_tailcall(Cons(head$35468, tail$62956), Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9) && Ë∞∂Cons(head$35468, tail$62956)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$35468, tail$62956))) + len(Nil) && (Cons(Z, Cons(head$35468, tail$62956)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$4089'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, tail$4089) && inactive(rec$9)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$4089'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$4089'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$4089 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$4089)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$4089'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                    tail$4089.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                      val head$35469: Nat = tail$4089.head
[[34m  Info  [0m]                                      val tail$62957: NatList = tail$4089.tail
[[34m  Info  [0m]                                      (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, Cons(head$35469, tail$62957)) && inactive(rec$9) && Ë∞∂Cons(head$35469, tail$62957) && inactive(tail$4089)) && true
[[34m  Info  [0m]                                    }
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$4089 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$4089)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$2035: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$4089: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$4089 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Z && Ë∞∂Cons(head$2035, Nil) && inactive(rec$9) && Ë∞∂Nil && inactive(tail$4089)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$36035, tail$68104
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$36035, tail$68104), Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$36035, tail$68104)), Nil) && Ë∞∂Cons(Z, Cons(head$36035, tail$68104)) && ‚Üìlist_rev_tailcall(Cons(head$36035, tail$68104), Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$36035, tail$68104)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$36035, tail$68104))) + len(Nil) && (Cons(Z, Cons(head$36035, tail$68104)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$412'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Z) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$412'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$412'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   (tail$412 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$412)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$412'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   tail$412.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                     val head$36036: Nat = tail$412.head
[[34m  Info  [0m]                                     val tail$68105: NatList = tail$412.tail
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Cons(head$36036, tail$68105)) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Cons(head$36036, tail$68105) && inactive(tail$412)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$412 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$412)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$412 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$412)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'head$13'] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'head$13'] - ‚ü¶ Œ± nat$4123
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(S(nat$4123), Nil), Nil) && Ë∞∂Cons(S(nat$4123), Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂S(nat$4123)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(S(nat$4123), Nil)) + len(Nil) && (Cons(S(nat$4123), Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /2,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'head$434'] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(head$434, tail$412) && inactive(rec$9) && Ë∞∂Nil) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$434'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'head$434'] - ‚ü¶ Œ± head$13
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'head$434'] - ‚ü¶ Œ± head$13
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   head$434.isInstanceOf[S] && {
[[34m  Info  [0m]                                     val nat$4124: Nat = head$434.nat
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(S(nat$4124), tail$412) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂S(nat$4124) && inactive(head$434)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /3,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Nil && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$36736, tail$73306, head$13
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$36736, tail$73306), Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                  (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$36736, tail$73306)), Nil) && Ë∞∂Cons(head$13, Cons(head$36736, tail$73306)) && ‚Üìlist_rev_tailcall(Cons(head$36736, tail$73306), Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Cons(head$36736, tail$73306)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$36736, tail$73306))) + len(Nil) && (Cons(head$13, Cons(head$36736, tail$73306)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /3,0/
[[33mWarning [0m] Solver could not solve path-condition
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± head$13
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$434: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                              (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, Nil), Nil) && Ë∞∂Cons(head$13, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Nil)) + len(Nil) && (Cons(head$13, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /3,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$412'] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                 (head$434 == Z) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, tail$412) && inactive(rec$9) && Ë∞∂Z && inactive(head$434)) && true)
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$412'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$412'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$434 == Z) && ((tail$412 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Nil && inactive(tail$412)) && true))
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$412'] - ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                   (head$434 == Z) && (tail$412.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                     val head$36737: Nat = tail$412.head
[[34m  Info  [0m]                                     val tail$73307: NatList = tail$412.tail
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Cons(head$36737, tail$73307)) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Cons(head$36737, tail$73307) && inactive(tail$412)) && true
[[34m  Info  [0m]                                   })
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$13, tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$434: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$412: NatList = rec$9.tail
[[34m  Info  [0m]                                    (head$434 == Z) && ((tail$412 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, tail$18), Nil) && Ë∞∂Cons(head$13, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Nil && Ë∞∂Cons(Z, Nil) && inactive(rec$9) && Ë∞∂Z && inactive(head$434) && Ë∞∂Nil && inactive(tail$412)) && true))
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, tail$18)) + len(Nil) && (Cons(head$13, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(head$13, Cons(head$13, Nil)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± ()
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /1,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$38481, tail$77989
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$38481, tail$77989), Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(Z, Cons(head$38481, tail$77989)), Nil) && Ë∞∂Cons(Z, Cons(head$38481, tail$77989)) && ‚Üìlist_rev_tailcall(Cons(head$38481, tail$77989), Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$38481, tail$77989)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$38481, tail$77989))) + len(Nil) && (Cons(Z, Cons(head$38481, tail$77989)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /3,0/
[[34m  Info  [0m] [Ground              ] ‚ü¶ Œ± ()
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Nil, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(Z, Nil), Nil) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, Nil)) + len(Nil) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /1,0/
[[34m  Info  [0m] [Ground              ] Solved  with:  ‚ü® true |  Cons(Z, Nil) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$31'] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$38482: Nat = tail$31.head
[[34m  Info  [0m]                                    val tail$77990: NatList = tail$31.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Cons(head$38482, tail$77990)) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Cons(head$38482, tail$77990) && inactive(tail$31)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$18'] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /5,0/
[[34m  Info  [0m] [ADT Split on 'tail$18'] - ‚ü¶ Œ± head$39288, tail$83063, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$39288, tail$83063), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Cons(head$39288, tail$83063)), acc) && Ë∞∂Cons(Z, Cons(head$39288, tail$83063)) && ‚Üìlist_rev_tailcall(Cons(head$39288, tail$83063), acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Cons(head$39288, tail$83063)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(Z, Cons(head$39288, tail$83063))) + len(acc) && (Cons(Z, Cons(head$39288, tail$83063)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /7,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, Nil), acc) && Ë∞∂Cons(Z, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, Nil)) + len(acc) && (Cons(Z, Nil) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /5,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(Z, acc) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± tail$18, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), acc) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(acc) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /12,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$39289, tail$83064, tail$18
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Cons(head$39289, tail$83064))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Cons(head$39289, tail$83064)) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Cons(head$39289, tail$83064)) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Cons(head$39289, tail$83064)) && true)
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(Z, tail$18)) + len(Cons(head$39289, tail$83064)) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$39289, tail$83064))) == Cons(h, Cons(head$39289, tail$83064))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Failed
[[34m  Info  [0m] [Optimistic Ground   ] ‚ü¶ Œ± tail$18
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(tail$18, Nil)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(Z, tail$18), Nil) && Ë∞∂Cons(Z, tail$18) && ‚Üìlist_rev_tailcall(tail$18, Nil) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Z && Ë∞∂Nil && inactive(tail$31) && Ë∞∂Nil) && true)
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(Z, tail$18)) + len(Nil) && (Cons(Z, tail$18) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /4,0/
[[34m  Info  [0m] [Optimistic Ground   ] Failed
[[34m  Info  [0m] [ADT Split on 'tail$1559'] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                  (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'tail$1559'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$1559'] - ‚ü¶ Œ± head$1074, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, Nil), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, Nil)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$1074, Nil), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$1074, Nil))) + len(acc) && (Cons(head$13, Cons(head$1074, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
[[34m  Info  [0m] [ADT Split on 'tail$1559'] - ‚ü¶ Œ± head$39635, tail$85255, head$1074, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, Cons(head$39635, tail$85255)), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(Cons(head$39635, tail$85255), acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, Cons(head$39635, tail$85255))), acc) && Ë∞∂Cons(head$13, Cons(head$1074, Cons(head$39635, tail$85255))) && ‚Üìlist_rev_tailcall(Cons(head$1074, Cons(head$39635, tail$85255)), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, Cons(head$39635, tail$85255)) && ‚Üìlist_rev_tailcall(Cons(head$39635, tail$85255), acc) && Ë∞∂Cons(head$39635, tail$85255)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$1074, Cons(head$39635, tail$85255)))) + len(acc) && (Cons(head$13, Cons(head$1074, Cons(head$39635, tail$85255))) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /1,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1074, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, Nil), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(Nil, acc)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, Nil)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, Nil)) && ‚Üìlist_rev_tailcall(Cons(head$1074, Nil), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, Nil) && ‚Üìlist_rev_tailcall(Nil, acc) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$1074, Nil))) + len(acc) && (Cons(head$13, Cons(head$1074, Nil)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /7,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, Nil), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(Nil, acc)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|1|$10760: Nat = if (B$494921) {
        head$13
      } else if (B$494920) {
        head$1074
      } else {
        head$29
      }
      val NatList#Constructor(false)‚Üë@1|1|$8326: NatList = if (B$494925) {
        rec$3068
      } else if (B$494924) {
        tail$31
      } else if (B$494923) {
        acc
      } else {
        Cons(head$13, Cons(head$1074, Nil))
      }
      val NatList#Constructor(false)‚Üë@1|3|$4805: NatList = if (B$494929) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|1|$8326)
      } else if (B$494927) {
        Cons(Nat#Constructor(false)‚Üë@0|1|$10760, NatList#Constructor(false)‚Üë@1|1|$8326)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|1|$10760, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|3|$4740: Nat = S(S(if (B$494938) {
        head$13
      } else if (B$494937) {
        head$1074
      } else {
        head$29
      }))
      if (B$494948) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|3|$4805)
      } else if (B$494946) {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4740, if (B$494944) {
          rec$3068
        } else if (B$494943) {
          tail$31
        } else if (B$494942) {
          acc
        } else {
          Cons(head$13, Cons(head$1074, Nil))
        })
      } else if (B$494932) {
        Cons(if (B$494918) {
          head$13
        } else if (B$494917) {
          head$1074
        } else {
          head$29
        }, NatList#Constructor(false)‚Üë@1|3|$4805)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4740, Nil)
      }
    }
  }
  len(out) == len(Cons(head$13, Cons(head$1074, Nil))) + len(acc) && (Cons(head$13, Cons(head$1074, Nil)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(acc)) == Cons(h, acc)
  })
}
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, Nil), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(Nil, acc)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|2|$4193: Nat = S(if (B$511367) {
        head$13
      } else if (B$511366) {
        head$1074
      } else {
        head$29
      })
      val NatList#Constructor(false)‚Üë@1|4|$500: NatList = if (B$511374) {
        Cons(Nat#Constructor(false)‚Üë@0|2|$4193, if (B$511372) {
          rec$3068
        } else if (B$511371) {
          tail$31
        } else if (B$511370) {
          acc
        } else {
          Cons(head$13, Cons(head$1074, Nil))
        })
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|2|$4193, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|1|$10995: Nat = if (B$511384) {
        head$13
      } else if (B$511383) {
        head$1074
      } else {
        head$29
      }
      val NatList#Constructor(false)‚Üë@1|1|$8512: NatList = if (B$511388) {
        rec$3068
      } else if (B$511387) {
        tail$31
      } else if (B$511386) {
        acc
      } else {
        Cons(head$13, Cons(head$1074, Nil))
      }
      val Nat#Constructor(false)‚Üë@0|4|$487: Nat = S(S(S(if (B$511402) {
        head$13
      } else if (B$511401) {
        head$1074
      } else {
        head$29
      })))
      if (B$511413) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|4|$500)
      } else if (B$511411) {
        Cons(Nat#Constructor(false)‚Üë@0|4|$487, if (B$511409) {
          rec$3068
        } else if (B$511408) {
          tail$31
        } else if (B$511407) {
          acc
        } else {
          Cons(head$13, Cons(head$1074, Nil))
        })
      } else if (B$511395) {
        Cons(S(if (B$511380) {
          head$13
        } else if (B$511379) {
          head$1074
        } else {
          head$29
        }), if (B$511392) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$8512)
        } else if (B$511390) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$10995, NatList#Constructor(false)‚Üë@1|1|$8512)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$10995, Nil)
        })
      } else if (B$511378) {
        Cons(if (B$511361) {
          head$13
        } else if (B$511360) {
          head$1074
        } else {
          head$29
        }, NatList#Constructor(false)‚Üë@1|4|$500)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|4|$487, Nil)
      }
    }
  }
  len(out) == len(Cons(head$13, Cons(head$1074, Nil))) + len(acc) && (Cons(head$13, Cons(head$1074, Nil)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(acc)) == Cons(h, acc)
  })
}
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 9 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(S(S(head$13)), Cons(head$13, tail$31)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'acc'  ] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                          Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                            rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                              val head$29: Nat = rec$9.head
[[34m  Info  [0m]                              val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                              val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                              (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                            }
[[34m  Info  [0m]                          œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                              case Nil =>
[[34m  Info  [0m]                                true
[[34m  Info  [0m]                              case Cons(h, t) =>
[[34m  Info  [0m]                                lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                            })
[[34m  Info  [0m]                          x out
[[34m  Info  [0m]                        ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$1074, tail$1559, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), Nil)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                val rec$3068: NatList = list_rev_tailcall(tail$1559, Nil)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), Nil) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(Nil) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [ADT Split on 'acc'  ] - ‚ü¶ Œ± head$39636, tail$85256, head$1074, tail$1559, head$13
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), Cons(head$39636, tail$85256))
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                val rec$3068: NatList = list_rev_tailcall(tail$1559, Cons(head$39636, tail$85256))
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), Cons(head$39636, tail$85256)) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), Cons(head$39636, tail$85256)) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, Cons(head$39636, tail$85256)) && Ë∞∂Cons(head$39636, tail$85256)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(Cons(head$39636, tail$85256)) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(Cons(head$39636, tail$85256))) == Cons(h, Cons(head$39636, tail$85256))
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /4,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1074, tail$1559, head$13
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), Nil)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, Nil)
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), Nil) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), Nil) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, Nil) && Ë∞∂Nil) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(Nil) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /4,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), Nil)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(tail$1559, Nil)
  val out: NatList = {
    {
      val Nat#Constructor(false)‚Üë@0|1|$11275: Nat = if (B$547057) {
        head$13
      } else if (B$547056) {
        head$1074
      } else {
        head$29
      }
      val NatList#Constructor(false)‚Üë@1|1|$8737: NatList = if (B$547061) {
        rec$3068
      } else if (B$547060) {
        tail$31
      } else if (B$547059) {
        tail$1559
      } else {
        Cons(head$13, Cons(head$1074, tail$1559))
      }
      val NatList#Constructor(false)‚Üë@1|3|$4950: NatList = if (B$547065) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|1|$8737)
      } else if (B$547063) {
        Cons(Nat#Constructor(false)‚Üë@0|1|$11275, NatList#Constructor(false)‚Üë@1|1|$8737)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|1|$11275, Nil)
      }
      val Nat#Constructor(false)‚Üë@0|3|$4858: Nat = S(S(if (B$547074) {
        head$13
      } else if (B$547073) {
        head$1074
      } else {
        head$29
      }))
      if (B$547084) {
        Cons(Z, NatList#Constructor(false)‚Üë@1|3|$4950)
      } else if (B$547082) {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4858, if (B$547080) {
          rec$3068
        } else if (B$547079) {
          tail$31
        } else if (B$547078) {
          tail$1559
        } else {
          Cons(head$13, Cons(head$1074, tail$1559))
        })
      } else if (B$547068) {
        Cons(if (B$547054) {
          head$13
        } else if (B$547053) {
          head$1074
        } else {
          head$29
        }, NatList#Constructor(false)‚Üë@1|3|$4950)
      } else {
        Cons(Nat#Constructor(false)‚Üë@0|3|$4858, Nil)
      }
    }
  }
  len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(Nil) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
    case Nil =>
      true
    case Cons(h, t) =>
      lastn(out, 1 + len(Nil)) == Cons(h, Nil)
  })
}
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting expression
[[34m  Info  [0m] STE could not prove the validity of the resulting 3 expression(s)
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved (untrusted) with:  ‚ü® true |  Cons(S(head$29), Cons(head$13, rec$3068)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'tail$31'] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                            Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                              rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                              }
[[34m  Info  [0m]                            œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                case Nil =>
[[34m  Info  [0m]                                  true
[[34m  Info  [0m]                                case Cons(h, t) =>
[[34m  Info  [0m]                                  lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                              })
[[34m  Info  [0m]                            x out
[[34m  Info  [0m]                          ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                  (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'tail$31'] - ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                              Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                  val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                  val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                  tail$31.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$39637: Nat = tail$31.head
[[34m  Info  [0m]                                    val tail$85257: NatList = tail$31.tail
[[34m  Info  [0m]                                    (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, Cons(head$39637, tail$85257)) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Cons(head$39637, tail$85257) && inactive(tail$31)) && true
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                }
[[34m  Info  [0m]                              œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                  case Nil =>
[[34m  Info  [0m]                                    true
[[34m  Info  [0m]                                  case Cons(h, t) =>
[[34m  Info  [0m]                                    lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                })
[[34m  Info  [0m]                              x out
[[34m  Info  [0m]                            ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                    (tail$31 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, Nil) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Nil && inactive(tail$31)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
  (tail$31 == Nil) && {
    val out: NatList = {
      {
        val Nat#Constructor(false)‚Üë@0|1|$11517: Nat = if (B$565532) {
          head$13
        } else if (B$565531) {
          head$1074
        } else {
          head$29
        }
        val NatList#Constructor(false)‚Üë@1|1|$8927: NatList = if (B$565536) {
          rec$3068
        } else if (B$565535) {
          acc
        } else if (B$565534) {
          tail$1559
        } else {
          Cons(head$13, Cons(head$1074, tail$1559))
        }
        val NatList#Constructor(false)‚Üë@1|3|$5093: NatList = if (B$565540) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$8927)
        } else if (B$565538) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$11517, NatList#Constructor(false)‚Üë@1|1|$8927)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$11517, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|3|$4972: Nat = S(S(if (B$565549) {
          head$13
        } else if (B$565548) {
          head$1074
        } else {
          head$29
        }))
        if (B$565559) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|3|$5093)
        } else if (B$565557) {
          Cons(Nat#Constructor(false)‚Üë@0|3|$4972, if (B$565555) {
            rec$3068
          } else if (B$565554) {
            acc
          } else if (B$565553) {
            tail$1559
          } else {
            Cons(head$13, Cons(head$1074, tail$1559))
          })
        } else if (B$565543) {
          Cons(if (B$565529) {
            head$13
          } else if (B$565528) {
            head$1074
          } else {
            head$29
          }, NatList#Constructor(false)‚Üë@1|3|$5093)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|3|$4972, Nil)
        }
      }
    }
    len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
      case Nil =>
        true
      case Cons(h, t) =>
        lastn(out, 1 + len(acc)) == Cons(h, acc)
    })
  }
}
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] Solved  with:  ‚ü® true |  Cons(S(head$29), Cons(head$13, rec$3068)) ‚ü©
[[34m  Info  [0m] 
[[34m  Info  [0m] [ADT Split on 'rec$3068'] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                             Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                               rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                 val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                 val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                 val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                 (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc)) && true
[[34m  Info  [0m]                               }
[[34m  Info  [0m]                             œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                 case Nil =>
[[34m  Info  [0m]                                   true
[[34m  Info  [0m]                                 case Cons(h, t) =>
[[34m  Info  [0m]                                   lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                               })
[[34m  Info  [0m]                             x out
[[34m  Info  [0m]                           ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'rec$3068'] Decomposed into:
[[34m  Info  [0m] [ADT Split on 'rec$3068'] - ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                   val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                   (rec$3068 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Nil && inactive(rec$3068)) && true)
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /8,0/
[[34m  Info  [0m] [ADT Split on 'rec$3068'] - ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                               Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                 rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                   val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                   val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                   val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                   rec$3068.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                     val head$39638: Nat = rec$3068.head
[[34m  Info  [0m]                                     val tail$85258: NatList = rec$3068.tail
[[34m  Info  [0m]                                     (‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Cons(head$39638, tail$85258) && inactive(rec$3068)) && true
[[34m  Info  [0m]                                   }
[[34m  Info  [0m]                                 }
[[34m  Info  [0m]                               œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                   case Nil =>
[[34m  Info  [0m]                                     true
[[34m  Info  [0m]                                   case Cons(h, t) =>
[[34m  Info  [0m]                                     lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                 })
[[34m  Info  [0m]                               x out
[[34m  Info  [0m]                             ‚üß /8,0/
[[34m  Info  [0m] [Symbolic Term Expl. (1->7)] ‚ü¶ Œ± head$1074, tail$1559, head$13, acc
[[34m  Info  [0m]                                Œ† val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
[[34m  Info  [0m]                                  rec$9.isInstanceOf[Cons] && {
[[34m  Info  [0m]                                    val head$29: Nat = rec$9.head
[[34m  Info  [0m]                                    val tail$31: NatList = rec$9.tail
[[34m  Info  [0m]                                    val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
[[34m  Info  [0m]                                    (rec$3068 == Nil) && ((‚Üìlist_rev_tailcall(Cons(head$13, Cons(head$1074, tail$1559)), acc) && Ë∞∂Cons(head$13, Cons(head$1074, tail$1559)) && ‚Üìlist_rev_tailcall(Cons(head$1074, tail$1559), acc) && Ë∞∂Cons(head$29, tail$31) && inactive(rec$9) && Ë∞∂Cons(head$1074, tail$1559) && ‚Üìlist_rev_tailcall(tail$1559, acc) && Ë∞∂Nil && inactive(rec$3068)) && true)
[[34m  Info  [0m]                                  }
[[34m  Info  [0m]                                œÜ len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
[[34m  Info  [0m]                                    case Nil =>
[[34m  Info  [0m]                                      true
[[34m  Info  [0m]                                    case Cons(h, t) =>
[[34m  Info  [0m]                                      lastn(out, 1 + len(acc)) == Cons(h, acc)
[[34m  Info  [0m]                                  })
[[34m  Info  [0m]                                x out
[[34m  Info  [0m]                              ‚üß /8,0/
val rec$9: NatList = list_rev_tailcall(Cons(head$1074, tail$1559), acc)
rec$9.isInstanceOf[Cons] && {
  val head$29: Nat = rec$9.head
  val tail$31: NatList = rec$9.tail
  val rec$3068: NatList = list_rev_tailcall(tail$1559, acc)
  (rec$3068 == Nil) && {
    val out: NatList = {
      {
        val Nat#Constructor(false)‚Üë@0|1|$11759: Nat = if (B$583926) {
          head$13
        } else if (B$583925) {
          head$1074
        } else {
          head$29
        }
        val NatList#Constructor(false)‚Üë@1|1|$9117: NatList = if (B$583930) {
          tail$31
        } else if (B$583929) {
          acc
        } else if (B$583928) {
          tail$1559
        } else {
          Cons(head$13, Cons(head$1074, tail$1559))
        }
        val NatList#Constructor(false)‚Üë@1|3|$5236: NatList = if (B$583934) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|1|$9117)
        } else if (B$583932) {
          Cons(Nat#Constructor(false)‚Üë@0|1|$11759, NatList#Constructor(false)‚Üë@1|1|$9117)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|1|$11759, Nil)
        }
        val Nat#Constructor(false)‚Üë@0|3|$5086: Nat = S(S(if (B$583943) {
          head$13
        } else if (B$583942) {
          head$1074
        } else {
          head$29
        }))
        if (B$583953) {
          Cons(Z, NatList#Constructor(false)‚Üë@1|3|$5236)
        } else if (B$583951) {
          Cons(Nat#Constructor(false)‚Üë@0|3|$5086, if (B$583949) {
            tail$31
          } else if (B$583948) {
            acc
          } else if (B$583947) {
            tail$1559
          } else {
            Cons(head$13, Cons(head$1074, tail$1559))
          })
        } else if (B$583937) {
          Cons(if (B$583923) {
            head$13
          } else if (B$583922) {
            head$1074
          } else {
            head$29
          }, NatList#Constructor(false)‚Üë@1|3|$5236)
        } else {
          Cons(Nat#Constructor(false)‚Üë@0|3|$5086, Nil)
        }
      }
    }
    len(out) == len(Cons(head$13, Cons(head$1074, tail$1559))) + len(acc) && (Cons(head$13, Cons(head$1074, tail$1559)) match {
      case Nil =>
        true
      case Cons(h, t) =>
        lastn(out, 1 + len(acc)) == Cons(h, acc)
    })
  }
}