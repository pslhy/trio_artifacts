data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure last :: NatList -> Nat where
  Nil -> Z
  Cons h t -> if t == Nil then h else last t
  
list_snoc :: l:NatList -> n:Nat -> { NatList | 

   (len _v == len l + 1) && last _v == n

}
list_snoc = ??
