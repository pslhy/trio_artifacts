data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatTree where
  Leaf :: NatTree
  Node :: NatTree -> Nat -> NatTree -> NatTree

termination measure sizeTree :: NatTree -> {Int | _v >= 0} where
  Leaf -> 0
  Node left x right -> 1 + sizeTree left + sizeTree right

data Cmp where
  LT :: Cmp
  EQ :: Cmp
  GT :: Cmp
  
nat_compare :: Nat -> Nat -> Cmp
nat_compare = \n1 . \n2 .
  match n1 with
    Z ->
      match n2 with
        Z   -> EQ
        S _ -> LT
    S m1 ->
      match n2 with
        Z    -> GT
        S m2 -> nat_compare m1 m2

measure elems :: NatTree -> Set Nat where
  Leaf -> []
  Node l x r -> (elems l) + [x] + (elems r)

data NatOption where
    None :: NatOption
    Some :: Nat -> NatOption

measure get_val :: NatOption -> Nat where
    None -> Z
    Some n -> n

data Triple a b c where
    T :: a -> b -> c -> Triple a b c

measure fstT :: Triple a b c -> a where
    T x y z -> x

measure sndT :: Triple a b c -> b where
    T x y z -> y

measure trdT :: Triple a b c -> c where
    T x y z -> z

data NatOPair where
    P :: Nat -> NatOption -> NatOPair

measure fstP :: NatOPair -> Nat where
    P x y -> x

measure sndP :: NatOPair -> NatOption where
    P x y -> y

measure is_above :: NatOPair -> Bool where
    P x y ->
      if y == None then True else
      (dec x) >= (dec (get_val y))

measure is_below :: NatOPair -> Bool where
    P x y ->
      if y == None then True else
      (dec x) <= (dec (get_val y))

measure extract_if_nonempty :: NatOPair -> Nat where
    P x y ->
      if y == None then x else get_val y

measure tree_ordered_str :: NatTree -> Triple NatOption Bool NatOption where
    Leaf -> T None True None
    Node l x r ->
      if sndT (tree_ordered_str l) && sndT (tree_ordered_str r) then
        if is_above (P x (trdT (tree_ordered_str l))) && is_below (P x (fstT (tree_ordered_str r))) then
          T (Some (extract_if_nonempty (P x (fstT (tree_ordered_str l))))) True (Some (extract_if_nonempty (P x (trdT (tree_ordered_str r)))))
        else
          T None False None
      else
        T None False None
  
tree_binsert :: t:NatTree -> n:Nat -> { NatTree | 

  (elems t + [n] == elems _v) &&
  (sndT (tree_ordered_str t) ==> sndT (tree_ordered_str _v))

}
tree_binsert = ??