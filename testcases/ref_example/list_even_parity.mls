type bool =
  | True
  | False

type list =
  | Nil
  | Cons of bool * list

synth list -> bool satisfying

[Nil] -> True,
[Cons(False,Nil)] -> True,
[Cons(True,Nil)] -> False,
[Cons(False,Cons(False,Nil))] -> True,
[Cons(False,Cons(True,Nil))] -> False,
[Cons(True,Cons(False,Nil))] -> False,
[Cons(True,Cons(True,Nil))] -> True,
[Cons(True,Cons(True,Cons(True,Nil)))] -> False,

equiv

fix (f : list -> bool) =
  fun (x:list) ->
    match x with
      | Nil -> True
      | Cons (h,t) ->
        (match h with
           | True -> f t
           | False -> (match f t with
                         | True -> False
                         | False -> True))