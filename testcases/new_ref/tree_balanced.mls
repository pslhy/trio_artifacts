type nat =
  | O
  | S of nat

type tree =
  | Leaf
  | Node of nat * tree * tree

type bool =
  | True
  | False

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1 -> (match x2 with
                | O -> GT
                | S x2 -> compare x1 x2)
;;

let max =
  fix (max : nat -> nat -> nat) =
    fun (x:nat) ->
     fun (y:nat) ->
      match (compare x y) with
        | LT _ -> x
        | EQ _ -> x
        | GT _ -> y
;;

let height =
  fix (height : tree -> nat) =
    fun (x : tree) ->
      match x with
      | Leaf _ -> O
      | Node y -> match y.1 with
                | Leaf _ -> S((height (y.2)))
                | Node z -> match y.2 with
                             | Leaf _ -> S((height (y.1)))
                             | Node w -> S(max (height (y.1)) (height (y.2)))
;;

synth tree -> bool satisfying

equiv

fix (f : tree -> bool) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> True
      | Node (v,l,r) -> 
        (match l with
         | Leaf _ -> match r with
                     | Leaf -> True
                     | Node (v2,l2,r2) ->
         | Node _ -> (match compare
                            (height
                                (Un_Node (Un_Node x . 1) . 2))
                            1 with
                    | EQ _ -> True
                    | GT _ -> False
                    | LT _ -> (match Un_Node (Un_Node x . 1)
                                        . 1 with
                                    | Leaf _ -> True
                                    | Node _ -> False)))