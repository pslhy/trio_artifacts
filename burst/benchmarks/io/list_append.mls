type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> list -> list satisfying

[Nil,Nil] -> Nil,
[Cons(1,Cons(0,Nil)),Nil] -> Cons(1,Cons(0,Nil)),
[Cons(0,Nil),Cons(0,Nil)] -> Cons(0,Cons(0,Nil)),
[Cons(1,Cons(0,Nil)),Cons(0,Nil)] -> Cons(1,Cons(0,Cons(0,Nil))),
[Nil,Nil] -> Nil,
[Nil,Cons(3,Cons(1,Nil))] -> Cons(3,Cons(1,Nil)),
[Cons(1,Cons(1,Nil)),Nil] -> Cons(1,Cons(1,Nil)),
[Cons(1,Cons(2,Nil)),Cons(3,Cons(4,Nil))] -> Cons(1,Cons(2,Cons(3,Cons(4,Nil)))),