[[33mWarning [0m] warning: there was one feature warning; re-run with -feature for details
[[34m  Info  [0m] Output written on leon.out
[[34m  Info  [0m] Output written on leon.out
[[34m  Info  [0m]  - Now considering 'postcondition' VC for primeStream$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for isPrimeRec$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call isPrimeRec$5(i - BigInt(1), n))' VC for isPrimeRec$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'division by zero' VC for isPrimeRec$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for isPrimeNum$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call isPrimeRec$5(n - BigInt(1), n))' VC for isPrimeNum$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for nextElem$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call isPrimeNum$5(i))' VC for nextElem$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for isPrimeS$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for isPrimeS$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for primesUntilN$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call takeRec$5(BigInt(0), n - BigInt(2), prim ...)' VC for primesUntilN$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for takeRec$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call isPrimeS$5(s, i + BigInt(2)))' VC for takeRec$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call c$15.tail-mem$3(st@))' VC for takeRec$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call takeRec$5(i + BigInt(1), n, dres$0._1, d ...)' VC for takeRec$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for takeRec$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for concUntil$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call c$16.tail-mem$3(uiState$2))' VC for concUntil$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for concUntil$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for tail-mem$3 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'cast correctness' VC for tail-mem$3 @?:?...
[[34m  Info  [0m]  => VALID
  ┌──────────────────────┐
╔═╡ Verification Summary ╞═════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ └──────────────────────┘                                                                                                             ║
║ RunningExample.concUntil$5     match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.038 ║
║ RunningExample.concUntil$5     postcondition                                                 ?:?  valid  U:orb-smt-orb-cvc4    0.052 ║
║ RunningExample.concUntil$5     precond. (call c$16.tail-mem$3(uiState$2))                    ?:?  valid  U:orb-smt-z3          0.041 ║
║ RunningExample.isPrimeNum$5    postcondition                                                 ?:?  valid  U:orb-smt-z3          0.042 ║
║ RunningExample.isPrimeNum$5    precond. (call isPrimeRec$5(n - BigInt(1), n))                ?:?  valid  U:orb-smt-orb-cvc4    0.036 ║
║ RunningExample.isPrimeRec$5    division by zero                                              ?:?  valid  U:orb-smt-orb-cvc4    0.042 ║
║ RunningExample.isPrimeRec$5    postcondition                                                 ?:?  valid  U:orb-smt-z3          0.070 ║
║ RunningExample.isPrimeRec$5    precond. (call isPrimeRec$5(i - BigInt(1), n))                ?:?  valid  U:orb-smt-z3          0.049 ║
║ RunningExample.isPrimeS$5      match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.037 ║
║ RunningExample.isPrimeS$5      postcondition                                                 ?:?  valid  U:orb-smt-z3          0.041 ║
║ RunningExample.nextElem$5      postcondition                                                 ?:?  valid  U:orb-smt-z3          0.045 ║
║ RunningExample.nextElem$5      precond. (call isPrimeNum$5(i))                               ?:?  valid  U:orb-smt-z3          0.034 ║
║ RunningExample.primeStream$5   postcondition                                                 ?:?  valid  U:orb-smt-orb-cvc4    0.149 ║
║ RunningExample.primesUntilN$5  postcondition                                                 ?:?  valid  U:orb-smt-z3          0.147 ║
║ RunningExample.primesUntilN$5  precond. (call takeRec$5(BigInt(0), n - BigInt(2), prim ...)  ?:?  valid  U:orb-smt-z3          0.070 ║
║ Stream.tail-mem$3              cast correctness                                              ?:?  valid  U:orb-smt-z3          0.034 ║
║ Stream.tail-mem$3              postcondition                                                 ?:?  valid  U:orb-smt-orb-cvc4    0.059 ║
║ RunningExample.takeRec$5       match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.039 ║
║ RunningExample.takeRec$5       postcondition                                                 ?:?  valid  U:orb-smt-z3          0.204 ║
║ RunningExample.takeRec$5       precond. (call c$15.tail-mem$3(st@))                          ?:?  valid  U:orb-smt-z3          0.041 ║
║ RunningExample.takeRec$5       precond. (call isPrimeS$5(s, i + BigInt(2)))                  ?:?  valid  U:orb-smt-z3          0.032 ║
║ RunningExample.takeRec$5       precond. (call takeRec$5(i + BigInt(1), n, dres$0._1, d ...)  ?:?  valid  U:orb-smt-z3          0.093 ║
╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
║ total: 22     valid: 22     invalid: 0      unknown 0                                                                          1.395 ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Output written on leon.out
[[34m  Info  [0m] - considering function isPrimeRec-steps...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeRec-steps-->(0 * i + 1 * x$1$32._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.006s
[[34m  Info  [0m] Function: isPrimeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 8 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeRec-steps-->(-1 * i + 8 * x$1$32._2) + -39 <= 0
[[34m  Info  [0m] checked VC inst... in 0.004s
[[34m  Info  [0m] Function: isPrimeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 11 + 9
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeRec-steps-->(-1 * i + 8 * x$1$32._2) + -88 <= 0
[[34m  Info  [0m] checked VC inst... in 0.006s
[[34m  Info  [0m] Function: isPrimeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 16 + 20
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeRec-steps-->(0 * i + 1 * x$1$32._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.011s
[[34m  Info  [0m] Function: isPrimeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 8 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeRec-steps-->(-1 * i + 8 * x$1$32._2) + -39 <= 0
[[34m  Info  [0m] checked VC inst... in 0.011s
[[34m  Info  [0m] Function: isPrimeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 13 + 9
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeRec-steps-->(-71 * i + 8 * x$1$32._2) + -1 <= 0
[[34m  Info  [0m] checked VC inst... in 0.008s
[[34m  Info  [0m] Function: isPrimeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 22 + 22
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeRec-steps-->(-12 * i + 1 * x$1$32._2) + 8 <= 0
[[34m  Info  [0m] checked VC inst... in 0.004s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeRec-steps-->(-11 * i + 1 * x$1$32._2) + 8 <= 0
[[34m  Info  [0m] checked VC inst... in 0.005s
[[34m  Info  [0m] - Found inductive invariant: isPrimeRec-steps --> (BigInt(-11) * i + steps) + BigInt(8) <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[33mWarning [0m] Unexpected error from orb-cvc4 solver: A non-linear fact (involving div/mod/divisibility) was asserted to arithmetic in a linear logic: (INTS_DIVISION_TOTAL n!9 i!90)
[[33mWarning [0m] if you only use division (or modulus) by a constant value, or if you only use the divisibility-by-k predicate, try using the --rewrite-divk option.
[[33mWarning [0m] The fact in question: (= termITE_3 (INTS_DIVISION_TOTAL n!9 i!90))
[[33mWarning [0m] 
[[33mWarning [0m] Unexpected error from orb-cvc4 solver: Solver encountered exception: java.io.IOException: Stream closed
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function isPrimeNum-steps...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeNum-steps-->(1 * r$177._2 + 0 * n) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.002s
[[34m  Info  [0m] Function: isPrimeNum-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 9 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeNum-steps-->(1 * r$177._2 + -12 * n) + 17 <= 0
[[34m  Info  [0m] checked VC inst... in 0.001s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] isPrimeNum-steps-->(1 * r$177._2 + -11 * n) + 17 <= 0
[[34m  Info  [0m] checked VC inst... in 0.001s
[[34m  Info  [0m] - Found inductive invariant: isPrimeNum-steps --> (steps + BigInt(-11) * n) + BigInt(17) <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function nextElem-steps...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nextElem-steps-->(0 * i + 1 * r$171._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.003s
[[34m  Info  [0m] Function: nextElem-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 9 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nextElem-steps-->(-12 * i + 1 * r$171._2) + 12 <= 0
[[34m  Info  [0m] checked VC inst... in 0.001s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nextElem-steps-->(-11 * i + 1 * r$171._2) + 12 <= 0
[[34m  Info  [0m] checked VC inst... in 0.001s
[[34m  Info  [0m] - Found inductive invariant: nextElem-steps --> (BigInt(-11) * i + steps) + BigInt(12) <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function tail-mem-steps...
[[34m  Info  [0m] - considering function takeRec-steps...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((0 * n + 1 * r$174._2) + 0 * i) + 0 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.014s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 12 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((0 * n + 1 * r$174._2) + 0 * i) + -11 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.009s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 13 + 13
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((0 * n + 1 * r$174._2) + 0 * i) + -11 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + -11 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.011s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 13 + 26
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((0 * n + 1 * r$174._2) + 0 * i) + 0 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.027s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 11 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-1 * n + 1 * r$174._2) + 1 * i) + -7 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.019s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 12 + 12
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-1 * n + 1 * r$174._2) + 1 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.029s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 21 + 24
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((0 * n + 1 * r$174._2) + 0 * i) + 0 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.033s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 11 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-1 * n + 1 * r$174._2) + 1 * i) + -7 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.03s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 12 + 12
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-1 * n + 1 * r$174._2) + 1 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.028s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 21 + 24
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-16 * n + 1 * r$174._2) + 16 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.043s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 25 + 45
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-16 * n + 1 * r$174._2) + 16 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + -3 * mult(n, n - i)) + -58 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.065s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 25 + 70
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-16 * n + 1 * r$174._2) + 16 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (2 * r$174._2 + -118 * mult(n, n - i)) + -1 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.151s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 20 + 95
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((0 * n + 1 * r$174._2) + 0 * i) + 0 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.058s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 11 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-1 * n + 1 * r$174._2) + 1 * i) + -7 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.031s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 12 + 12
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-1 * n + 1 * r$174._2) + 1 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.038s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 23 + 24
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-16 * n + 1 * r$174._2) + 16 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + 0 * mult(n, n - i)) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.071s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 26 + 47
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-16 * n + 1 * r$174._2) + 16 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + -3 * mult(n, n - i)) + -58 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.211s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 28 + 73
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-16 * n + 1 * r$174._2) + 16 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (8 * r$174._2 + -344 * mult(n, n - i)) + -1 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.078s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-15 * n + 1 * r$174._2) + 15 * i) + -9 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + -11 * mult(n, n - i)) + -30 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.113s
[[34m  Info  [0m] Function: takeRec-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 25 + 101
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-16 * n + 1 * r$174._2) + 16 * i) + -10 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + -17 * mult(n, n - i)) + -26 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.102s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] takeRec-steps-->if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((-15 * n + 1 * r$174._2) + 15 * i) + -9 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (1 * r$174._2 + -16 * mult(n, n - i)) + -25 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.065s
[[34m  Info  [0m] - Found inductive invariant: takeRec-steps --> if (concUntil(s, n - i, st@)) {
[[34m  Info  [0m]   ((BigInt(-15) * n + steps) + BigInt(15) * i) + BigInt(-9) <= BigInt(0)
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (steps + BigInt(-16) * (n * (n - i))) + BigInt(-25) <= BigInt(0)
[[34m  Info  [0m] }
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function primesUntilN-steps...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] primesUntilN-steps-->if (concUntil(primeStream, n - 2, st@)) {
[[34m  Info  [0m]   (0 * n + 1 * r$176._2) + 0 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (0 * mult(n, n) + 1 * r$176._2) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.007s
[[34m  Info  [0m] Function: primesUntilN-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 9 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] primesUntilN-steps-->if (concUntil(primeStream, n - 2, st@)) {
[[34m  Info  [0m]   (-16 * n + 1 * r$176._2) + 18 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (0 * mult(n, n) + 1 * r$176._2) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.005s
[[34m  Info  [0m] Function: primesUntilN-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 9 + 10
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] primesUntilN-steps-->if (concUntil(primeStream, n - 2, st@)) {
[[34m  Info  [0m]   (0 * n + 1 * r$176._2) + 0 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (0 * mult(n, n) + 1 * r$176._2) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.066s
[[34m  Info  [0m] Function: primesUntilN-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 10 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] primesUntilN-steps-->if (concUntil(primeStream, n - 2, st@)) {
[[34m  Info  [0m]   (-4 * n + 32 * r$176._2) + -440 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (0 * mult(n, n) + 1 * r$176._2) + 0 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.033s
[[34m  Info  [0m] Function: primesUntilN-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 19 + 11
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] primesUntilN-steps-->if (concUntil(primeStream, n - 2, st@)) {
[[34m  Info  [0m]   (-4 * n + 32 * r$176._2) + -440 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (-18 * mult(n, n) + 1 * r$176._2) + -30 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.02s
[[34m  Info  [0m] Function: primesUntilN-steps--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 10 + 30
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] primesUntilN-steps-->if (concUntil(primeStream, n - 2, st@)) {
[[34m  Info  [0m]   (-16 * n + 1 * r$176._2) + 19 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (-18 * mult(n, n) + 1 * r$176._2) + -30 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.005s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] primesUntilN-steps-->if (concUntil(primeStream, n - 2, st@)) {
[[34m  Info  [0m]   (-15 * n + 1 * r$176._2) + 18 <= 0
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (-16 * mult(n, n) + 1 * r$176._2) + -28 <= 0
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.007s
[[34m  Info  [0m] - Found inductive invariant: primesUntilN-steps --> if (concUntil(primeStream, n - BigInt(2), st@)) {
[[34m  Info  [0m]   (BigInt(-15) * n + steps) + BigInt(18) <= BigInt(0)
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   (BigInt(-16) * (n * n) + steps) + BigInt(-28) <= BigInt(0)
[[34m  Info  [0m] }
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
Resource Verification Results: 
. ┌─────────┐
╔═╡ Summary ╞══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ └─────────┘                                                                                                                                                                  ║
║ isPrimeNum      steps <= 11 * n + -17                                                                                                                                  0.253 ║
║ isPrimeRec      steps <= 11 * i + -8                                                                                                                                   0.732 ║
║ nextElem        steps <= 11 * i + -12                                                                                                                                  0.234 ║
║ primesUntilN    if (toWithState[Boolean](concUntil(primeStream, n - 2)).in[BigInt](inSt[BigInt])) {
  steps <= 15 * n + -18
} else {
  steps <= 16 * (n * n) + 28
}    2.385 ║
║ takeRec         if (toWithState[Boolean](concUntil(s, n - i)).in[BigInt](inSt[BigInt])) {
  steps <= 15 * (n - i) + 9
} else {
  steps <= 16 * (n * (n - i)) + 25
}    4.436 ║
╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
║ total: 5     inferred: 5     unknown: 0     time: 8.040                                                                                                                      ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Stats dumped to file: PrimeStream-stats.txt
