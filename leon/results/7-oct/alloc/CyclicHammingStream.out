[[33mWarning [0m] warning: there were three feature warnings; re-run with -feature for details
[[33mWarning [0m] Postcondition of mergeSusp has resource template in conjunctions which cannot be separated!
[[34m  Info  [0m]  - Now considering 'postcondition' VC for map$14 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for map$14 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for mapSusp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mapSusp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for min$7 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for merge$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for force$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for force$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for mergeSusp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for mergeMapProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for argChainedStreamProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call argChainedStreamProp$5(s.tailFun match { ...)' VC for argChainedStreamProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for argChainedStreamProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for argChainingIsTransitive$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call argChainingIsTransitive$5(s.tailFun matc ...)' VC for argChainingIsTransitive$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call argChainedStreamProp$5(s, n))' VC for argChainingIsTransitive$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for argChainingIsTransitive$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for next$7 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for next$7 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for next$7 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for next$7 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for nthElemAfterSecond$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call argChainedStreamProp$5(f, n))' VC for nthElemAfterSecond$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call next$7(f, s, st@))' VC for nthElemAfterSecond$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call nthElemAfterSecond$5(n - BigInt(1), s, t ...)' VC for nthElemAfterSecond$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for nthElemAfterSecond$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for nthElemAfterSecond$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for nthElemAfterSecond$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for hamstream$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for hamGen$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for hamStreamSatisfiesProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call argChainingIsTransitive$5(s$121, n))' VC for hamStreamSatisfiesProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call argChainedStreamProp$5(s$121, n))' VC for hamStreamSatisfiesProp$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for nthHammingNumber$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call hamStreamSatisfiesProp$5(n))' VC for nthHammingNumber$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'precond. (call nthElemAfterSecond$5(n, first$3, second$ ...)' VC for nthHammingNumber$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for nthHammingNumber$5 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'postcondition' VC for fval-mem$3 @?:?...
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now considering 'match exhaustiveness' VC for fval-mem$3 @?:?...
[[34m  Info  [0m]  => VALID
  ????????????????????????
??? Verification Summary ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
? ????????????????????????                                                                                                                                ?
? MergeAndHammingNumbers.argChainedStreamProp$5     match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.062 ?
? MergeAndHammingNumbers.argChainedStreamProp$5     postcondition                                                 ?:?  valid  U:orb-smt-z3          0.086 ?
? MergeAndHammingNumbers.argChainedStreamProp$5     precond. (call argChainedStreamProp$5(s.tailFun match { ...)  ?:?  valid  U:orb-smt-z3          0.072 ?
? MergeAndHammingNumbers.argChainingIsTransitive$5  match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.060 ?
? MergeAndHammingNumbers.argChainingIsTransitive$5  postcondition                                                 ?:?  valid  U:orb-smt-z3          0.235 ?
? MergeAndHammingNumbers.argChainingIsTransitive$5  precond. (call argChainedStreamProp$5(s, n))                  ?:?  valid  U:orb-smt-z3          0.064 ?
? MergeAndHammingNumbers.argChainingIsTransitive$5  precond. (call argChainingIsTransitive$5(s.tailFun matc ...)  ?:?  valid  U:orb-smt-orb-cvc4    4.782 ?
? MergeAndHammingNumbers.force$5                    match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.041 ?
? MergeAndHammingNumbers.force$5                    postcondition                                                 ?:?  valid  U:orb-smt-z3          0.133 ?
? ValOrSusp.fval-mem$3                              match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.031 ?
? ValOrSusp.fval-mem$3                              postcondition                                                 ?:?  valid  U:orb-smt-orb-cvc4    0.157 ?
? MergeAndHammingNumbers.hamGen$5                   postcondition                                                 ?:?  valid  U:orb-smt-orb-cvc4    0.087 ?
? MergeAndHammingNumbers.hamStreamSatisfiesProp$5   postcondition                                                 ?:?  valid  U:orb-smt-z3          0.552 ?
? MergeAndHammingNumbers.hamStreamSatisfiesProp$5   precond. (call argChainedStreamProp$5(s$121, n))              ?:?  valid  U:orb-smt-z3          0.054 ?
? MergeAndHammingNumbers.hamStreamSatisfiesProp$5   precond. (call argChainingIsTransitive$5(s$121, n))           ?:?  valid  U:orb-smt-z3          0.178 ?
? MergeAndHammingNumbers.hamstream$5                postcondition                                                 ?:?  valid  U:orb-smt-z3          0.030 ?
? MergeAndHammingNumbers.map$14                     match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.037 ?
? MergeAndHammingNumbers.map$14                     postcondition                                                 ?:?  valid  U:orb-smt-z3          0.310 ?
? MergeAndHammingNumbers.mapSusp$5                  match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.034 ?
? MergeAndHammingNumbers.mapSusp$5                  postcondition                                                 ?:?  valid  U:orb-smt-z3          0.193 ?
? MergeAndHammingNumbers.merge$5                    postcondition                                                 ?:?  valid  U:orb-smt-z3          0.038 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.065 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.077 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.066 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.070 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.066 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.089 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.063 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.035 ?
? MergeAndHammingNumbers.mergeMapProp$5             match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.068 ?
? MergeAndHammingNumbers.mergeMapProp$5             postcondition                                                 ?:?  valid  U:orb-smt-orb-cvc4    0.120 ?
? MergeAndHammingNumbers.mergeSusp$5                postcondition                                                 ?:?  valid  U:orb-smt-z3          0.165 ?
? MergeAndHammingNumbers.min$7                      postcondition                                                 ?:?  valid  U:orb-smt-z3          0.032 ?
? MergeAndHammingNumbers.next$7                     match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.057 ?
? MergeAndHammingNumbers.next$7                     match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.059 ?
? MergeAndHammingNumbers.next$7                     match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.033 ?
? MergeAndHammingNumbers.next$7                     postcondition                                                 ?:?  valid  U:orb-smt-z3          0.197 ?
? MergeAndHammingNumbers.nthElemAfterSecond$5       match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.067 ?
? MergeAndHammingNumbers.nthElemAfterSecond$5       match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.096 ?
? MergeAndHammingNumbers.nthElemAfterSecond$5       match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.038 ?
? MergeAndHammingNumbers.nthElemAfterSecond$5       postcondition                                                 ?:?  valid  U:orb-smt-z3          0.238 ?
? MergeAndHammingNumbers.nthElemAfterSecond$5       precond. (call argChainedStreamProp$5(f, n))                  ?:?  valid  U:orb-smt-z3          0.064 ?
? MergeAndHammingNumbers.nthElemAfterSecond$5       precond. (call next$7(f, s, st@))                             ?:?  valid  U:orb-smt-z3          0.165 ?
? MergeAndHammingNumbers.nthElemAfterSecond$5       precond. (call nthElemAfterSecond$5(n - BigInt(1), s, t ...)  ?:?  valid  U:orb-smt-z3          0.226 ?
? MergeAndHammingNumbers.nthHammingNumber$5         match exhaustiveness                                          ?:?  valid  U:orb-smt-z3          0.067 ?
? MergeAndHammingNumbers.nthHammingNumber$5         postcondition                                                 ?:?  valid  U:orb-smt-orb-cvc4    0.260 ?
? MergeAndHammingNumbers.nthHammingNumber$5         precond. (call hamStreamSatisfiesProp$5(n))                   ?:?  valid  U:orb-smt-z3          0.028 ?
? MergeAndHammingNumbers.nthHammingNumber$5         precond. (call nthElemAfterSecond$5(n, first$3, second$ ...)  ?:?  valid  U:orb-smt-z3          0.206 ?
???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
? total: 48     valid: 48     invalid: 0      unknown 0                                                                                             9.953 ?
???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
[[34m  Info  [0m] - considering function map-alloc...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] map-alloc-->1 * res$218._2 + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.004s
[[34m  Info  [0m] Function: map-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 7 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] map-alloc-->1 * res$218._2 + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.004s
[[34m  Info  [0m] Function: map-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 6 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] map-alloc-->1 * res$218._2 + -5 <= 0
[[34m  Info  [0m] checked VC inst... in 0.001s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] map-alloc-->1 * res$218._2 + -3 <= 0
[[34m  Info  [0m] checked VC inst... in 0.002s
[[34m  Info  [0m] - Found inductive invariant: map-alloc --> alloc + BigInt(-3) <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - Nothing to solve for min-alloc
[[34m  Info  [0m] - considering function merge-alloc...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] merge-alloc-->1 * x$1$32._2 + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.003s
[[34m  Info  [0m] Function: merge-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 6 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] merge-alloc-->1 * x$1$32._2 + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.008s
[[34m  Info  [0m] Function: merge-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 6 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] merge-alloc-->1 * x$1$32._2 + -5 <= 0
[[34m  Info  [0m] checked VC inst... in 0.006s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] merge-alloc-->1 * x$1$32._2 + -3 <= 0
[[34m  Info  [0m] checked VC inst... in 0.003s
[[34m  Info  [0m] - Found inductive invariant: merge-alloc --> alloc + BigInt(-3) <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function hamGen-alloc...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] hamGen-alloc-->1 * x$9$3._2 + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.009s
[[34m  Info  [0m] Function: hamGen-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 9 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] hamGen-alloc-->1 * x$9$3._2 + -17 <= 0
[[34m  Info  [0m] checked VC inst... in 0.001s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] hamGen-alloc-->1 * x$9$3._2 + -15 <= 0
[[34m  Info  [0m] checked VC inst... in 0.001s
[[34m  Info  [0m] - Found inductive invariant: hamGen-alloc --> alloc + BigInt(-15) <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function mapSusp-alloc...
[[34m  Info  [0m] - considering function force-alloc...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] force-alloc-->if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }) {
[[34m  Info  [0m]       1 * x$2$20._2 + 0 <= 0
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.011s
[[34m  Info  [0m] Function: force-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 6 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] force-alloc-->if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }) {
[[34m  Info  [0m]       1 * x$2$20._2 + 0 <= 0
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.011s
[[34m  Info  [0m] Function: force-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 7 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] force-alloc-->if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }) {
[[34m  Info  [0m]       1 * x$2$20._2 + 0 <= 0
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.047s
[[34m  Info  [0m] Function: force-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 7 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] force-alloc-->if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }) {
[[34m  Info  [0m]       1 * x$2$20._2 + 0 <= 0
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.085s
[[34m  Info  [0m] Function: force-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 8 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] force-alloc-->if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }) {
[[34m  Info  [0m]       1 * x$2$20._2 + -9 <= 0
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.007s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] force-alloc-->if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }) {
[[34m  Info  [0m]       1 * x$2$20._2 + -4 <= 0
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.006s
[[34m  Info  [0m] - Found inductive invariant: force-alloc --> if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       st@.contains(Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun))
[[34m  Info  [0m]     }) {
[[34m  Info  [0m]       alloc + BigInt(-4) <= BigInt(0)
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function mergeSusp-alloc...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] mergeSusp-alloc-->if (if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   false
[[34m  Info  [0m] }) {
[[34m  Info  [0m]   if (if (b.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]     if (b.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]       if (b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         Fval-memM@(b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       false
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }) {
[[34m  Info  [0m]     if (c.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]       if (c.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]         if (if (c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           Fval-memM@(c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]         }) {
[[34m  Info  [0m]           1 * x$3$10._2 + 0 <= 0
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         }
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.033s
[[34m  Info  [0m] Function: mergeSusp-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 15 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] mergeSusp-alloc-->if (if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   false
[[34m  Info  [0m] }) {
[[34m  Info  [0m]   if (if (b.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]     if (b.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]       if (b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         Fval-memM@(b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       false
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }) {
[[34m  Info  [0m]     if (c.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]       if (c.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]         if (if (c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           Fval-memM@(c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]         }) {
[[34m  Info  [0m]           1 * x$3$10._2 + 0 <= 0
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         }
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.04s
[[34m  Info  [0m] Function: mergeSusp-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 15 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] mergeSusp-alloc-->if (if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   false
[[34m  Info  [0m] }) {
[[34m  Info  [0m]   if (if (b.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]     if (b.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]       if (b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         Fval-memM@(b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       false
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }) {
[[34m  Info  [0m]     if (c.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]       if (c.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]         if (if (c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           Fval-memM@(c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]         }) {
[[34m  Info  [0m]           1 * x$3$10._2 + -9 <= 0
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         }
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.056s
[[34m  Info  [0m] Function: mergeSusp-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 14 + 16
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] mergeSusp-alloc-->if (if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   false
[[34m  Info  [0m] }) {
[[34m  Info  [0m]   if (if (b.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]     if (b.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]       if (b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         Fval-memM@(b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       false
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }) {
[[34m  Info  [0m]     if (c.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]       if (c.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]         if (if (c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           Fval-memM@(c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]         }) {
[[34m  Info  [0m]           1 * x$3$10._2 + -12 <= 0
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         }
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.034s
[[34m  Info  [0m] Function: mergeSusp-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 13 + 30
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] mergeSusp-alloc-->if (if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   false
[[34m  Info  [0m] }) {
[[34m  Info  [0m]   if (if (b.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]     if (b.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]       if (b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         Fval-memM@(b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       false
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }) {
[[34m  Info  [0m]     if (c.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]       if (c.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]         if (if (c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           Fval-memM@(c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]         }) {
[[34m  Info  [0m]           1 * x$3$10._2 + -16 <= 0
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         }
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.019s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] mergeSusp-alloc-->if (if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   false
[[34m  Info  [0m] }) {
[[34m  Info  [0m]   if (if (b.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]     if (b.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]       if (b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         Fval-memM@(b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       false
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }) {
[[34m  Info  [0m]     if (c.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]       if (c.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]         if (if (c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           Fval-memM@(c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun) ? st@
[[34m  Info  [0m]         }) {
[[34m  Info  [0m]           1 * x$3$10._2 + -15 <= 0
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         }
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] checked VC inst... in 0.016s
[[34m  Info  [0m] - Found inductive invariant: mergeSusp-alloc --> if (if (a.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]   if (a.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]     if (a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       st@.contains(Fval-memM@(a.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun))
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   false
[[34m  Info  [0m] }) {
[[34m  Info  [0m]   if (if (b.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]     if (b.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]       if (b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         st@.contains(Fval-memM@(b.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun))
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       false
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     false
[[34m  Info  [0m]   }) {
[[34m  Info  [0m]     if (c.tailFun.isInstanceOf[Susp]) {
[[34m  Info  [0m]       if (c.tailFun.asInstanceOf[Susp].fun.isInstanceOf[MapSuspL@]) {
[[34m  Info  [0m]         if (if (c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun.isInstanceOf[Val]) {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           st@.contains(Fval-memM@(c.tailFun.asInstanceOf[Susp].fun.asInstanceOf[MapSuspL@].xs.tailFun))
[[34m  Info  [0m]         }) {
[[34m  Info  [0m]           alloc + BigInt(-15) <= BigInt(0)
[[34m  Info  [0m]         } else {
[[34m  Info  [0m]           true
[[34m  Info  [0m]         }
[[34m  Info  [0m]       } else {
[[34m  Info  [0m]         true
[[34m  Info  [0m]       }
[[34m  Info  [0m]     } else {
[[34m  Info  [0m]       true
[[34m  Info  [0m]     }
[[34m  Info  [0m]   } else {
[[34m  Info  [0m]     true
[[34m  Info  [0m]   }
[[34m  Info  [0m] } else {
[[34m  Info  [0m]   true
[[34m  Info  [0m] }
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function fval-mem-alloc...
[[34m  Info  [0m] - considering function next-alloc...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] next-alloc-->1 * x$4$7._2 + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.016s
[[34m  Info  [0m] Function: next-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 6 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] next-alloc-->1 * x$4$7._2 + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.126s
[[34m  Info  [0m] Function: next-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 7 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] next-alloc-->1 * x$4$7._2 + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 7.049s
[[34m  Info  [0m] Function: next-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 10 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] next-alloc-->1 * x$4$7._2 + -33 <= 0
[[34m  Info  [0m] checked VC inst... in 0.046s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] next-alloc-->1 * x$4$7._2 + -16 <= 0
[[34m  Info  [0m] checked VC inst... in 0.022s
[[34m  Info  [0m] - Found inductive invariant: next-alloc --> alloc + BigInt(-16) <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function nthElemAfterSecond-alloc...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthElemAfterSecond-alloc-->(0 * n + 1 * x$5$6._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.018s
[[34m  Info  [0m] Function: nthElemAfterSecond-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 10 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthElemAfterSecond-alloc-->(-8 * n + 4 * x$5$6._2) + -65 <= 0
[[34m  Info  [0m] checked VC inst... in 0.013s
[[34m  Info  [0m] Function: nthElemAfterSecond-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 12 + 11
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthElemAfterSecond-alloc-->(0 * n + 1 * x$5$6._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.101s
[[34m  Info  [0m] Function: nthElemAfterSecond-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 10 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthElemAfterSecond-alloc-->(-8 * n + 4 * x$5$6._2) + -65 <= 0
[[34m  Info  [0m] checked VC inst... in 0.123s
[[34m  Info  [0m] Function: nthElemAfterSecond-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 16 + 11
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthElemAfterSecond-alloc-->(-18 * n + 1 * x$5$6._2) + 16 <= 0
[[34m  Info  [0m] checked VC inst... in 0.006s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthElemAfterSecond-alloc-->(-16 * n + 1 * x$5$6._2) + 16 <= 0
[[34m  Info  [0m] checked VC inst... in 0.005s
[[34m  Info  [0m] - Found inductive invariant: nthElemAfterSecond-alloc --> (BigInt(-16) * n + alloc) + BigInt(16) <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
[[34m  Info  [0m] - considering function nthHammingNumber-alloc...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthHammingNumber-alloc-->(0 * n + 1 * x$10$3._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.028s
[[34m  Info  [0m] Function: nthHammingNumber-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 11 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthHammingNumber-alloc-->(-19 * n + 1 * x$10$3._2) + 17 <= 0
[[34m  Info  [0m] checked VC inst... in 0.022s
[[34m  Info  [0m] Function: nthHammingNumber-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 8 + 12
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthHammingNumber-alloc-->(-152 * n + 8 * x$10$3._2) + -1 <= 0
[[34m  Info  [0m] checked VC inst... in 0.033s
[[34m  Info  [0m] Function: nthHammingNumber-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 9 + 20
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthHammingNumber-alloc-->(0 * n + 1 * x$10$3._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.018s
[[34m  Info  [0m] Function: nthHammingNumber-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 10 + 1
[[34m  Info  [0m] - More unrollings for invariant inference
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthHammingNumber-alloc-->(0 * n + 1 * x$10$3._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.079s
[[34m  Info  [0m] Function: nthHammingNumber-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 11 + 1
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthHammingNumber-alloc-->(-16 * n + 8 * x$10$3._2) + -257 <= 0
[[34m  Info  [0m] checked VC inst... in 0.202s
[[34m  Info  [0m] Function: nthHammingNumber-alloc--Found candidate invariant is not a real invariant! 
[[34m  Info  [0m] # of atomic predicates: 11 + 12
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthHammingNumber-alloc-->(-264 * n + 8 * x$10$3._2) + -1 <= 0
[[34m  Info  [0m] checked VC inst... in 0.018s
[[34m  Info  [0m] minimizing...
[[34m  Info  [0m] Candidate invariants
[[34m  Info  [0m] nthHammingNumber-alloc-->(-16 * n + 1 * x$10$3._2) + 0 <= 0
[[34m  Info  [0m] checked VC inst... in 0.01s
[[34m  Info  [0m] - Found inductive invariant: nthHammingNumber-alloc --> BigInt(-16) * n + alloc <= BigInt(0)
[[34m  Info  [0m] - Verifying Invariants... 
[[34m  Info  [0m] - Invariant verified
Resource Verification Results: 
. ???????????
??? Summary ???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
? ???????????                                                                                                                                                                                                                                                 ?
? force           val in = inSt[BigInt]
if (toWithState[Boolean](constTimeArg(a)).in[BigInt](in)) {
  alloc <= 4
} else {
  true
}                                                                                                                     1.030  ?
? hamGen          alloc <= 15                                                                                                                                                                                                                          0.383  ?
? map             alloc <= 3                                                                                                                                                                                                                           0.589  ?
? merge           alloc <= 3                                                                                                                                                                                                                           0.273  ?
? mergeSusp       val in = inSt[BigInt]
if (toWithState[Boolean](constTimeArg(a)).in[BigInt](in) && toWithState[Boolean](constTimeArg(b)).in[BigInt](in) && toWithState[Boolean](constTimeArg(c)).in[BigInt](in)) {
  alloc <= 15
} else {
  true
}    0.924  ?
? next            alloc <= 16                                                                                                                                                                                                                          10.083 ?
? nthElemAfterSe? alloc <= 16 * n + -16                                                                                                                                                                                                                1.320  ?
? nthHammingNumb? alloc <= 16 * n + 0                                                                                                                                                                                                                  1.376  ?
???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
? total: 8     inferred: 8     unknown: 0     time: 15.978                                                                                                                                                                                                    ?
???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
[[34m  Info  [0m] Stats dumped to file: CyclicHammingStream-stats.txt
