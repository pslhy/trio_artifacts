synthesizer :trio
prog : testcases/ref/bool_always_false.mls
fix (f : bool -> bool) = fun (x:bool) -> False
Size: 4
Iter: 1

Time(s): 0.54 
Mem(Kb): 14256


synthesizer :trio
prog : testcases/ref/bool_always_true.mls
fun (x:bool) -> True
Size: 4
Iter: 0

Time(s): 0.02 
Mem(Kb): 14188


synthesizer :trio
prog : testcases/ref/bool_band.mls
fix (f : bool * bool -> bool) =
  fun (x:bool * bool) -> match x . 0 with
                           | False _ -> x . 0
                           | True _ -> x . 1
Size: 14
Iter: 3

Time(s): 0.02 
Mem(Kb): 15932


synthesizer :trio
prog : testcases/ref/bool_bor.mls
fix (f : bool * bool -> bool) =
  fun (x:bool * bool) -> match x . 0 with
                           | False _ -> x . 1
                           | True _ -> x . 0
Size: 14
Iter: 3

Time(s): 0.02 
Mem(Kb): 15928


synthesizer :trio
prog : testcases/ref/bool_impl.mls
fix (f : bool * bool -> bool) =
  fun (x:bool * bool) -> match x . 0 with
                           | False _ -> True
                           | True _ -> x . 1
Size: 13
Iter: 2

Time(s): 0.01 
Mem(Kb): 15540


synthesizer :trio
prog : testcases/ref/bool_neg.mls
fix (f : bool -> bool) =
  fun (x:bool) -> match x with
                    | False _ -> True
                    | True _ -> False
Size: 8
Iter: 2

Time(s): 0.01 
Mem(Kb): 14520


synthesizer :trio
prog : testcases/ref/bool_xor.mls
fix (f : bool * bool -> bool) =
  fun (x:bool * bool) ->
    match x . 0 with
      | False _ -> x . 1
      | True _ -> (match x . 1 with
                     | False _ -> x . 0
                     | True _ -> False)
Size: 20
Iter: 3

Time(s): 0.02 
Mem(Kb): 15928


synthesizer :trio
prog : testcases/ref/list_append.mls
fix (f : list * list -> list) =
  fun (x:list * list) ->
    match x . 0 with
      | Nil _ -> x . 1
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))
Size: 31
Iter: 6

Time(s): 0.41 
Mem(Kb): 19708


synthesizer :trio
prog : testcases/ref/list_compress.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> x
                     | Cons _ -> (match compare (Un_Cons x . 0)
                                          (Un_Cons (Un_Cons x . 1) . 0) with
                                    | EQ _ -> f (Un_Cons x . 1)
                                    | GT _ -> Cons (Un_Cons x . 0,
                                                     f (Un_Cons x . 1))
                                    | LT _ -> Cons (Un_Cons x . 0,
                                                     f (Un_Cons x . 1))))
Size: 56
Iter: 10

Time(s): 1.04 
Mem(Kb): 19696


synthesizer :trio
prog : testcases/ref/list_concat.mls
fix (f : llist -> list) =
  fun (x:llist) ->
    match x with
      | LNil _ -> Nil
      | LCons _ -> append (Un_LCons x . 0) (f (Un_LCons x . 1))
Size: 19
Iter: 5

Time(s): 1.16 
Mem(Kb): 20232


synthesizer :trio
prog : testcases/ref/list_drop.mls
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> x . 0
      | Cons _ -> (match x . 1 with
                     | O _ -> x . 0
                     | S _ -> f (Un_Cons (x . 0) . 1, Un_S (x . 1)))
Size: 31
Iter: 5

Time(s): 0.36 
Mem(Kb): 19672


synthesizer :trio
prog : testcases/ref/list_even_parity.mls
fix (f : list -> bool) =
  fun (x:list) ->
    match x with
      | Nil _ -> True
      | Cons _ -> (match Un_Cons x . 0 with
                     | False _ -> f (Un_Cons x . 1)
                     | True _ -> bnot (f (Un_Cons x . 1)))
Size: 25
Iter: 5

Time(s): 0.16 
Mem(Kb): 17008


synthesizer :trio
prog : testcases/ref/list_filter.mls
fix (f : (nat -> bool) * list -> list) =
  fun (x:(nat -> bool) * list) ->
    match x . 1 with
      | Nil _ -> x . 1
      | Cons _ -> (match x . 0 (Un_Cons (x . 1) . 0) with
                     | False _ -> f (x . 0, Un_Cons (x . 1) . 1)
                     | True _ -> Cons (Un_Cons (x . 1) . 0,
                                        f (x . 0, Un_Cons (x . 1) . 1)))
Size: 56
Iter: 8

Time(s): 0.99 
Mem(Kb): 19184


synthesizer :trio
prog : testcases/ref/list_fold.mls
fix (f : (nat -> nat -> nat) * nat * list -> nat) =
  fun (x:(nat -> nat -> nat) * nat * list) ->
    match x . 2 with
      | Nil _ -> x . 1
      | Cons _ -> x . 0 (f (x . 0, x . 1, Un_Cons (x . 2) . 1))
                    (Un_Cons (x . 2) . 0)
Size: 42
Iter: 6

Time(s): 1.03 
Mem(Kb): 20348


synthesizer :trio
prog : testcases/ref/list_hd.mls
fix (f : list -> nat) =
  fun (x:list) -> match x with
                    | Nil _ -> 0
                    | Cons _ -> Un_Cons x . 0
Size: 10
Iter: 2

Time(s): 0.21 
Mem(Kb): 18244


synthesizer :trio
prog : testcases/ref/list_inc.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> Cons (S (Un_Cons x . 0), f (Un_Cons x . 1))
Size: 18
Iter: 4

Time(s): 0.43 
Mem(Kb): 18656


synthesizer :trio
prog : testcases/ref/list_last.mls
fix (f : list -> natopt) =
  fun (x:list) ->
    match x with
      | Nil _ -> None
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> Some (Un_Cons x . 0)
                     | Cons _ -> f (Un_Cons x . 1))
Size: 22
Iter: 4

Time(s): 0.37 
Mem(Kb): 18344


synthesizer :trio
prog : testcases/ref/list_length.mls
fix (f : list -> nat) =
  fun (x:list) -> match x with
                    | Nil _ -> 0
                    | Cons _ -> S (f (Un_Cons x . 1))
Size: 13
Iter: 4

Time(s): 0.35 
Mem(Kb): 18376


synthesizer :trio
prog : testcases/ref/list_map.mls
fix (f : (nat -> nat) * list -> list) =
  fun (x:(nat -> nat) * list) ->
    match x . 1 with
      | Nil _ -> x . 1
      | Cons _ -> Cons (x . 0 (Un_Cons (x . 1) . 0),
                         f (x . 0, Un_Cons (x . 1) . 1))
Size: 37
Iter: 6

Time(s): 0.71 
Mem(Kb): 19080


synthesizer :trio
prog : testcases/ref/list_nth.mls
fix (f : list * nat -> nat) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> 0
      | Cons _ -> (match x . 1 with
                     | O _ -> Un_Cons (x . 0) . 0
                     | S _ -> f (Un_Cons (x . 0) . 1, Un_S (x . 1)))
Size: 33
Iter: 6

Time(s): 0.39 
Mem(Kb): 19664


synthesizer :trio
prog : testcases/ref/list_pairwise_swap.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> Un_Cons x . 1
                     | Cons _ -> Cons (Un_Cons (Un_Cons x . 1) . 0,
                                        Cons (Un_Cons x . 0,
                                               f
                                                 (Un_Cons (Un_Cons x . 1) . 1))))
Size: 38
Iter: 7

Time(s): 0.41 
Mem(Kb): 18768


synthesizer :trio
prog : testcases/ref/list_rev_append.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> append (f (Un_Cons x . 1)) Cons (Un_Cons x . 0, Nil)
Size: 22
Iter: 5

Time(s): 1.63 
Mem(Kb): 19820


synthesizer :trio
prog : testcases/ref/list_rev_fold.mls
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x
Size: 10
Iter: 3

Time(s): 0.71 
Mem(Kb): 18712


synthesizer :trio
prog : testcases/ref/list_rev_snoc.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> snoc (f (Un_Cons x . 1)) (Un_Cons x . 0)
Size: 18
Iter: 5

Time(s): 1.02 
Mem(Kb): 19764


synthesizer :trio
prog : testcases/ref/list_rev_tailcall.mls

Command exited with non-zero status 124
Time(s): 120.09 
Mem(Kb): 1844696


synthesizer :trio
prog : testcases/ref/list_snoc.mls
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))
Size: 36
Iter: 3

Time(s): 0.38 
Mem(Kb): 18048


synthesizer :trio
prog : testcases/ref/list_sort_sorted_insert.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> insert (f (Un_Cons x . 1)) (Un_Cons x . 0)
Size: 18
Iter: 6

Time(s): 1.85 
Mem(Kb): 19824


synthesizer :trio
prog : testcases/ref/list_sorted_insert.mls
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> (match compare (x . 1) (Un_Cons (x . 0) . 0) with
                     | EQ _ -> x . 0
                     | GT _ -> Cons (Un_Cons (x . 0) . 0,
                                      f (Un_Cons (x . 0) . 1, x . 1))
                     | LT _ -> Cons (x . 1, x . 0))
Size: 60
Iter: 6

Time(s): 0.85 
Mem(Kb): 19708


synthesizer :trio
prog : testcases/ref/list_stutter.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> Cons (Un_Cons x . 0,
                         Cons (Un_Cons x . 0, f (Un_Cons x . 1)))
Size: 23
Iter: 3

Time(s): 0.37 
Mem(Kb): 18776


synthesizer :trio
prog : testcases/ref/list_sum.mls
fix (f : list -> nat) = fun (x:list) -> fold add 0 x
Size: 10
Iter: 2

Time(s): 0.78 
Mem(Kb): 18680


synthesizer :trio
prog : testcases/ref/list_take.mls
fix (f : nat * list -> list) =
  fun (x:nat * list) ->
    match x . 1 with
      | Nil _ -> x . 1
      | Cons _ -> (match x . 0 with
                     | O _ -> Nil
                     | S _ -> Cons (Un_Cons (x . 1) . 0,
                                     f (Un_S (x . 0), Un_Cons (x . 1) . 1)))
Size: 38
Iter: 8

Time(s): 0.32 
Mem(Kb): 19652


synthesizer :trio
prog : testcases/ref/list_tl.mls
fix (f : list -> list) =
  fun (x:list) -> match x with
                    | Nil _ -> x
                    | Cons _ -> Un_Cons x . 1
Size: 9
Iter: 2

Time(s): 0.16 
Mem(Kb): 18324


synthesizer :trio
prog : testcases/ref/nat_add.mls
fix (f : nat * nat -> nat) =
  fun (x:nat * nat) ->
    match x . 0 with
      | O _ -> x . 1
      | S _ -> S (f (Un_S (x . 0), x . 1))
Size: 22
Iter: 5

Time(s): 0.11 
Mem(Kb): 28128


synthesizer :trio
prog : testcases/ref/nat_iseven.mls
fix (f : nat -> bool) =
  fun (x:nat) ->
    match x with
      | O _ -> True
      | S _ -> (match Un_S x with
                  | O _ -> False
                  | S _ -> f Un_S (Un_S x))
Size: 16
Iter: 4

Time(s): 0.02 
Mem(Kb): 15940


synthesizer :trio
prog : testcases/ref/nat_max.mls
fix (f : nat * nat -> nat) =
  fun (x:nat * nat) ->
    match compare (x . 0) (x . 1) with
      | EQ _ -> x . 1
      | GT _ -> x . 0
      | LT _ -> x . 1
Size: 23
Iter: 5

Time(s): 0.24 
Mem(Kb): 36176


synthesizer :trio
prog : testcases/ref/nat_pred.mls
fix (f : nat -> nat) = fun (x:nat) -> match x with
                                        | O _ -> x
                                        | S _ -> Un_S x
Size: 7
Iter: 2

Time(s): 0.02 
Mem(Kb): 15904


synthesizer :trio
prog : testcases/ref/tree_binsert.mls
fix (f : tree * nat -> tree) =
  fun (x:tree * nat) ->
    match x . 0 with
      | Leaf _ -> Node (x . 0, x . 1, x . 0)
      | Node _ -> (match comp_nat (x . 1) (Un_Node (x . 0) . 1) with
                     | CEq _ -> x . 0
                     | CGt _ -> Node (f (Un_Node (x . 0) . 0, x . 1),
                                       Un_Node (x . 0) . 1,
                                       Un_Node (x . 0) . 2)
                     | CLt _ -> Node (Un_Node (x . 0) . 0,
                                       Un_Node (x . 0) . 1,
                                       f (Un_Node (x . 0) . 2, x . 1)))
Size: 87
Iter: 6

Time(s): 7.08 
Mem(Kb): 29004


synthesizer :trio
prog : testcases/ref/tree_collect_leaves.mls
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))
Size: 27
Iter: 4

Time(s): 6.16 
Mem(Kb): 17968


synthesizer :trio
prog : testcases/ref/tree_count_leaves.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 1
      | Node _ -> sum (f (Un_Node x . 0)) (f (Un_Node x . 2))
Size: 22
Iter: 4

Time(s): 6.55 
Mem(Kb): 17968


synthesizer :trio
prog : testcases/ref/tree_count_nodes.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 0
      | Node _ -> sum (f (Un_Node x . 0)) S (f (Un_Node x . 2))
Size: 22
Iter: 4

Time(s): 6.16 
Mem(Kb): 17976


synthesizer :trio
prog : testcases/ref/tree_inorder.mls
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))
Size: 27
Iter: 4

Time(s): 8.90 
Mem(Kb): 19164


synthesizer :trio
prog : testcases/ref/tree_map.mls
fix (f : (nat -> nat) * tree -> tree) =
  fun (x:(nat -> nat) * tree) ->
    match x . 1 with
      | Leaf _ -> x . 1
      | Node _ -> Node (f (x . 0, Un_Node (x . 1) . 0),
                         x . 0 (Un_Node (x . 1) . 1),
                         f (x . 0, Un_Node (x . 1) . 2))
Size: 49
Iter: 6

Time(s): 6.76 
Mem(Kb): 23048


synthesizer :trio
prog : testcases/ref/tree_nodes_at_level.mls
fix (f : tree * nat -> nat) =
  fun (x:tree * nat) ->
    match x . 0 with
      | Leaf _ -> 0
      | Node _ -> (match x . 1 with
                     | O _ -> S (x . 1)
                     | S _ -> sum (f (Un_Node (x . 0) . 0, Un_S (x . 1)))
                                (f (Un_Node (x . 0) . 2, Un_S (x . 1))))
Size: 47
Iter: 7

Time(s): 5.30 
Mem(Kb): 21124


synthesizer :trio
prog : testcases/ref/tree_postorder.mls
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (append (f (Un_Node x . 0)) (f (Un_Node x . 2)))
                    Cons (Un_Node x . 1, Nil)
Size: 32
Iter: 6

Time(s): 10.22 
Mem(Kb): 21184


synthesizer :trio
prog : testcases/ref/tree_preorder.mls
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append Cons (Un_Node x . 1, f (Un_Node x . 0))
                    (f (Un_Node x . 2))
Size: 27
Iter: 6

Time(s): 9.98 
Mem(Kb): 21180


synthesizer :trio
prog : testcases/ref_new/expr_b.mls

Command exited with non-zero status 124
Time(s): 120.01 
Mem(Kb): 126432


synthesizer :trio
prog : testcases/ref_new/expr.mls
fix (f : exp -> nat) =
  fun (x:exp) ->
    match x with
      | INT _ -> Un_INT x
      | ADD _ -> add (f (Un_ADD x . 0)) (f (Un_ADD x . 1))
      | MUL _ -> mul (f (Un_MUL x . 0)) (f (Un_MUL x . 1))
Size: 36
Iter: 13

Time(s): 36.38 
Mem(Kb): 47612


synthesizer :trio
prog : testcases/ref_new/expr_sub.mls

Command exited with non-zero status 124
Time(s): 120.01 
Mem(Kb): 108280


synthesizer :trio
prog : testcases/ref_new/expr_div.mls

Command exited with non-zero status 124
Time(s): 120.01 
Mem(Kb): 102388


synthesizer :trio
prog : testcases/ref_new/list_dropeven.mls
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> (match is_even (Un_Cons x . 0) with
                     | False _ -> Cons (Un_Cons x . 0, f (Un_Cons x . 1))
                     | True _ -> Un_Cons x . 1)
Size: 28
Iter: 6

Time(s): 0.37 
Mem(Kb): 18528


synthesizer :trio
prog : testcases/ref_new/list_last2.mls
fix (f : list -> natopt) =
  fun (x:list) ->
    match x with
      | Nil _ -> None
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> None
                     | Cons _ -> (match Un_Cons (Un_Cons x . 1) . 1 with
                                    | Nil _ -> Some (Un_Cons x . 0,
                                                      Un_Cons (Un_Cons x . 1)
                                                        . 0)
                                    | Cons _ -> f (Un_Cons x . 1)))
Size: 40
Iter: 7

Time(s): 0.58 
Mem(Kb): 19024


synthesizer :trio
prog : testcases/ref_new/list_make.mls
fix (f : nat -> list) =
  fun (x:nat) -> match x with
                   | O _ -> Nil
                   | S _ -> Cons (0, f Un_S x)
Size: 14
Iter: 3

Time(s): 0.02 
Mem(Kb): 16388


synthesizer :trio
prog : testcases/ref_new/list_range.mls
fix (f : nat * nat -> list) =
  fun (x:nat * nat) ->
    match compare (x . 0) (x . 1) with
      | EQ _ -> Cons (x . 0, Nil)
      | GT _ -> (match x . 0 with
                   | O _ -> Cons (x . 0, Nil)
                   | S _ -> Cons (x . 0, f (Un_S (x . 0), x . 1)))
      | LT _ -> (match x . 0 with
                   | O _ -> Cons (x . 0, Nil)
                   | S _ -> Nil)
Size: 60
Iter: 7

Time(s): 0.33 
Mem(Kb): 29060


synthesizer :trio
prog : testcases/ref_new/nat_mul.mls
fix (f : nat * nat -> nat) =
  fun (x:nat * nat) ->
    match x . 0 with
      | O _ -> x . 0
      | S _ -> add (f (Un_S (x . 0), x . 1)) (x . 1)
Size: 27
Iter: 6

Time(s): 1.28 
Mem(Kb): 36408


synthesizer :trio
prog : testcases/ref_new/nat_sub.mls
fix (f : nat * nat -> nat) =
  fun (x:nat * nat) ->
    match x . 0 with
      | O _ -> x . 0
      | S _ -> (match x . 1 with
                  | O _ -> x . 0
                  | S _ -> f (Un_S (x . 0), Un_S (x . 1)))
Size: 29
Iter: 6

Time(s): 0.22 
Mem(Kb): 35236


synthesizer :trio
prog : testcases/ref_new/tree_balanced.mls
fix (f : tree -> bool) =
  fun (x:tree) ->
    match height x with
      | O _ -> True
      | S _ -> (match compare 1 Un_S (height x) with
                  | EQ _ -> True
                  | GT _ -> True
                  | LT _ -> False)
Size: 25
Iter: 4

Time(s): 10.82 
Mem(Kb): 20400


synthesizer :trio
prog : testcases/ref_new/tree_height.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 0
      | Node _ -> max S (f (Un_Node x . 1)) S (f (Un_Node x . 2))
Size: 23
Iter: 6

Time(s): 9.40 
Mem(Kb): 31152


synthesizer :trio
prog : testcases/ref_new/tree_lastleft.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 0
      | Node _ -> (match Un_Node x . 1 with
                     | Leaf _ -> Un_Node x . 0
                     | Node _ -> f (Un_Node x . 1))
Size: 21
Iter: 6

Time(s): 8.97 
Mem(Kb): 23448


synthesizer :trio
prog : testcases/ref_new/tree_notexist.mls
fix (f : nat * tree -> bool) =
  fun (x:nat * tree) ->
    match x . 1 with
      | Leaf _ -> True
      | Node _ -> (match compare (x . 0) (Un_Node (x . 1) . 0) with
                     | EQ _ -> False
                     | GT _ -> band (f (x . 0, Un_Node (x . 1) . 1))
                                 (f (x . 0, Un_Node (x . 1) . 2))
                     | LT _ -> band (f (x . 0, Un_Node (x . 1) . 1))
                                 (f (x . 0, Un_Node (x . 1) . 2)))
Size: 79
Iter: 8

Time(s): 8.00 
Mem(Kb): 23120


synthesizer :trio
prog : testcases/ref_new/tree_sum.mls
fix (f : tree -> nat) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> 0
      | Node _ -> add (f (Un_Node x . 1))
                    (add (f (Un_Node x . 2)) (Un_Node x . 0))
Size: 28
Iter: 5

Time(s): 9.70 
Mem(Kb): 27252


